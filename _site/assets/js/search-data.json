{"0": {
    "doc": ".htaccess",
    "title": ".htaccess file",
    "content": "This file is a configuration file that controls how a webserver responds to various requests. It is supported by several webservers, including the popular Apache webserver used by most commercial web hosting providers. The file operates at the level of a directory, allowing them to override global configuration settings of .htaccess directives higher in the directory tree. ",
    "url": "http://localhost:4000/the-basics/.htaccess.html#htaccess-file",
    "relUrl": "/the-basics/.htaccess.html#htaccess-file"
  },"1": {
    "doc": ".htaccess",
    "title": "Force https:// on CPanel",
    "content": "To force your website address from default http:// to https:// use the following: . RewriteEngine On RewriteCond %{HTTPS} !on RewriteCond %{REQUEST_URI} !^/[0-9]+\\..+\\.cpaneldcv$ RewriteCond %{REQUEST_URI} !^/\\.well-known/pki-validation/[A-F0-9]{32}\\.txt(?:\\ Comodo\\ DCV)?$ RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] . ",
    "url": "http://localhost:4000/the-basics/.htaccess.html#force-https-on-cpanel",
    "relUrl": "/the-basics/.htaccess.html#force-https-on-cpanel"
  },"2": {
    "doc": ".htaccess",
    "title": "Redirects",
    "content": "Redirect 301 . Redirect 301 is a pointing one URL to another permanently. Here are some different use of redirect 301 . Redirecting single URL . This is simply redirecting e.g. http://irawan.io/folder to https://irawan.io/new-folder or evendifferent website address . Redirect 301 /folder https://irawan.io/new-folder . Redirect the main folder but leave subfolders as they are . This is to redirect the main landing page of the old page to the new one but keeping the rest of the section/recursive path the same. E.g redicecting https://irawan.io/folder/ to other URL but keeping: https://irawan.io/folder/subfolders the same. RewriteCond %{REQUEST_URI} ^/folder/?$ RewriteRule (.*) /newfolder [R=301,L] . Redirect the whole folder including subfolders to one landing page . This is used to redirect the whole area of the website to one destination. RewriteRule ^folder/(.*)$ https://www.newdestination.com [R=301,NC,L] Redirect 301 /folder https://www.newdestinations.com . This will redirect https://irawan.io/folder and subfolders e.g https://irawan.io/folder/sub-folders/* to https://newdestinations.com . With this redirection, any folder under */folder/second-level wont be able to be redirected to a specific url because the RewiretRule will takeover the redirection behaviour. For a subdomain, simply add the following to the .htaccess in this subdomain. This will redirect the subdomain and all folder under it go to the /new-landing-page . Redirect the whole folder including subfolders to one landing page, but cherry pick some to specific folder (RedirectMatch) . Redirecting the whole folder to one other destination but still able to choose some page under the folder to go somewhere else. E.g /folder/* is redirected to /new-folder but /folder/subfolder/ that is under /folder/* to go to other page. RedirectMatch 301 ^/folder/second-level/(.*)$ https://irawan.io/new-folder/specific-destination RedirectMatch 301 ^/folder/(.*)$ https://irawan.io/other-folder . ",
    "url": "http://localhost:4000/the-basics/.htaccess.html#redirects",
    "relUrl": "/the-basics/.htaccess.html#redirects"
  },"3": {
    "doc": ".htaccess",
    "title": ".htaccess",
    "content": " ",
    "url": "http://localhost:4000/the-basics/.htaccess.html",
    "relUrl": "/the-basics/.htaccess.html"
  },"4": {
    "doc": "404 page not found",
    "title": "404 page not found",
    "content": "CodePen - 404 error page | . | | | | | | | | | | | | | | | | | | | That URL you have there does not exist Go Home . Illustration by SKL on Codepen . ",
    "url": "http://localhost:4000/404.html",
    "relUrl": "/404.html"
  },"5": {
    "doc": "Local install",
    "title": "Install local machine",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Drupal/Install.html#install-local-machine",
    "relUrl": "/php-ramework/Drupal/Install.html#install-local-machine"
  },"6": {
    "doc": "Local install",
    "title": "With DDEV",
    "content": "DDEV is a local development tool that requires Docker and make it easy to setup and run the local Drupal site. Assuming you are all setup with Docker and Composer on your machine, here’s how I set it up. Install DDEV on your machine . curl -L https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh | bash . Or with Homebrew: . brew tap drud/ddev &amp;&amp; brew install ddev . To check your ddev version: . ddev -v . ",
    "url": "http://localhost:4000/php-ramework/Drupal/Install.html#with-ddev",
    "relUrl": "/php-ramework/Drupal/Install.html#with-ddev"
  },"7": {
    "doc": "Local install",
    "title": "Setting up with Composer and Drush",
    "content": "# Create project directory e.g. /web-app mkdir web-app # Go to directiry cd web-app #Configure the project type and document root ddev config --project-type=drupal8 --docroot=web --create-docroot # Start container ddev start # Create project ddev composer create \"drupal/recommended-project:^8\" #Install Drush ddev composer require drush/drush # Install site ddev drush site:install -y # Get the local login URL ddev drush uli # Or launch the local site ddev launch . Other way to setup Use composer to setup your Drupal project. Say we name this web-app (replace with your own project name) . # Replace web-app! export SITE_NAME=web-app composer create-project drupal/recommended-project $SITE_NAME cd $SITE_NAME . And setup your project: . ddev config --docroot=web --project-name=$SITE_NAME --project-type=drupal8 . Start the container by running . ddev start . Install Drupal . And start intalling the site with your credentials: . ddev exec drush site-install --account-name=admin --account-pass=my-password . With this setup, you dont have to worry about creating database, database user etc it will be setup in Docker containers. ",
    "url": "http://localhost:4000/php-ramework/Drupal/Install.html#setting-up-with-composer-and-drush",
    "relUrl": "/php-ramework/Drupal/Install.html#setting-up-with-composer-and-drush"
  },"8": {
    "doc": "Local install",
    "title": "Local install",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Drupal/Install.html",
    "relUrl": "/php-ramework/Drupal/Install.html"
  },"9": {
    "doc": "Install Codeigniter4",
    "title": "Install",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Codeigniter/Install.html#install",
    "relUrl": "/php-ramework/Codeigniter/Install.html#install"
  },"10": {
    "doc": "Install Codeigniter4",
    "title": "Reqirements",
    "content": ". | PHP 7.3 or later | PHP extensions installed: intl and mbstring extension are installed | PHP extension enabled: php-json, php-mysqlnd, and php-xml` | libcurl installed for CURL requests A database is required for most web application programming. Currently supported databases are: . | MySQL (5.1+) via the MySQLi driver | PostgreSQL via the Postgre driver | SQLite3 via the SQLite3 driver | MSSQL via the SQLSRV driver (version 2005 and above only) | . | . Not all of the drivers have been converted/rewritten for CodeIgniter4. The list below shows the outstanding ones. | MySQL (5.1+) via the pdo driver | Oracle via the oci8 and pdo drivers | PostgreSQL via the pdo driver | MSSQL via the pdo driver | SQLite via the sqlite (version 2) and pdo drivers | CUBRID via the cubrid and pdo drivers | Interbase/Firebird via the ibase and pdo drivers | ODBC via the odbc and pdo drivers (you should know that ODBC is actually an abstraction layer) | . ",
    "url": "http://localhost:4000/php-ramework/Codeigniter/Install.html#reqirements",
    "relUrl": "/php-ramework/Codeigniter/Install.html#reqirements"
  },"11": {
    "doc": "Install Codeigniter4",
    "title": "Install with composer",
    "content": "Ensure that you have ‘composer’ installed on your machine . Setup Installation . For a new Codeigniter4 installation, you can clome the App starter that holds a skeleton application, with a composer dependency on the latest released version of the framework. git clone https://github.com/codeigniter4/appstarter . Or run composer create-project . In the folder you wish to work on, run this command where webapp on this example will be your root project: . composer create-project codeigniter4/appstarter webapp . If you dont want the phpunit or just wanting to install the framework, add --no-dev at the end: . composer create-project codeigniter4/appstarter webapp --no-dev . ",
    "url": "http://localhost:4000/php-ramework/Codeigniter/Install.html#install-with-composer",
    "relUrl": "/php-ramework/Codeigniter/Install.html#install-with-composer"
  },"12": {
    "doc": "Install Codeigniter4",
    "title": "Install Codeigniter4",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Codeigniter/Install.html",
    "relUrl": "/php-ramework/Codeigniter/Install.html"
  },"13": {
    "doc": "Git",
    "title": "Git",
    "content": "Git is a workflow management to track changes on files that are used by programmers for coordinating collaborative work with others and also used for version control. ",
    "url": "http://localhost:4000/Git/",
    "relUrl": "/Git/"
  },"14": {
    "doc": "JS Frameworks",
    "title": "Javascript Frameworks",
    "content": "Javascript Frameworks are some toolset that is used to help forming and managing a website or web applications. The Javascript Frameworks are different from Javascript Library where it is used on the smaller scale part of the website. So, Framework is for the whole website or web app and Library is for the smaller pieces of the site. Most popular Javascript frameworks: . | Node | Angular | Vue | Meteor | . ",
    "url": "http://localhost:4000/js-framework/#javascript-frameworks",
    "relUrl": "/js-framework/#javascript-frameworks"
  },"15": {
    "doc": "JS Frameworks",
    "title": "JS Frameworks",
    "content": " ",
    "url": "http://localhost:4000/js-framework/",
    "relUrl": "/js-framework/"
  },"16": {
    "doc": "Docker",
    "title": "Docker",
    "content": "Here’s documentation from Docker . ",
    "url": "http://localhost:4000/Docker/",
    "relUrl": "/Docker/"
  },"17": {
    "doc": "CSS Frameworks",
    "title": "CSS Frameworks",
    "content": " ",
    "url": "http://localhost:4000/css-frameworks/",
    "relUrl": "/css-frameworks/"
  },"18": {
    "doc": "LMS",
    "title": "Learning Management System",
    "content": " ",
    "url": "http://localhost:4000/LMS/#learning-management-system",
    "relUrl": "/LMS/#learning-management-system"
  },"19": {
    "doc": "LMS",
    "title": "LMS",
    "content": " ",
    "url": "http://localhost:4000/LMS/",
    "relUrl": "/LMS/"
  },"20": {
    "doc": "The Languages",
    "title": "The Languages",
    "content": "The core languages that we should at least understand to play the games. ",
    "url": "http://localhost:4000/the-languages/",
    "relUrl": "/the-languages/"
  },"21": {
    "doc": "freeCodeCamp challenges - React",
    "title": "freeCodeCamp challenges - JS Libraries - React",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/#freecodecamp-challenges---js-libraries---react",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/#freecodecamp-challenges---js-libraries---react"
  },"22": {
    "doc": "freeCodeCamp challenges - React",
    "title": "freeCodeCamp challenges - React",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/"
  },"23": {
    "doc": "PHP Frameworks",
    "title": "PHP Frameworks",
    "content": "PHP Frameworks are some collections of PHP libraries that we can use to build our webapp and develop further with our own style. ",
    "url": "http://localhost:4000/php-ramework/",
    "relUrl": "/php-ramework/"
  },"24": {
    "doc": "OSX CLI",
    "title": "Useful Mac OS command line",
    "content": "Useful Mac OS command line for developers . ",
    "url": "http://localhost:4000/osx-cli/#useful-mac-os-command-line",
    "relUrl": "/osx-cli/#useful-mac-os-command-line"
  },"25": {
    "doc": "OSX CLI",
    "title": "OSX CLI",
    "content": " ",
    "url": "http://localhost:4000/osx-cli/",
    "relUrl": "/osx-cli/"
  },"26": {
    "doc": "About",
    "title": "Web dev documentation",
    "content": "Websites are always in progress. This Dokumentasi is my personal collection of manuals on how to do stuff in web development. I have been making websites since 2004 since Adobe Fireworks was still popular, Goecities era and web layout was in tables. | This page is built based on what I know and been through with issues or steps I did during web development and documented them for my own reference and others may find these useful too | This Dokumentasi is assuming that you know the basic of web development: HTML, PHP, CSS, Javascript and SQL and using command line. Also only for Mac OSX for the moment. | You may find that some pages are not finished as I update this on my spare time between full-time job, having a baby and doing my freelance webdesign work at home | I also do some digital visual stuff such as photography, Adobe Illustrator, Premiere Pro and a bit of After Effects. Visit my landing page for my other profiles and portfolios or my blog, for some fun stuff | Spare time is a luxury at the moment but I love kayaking in Darwin’s epipelagic zone and Broome Roebuck Bay just floating around or playing my DJ controller mixing stuff up. | . Contact me on mailto:me@irawan.io or reach me out on my social/other profiles. | | . |     | . ",
    "url": "http://localhost:4000/#web-dev-documentation",
    "relUrl": "/#web-dev-documentation"
  },"27": {
    "doc": "About",
    "title": "About",
    "content": ". . . . . . . irawans.com irawan Devanagri: Javanese: Sanskrit: iravan . . ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"28": {
    "doc": "Tools",
    "title": "Tools",
    "content": "The core languages that we should at least understand to play the games. ",
    "url": "http://localhost:4000/tools/",
    "relUrl": "/tools/"
  },"29": {
    "doc": "Drupal",
    "title": "Drupal quick guide",
    "content": ". My first ever Drupal website was a wedding magazine I built for the NT News in Darwin in 2010. It was not easy building it but learned a lot from there. Drupal won the most dreaded web framework according to the Stackoverflow survey in 2019 and that tells us a lot about how complicated it is to use. But, it’s still being used by programmer who’s got a sense of adventure and like challanges. Although there is no such thing as a quick guide for webdev framework manual, I make this documentation a quick reference for myself just to remind me of the steps I took. Here are some steps if you want to build Drupal in your local machine. Although there are some other ways to build it, here’s the steps I took. ",
    "url": "http://localhost:4000/php-ramework/Drupal/#drupal-quick-guide",
    "relUrl": "/php-ramework/Drupal/#drupal-quick-guide"
  },"30": {
    "doc": "Drupal",
    "title": "Drupal",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Drupal/",
    "relUrl": "/php-ramework/Drupal/"
  },"31": {
    "doc": "Codeigniter4",
    "title": "Codeigniter4",
    "content": "Codeigniter4 is a PHP based application development framework to build websites. It has uses so many libraries for commonly needed task as well as simple interface and logical structure to access these libraries. ",
    "url": "http://localhost:4000/php-ramework/Codeigniter/",
    "relUrl": "/php-ramework/Codeigniter/"
  },"32": {
    "doc": "Composer",
    "title": "Composer",
    "content": ". Composer is a dependency manager for PHP, it lets you declare the libraries your project depend on and will manage them either installing or updating them. It’s not a package manager like yum or apt but it’s more like Node’s npm or Ruby’s bundler . Go to this page to download and install the latest version. ",
    "url": "http://localhost:4000/Composer/",
    "relUrl": "/Composer/"
  },"33": {
    "doc": "Liquid",
    "title": "Liquid",
    "content": "It’s a templating language that originally created by Shopify and easy to learn. This is used in Jekyll templating system . ",
    "url": "http://localhost:4000/Liquid/",
    "relUrl": "/Liquid/"
  },"34": {
    "doc": "DDEV",
    "title": "DDEV",
    "content": "DDEV is a container based local and live development. It’s making PHP development in Docker simple. We can use DDEV to install Drupal, Wordpress and Typo3. ",
    "url": "http://localhost:4000/DDEV/",
    "relUrl": "/DDEV/"
  },"35": {
    "doc": "DDEV",
    "title": "Install (MacOX/Linux)",
    "content": "Use Homebrew to install or upgrade the DDEV . brew tap drud/ddev &amp;&amp; brew install ddev . To upgrade: . ddev poweroff &amp;&amp; brew upgrade ddev . For more detail about installation on other OS visit the Doc site . ",
    "url": "http://localhost:4000/DDEV/#install-macoxlinux",
    "relUrl": "/DDEV/#install-macoxlinux"
  },"36": {
    "doc": "The basics",
    "title": "Core knowledge",
    "content": "These are some core knowledges that we should or will make your life easier when understanding these stuff before diving in to the sea. ",
    "url": "http://localhost:4000/the-basics/#core-knowledge",
    "relUrl": "/the-basics/#core-knowledge"
  },"37": {
    "doc": "The basics",
    "title": "The basics",
    "content": " ",
    "url": "http://localhost:4000/the-basics/",
    "relUrl": "/the-basics/"
  },"38": {
    "doc": "API",
    "title": "Application Programming Interface (API)",
    "content": "It’s a kind of generic connectivity interface that define the interaction between multiple software or applications. The API contains a set of functions and procedures allowing the creation of applications that access the features or data of an operating system, application, or other service. ",
    "url": "http://localhost:4000/API/#application-programming-interface-api",
    "relUrl": "/API/#application-programming-interface-api"
  },"39": {
    "doc": "API",
    "title": "API",
    "content": " ",
    "url": "http://localhost:4000/API/",
    "relUrl": "/API/"
  },"40": {
    "doc": "Liquid template",
    "title": "Liquid template language",
    "content": "It’s a template language that Jekyll use which originally was created by Shopify. ",
    "url": "http://localhost:4000/liquid-template/#liquid-template-language",
    "relUrl": "/liquid-template/#liquid-template-language"
  },"41": {
    "doc": "Liquid template",
    "title": "Liquid template",
    "content": " ",
    "url": "http://localhost:4000/liquid-template/",
    "relUrl": "/liquid-template/"
  },"42": {
    "doc": "Static",
    "title": "Static",
    "content": " ",
    "url": "http://localhost:4000/Static/",
    "relUrl": "/Static/"
  },"43": {
    "doc": "Docusaurus",
    "title": "Docusaurus",
    "content": "It’s a documentation based static site builder based on Markdown and React. Visit the site . ",
    "url": "http://localhost:4000/Static/Docusaurus/",
    "relUrl": "/Static/Docusaurus/"
  },"44": {
    "doc": "Gatsby",
    "title": "Gatsby",
    "content": "It’s a static front end web and app framework based on React. ",
    "url": "http://localhost:4000/Static/Gatsby/",
    "relUrl": "/Static/Gatsby/"
  },"45": {
    "doc": "Hugo",
    "title": "Hugo",
    "content": "Hugo documentation . ",
    "url": "http://localhost:4000/Static/Hugo/",
    "relUrl": "/Static/Hugo/"
  },"46": {
    "doc": "CMS",
    "title": "Web Content Management System",
    "content": "CMS is a website platform where people without any web development skills can login to the administration backend and manage the contents of the website. The content can be creating pages, editing text imagery and video contents even rearranging the components of the content. This manual is more to the back end web developer manual such as installing on the local development, extending, theming and using the WP CLI. ",
    "url": "http://localhost:4000/CMS/#web-content-management-system",
    "relUrl": "/CMS/#web-content-management-system"
  },"47": {
    "doc": "CMS",
    "title": "CMS",
    "content": " ",
    "url": "http://localhost:4000/CMS/",
    "relUrl": "/CMS/"
  },"48": {
    "doc": "Joomla!",
    "title": "Joomla",
    "content": "I used Joomla quite a bit since 2010 for my client’s website as it was the first CMS I get in to but using it less and less. Still have some clients that are using it and apparently it’s still in the 3 most popular CMS in 2020! . Visit their website to learn the platform. ",
    "url": "http://localhost:4000/CMS/Joomla/#joomla",
    "relUrl": "/CMS/Joomla/#joomla"
  },"49": {
    "doc": "Joomla!",
    "title": "Joomla!",
    "content": " ",
    "url": "http://localhost:4000/CMS/Joomla/",
    "relUrl": "/CMS/Joomla/"
  },"50": {
    "doc": "Netlify CMS",
    "title": "Netlify CMS",
    "content": "Netlify CMS is not the netlify.app but the Content Management System for website built Git workflows. It’s core is React and wrapping around the Git workflow through Github, Gitlab and Bitbucket API. Netlify CMS is not all about using command line and code editor to post and edit contents but it also has the non-developer editor friendly back end login. ",
    "url": "http://localhost:4000/CMS/netlify-cms/",
    "relUrl": "/CMS/netlify-cms/"
  },"51": {
    "doc": "Wordpress",
    "title": "Wordpress",
    "content": "Wordpress is the most popular blogging based content management system that offers editors-friendly backend interface. There is Wordpress.com where it’s hosted with them or the self hosted one where we can download and install it on our environment Wordpress.org . ",
    "url": "http://localhost:4000/CMS/Wordpress/",
    "relUrl": "/CMS/Wordpress/"
  },"52": {
    "doc": "Install Wordpress",
    "title": "Install locally with DDEV (Mac OS)",
    "content": "For this, you will only need . | Docker | Terminal or some sort | Code editor | Git if you wish to make the workflow | . Install DDEV with brew if you haven’t already . brew tap drud/ddev &amp;&amp; brew install ddev . ",
    "url": "http://localhost:4000/CMS/Wordpress/Install/#install-locally-with-ddev-mac-os",
    "relUrl": "/CMS/Wordpress/Install/#install-locally-with-ddev-mac-os"
  },"53": {
    "doc": "Install Wordpress",
    "title": "Setup project",
    "content": "Start the Docker engine and ensure it’s not being used anywhere else . # Create a working folder e.g my-wp-site mkdir my-wp-site # Go to new directory cd my-wp-site # Configuring the site ddev config --project-type=wordpress --docroot=web --create-docroot #Ensure all Docker containers are not running docker stop $(docker ps -a -q) # Start the engine site ddev start # And launch the rocket ddev launch . This should take you to the Wordpress standard install and ask you to choose language and admin user with password. Once you finished this, you dont have to add database details. If you wish to access the MySQL phpMyAdmin you can go via port 8037: . https://wp.ddev.site:8037/db_structure.php?server=1&amp;db=db . Here’s the successfull initiation look like. The last lines are where your local WP install is. Have fun! . Starting wp... v1.16.6: Pulling from drud/ddev-webserver aa935f1478c2: Pull complete Digest: sha256:427431af678eb6aa6d144da28b190e065a9b8b467fa7d5814a4300c46421ad15 Status: Downloaded newer image for drud/ddev-webserver:v1.16.6 docker.io/drud/ddev-webserver:v1.16.6 v1.16.2: Pulling from drud/ddev-router 852ed50cd189d: Already exists a9d8d1f536096: Pull complete f0edd0b709232: Pull complete 5b8fd22c6d2f4: Pull complete 32bfdd22d29be: Pull complete 0d0bd503f4f5d: Pull complete e079dbeac713f: Pull complete ecf9bdabaabbd: Pull complete e3187d2daac11: Pull complete 1cc8dd85bdd61: Pull complete 9cacd0d80ec99: Pull complete ae5915deed897: Pull complete 3a6288de65659: Pull complete 0d0033d9a5544: Pull complete f327efdbdb21c: Pull complete 2efc7ad66c1e3: Pull complete Digest: sha256:c743ef28342cd109d1611a25b31eb1c3306914fdbefcd1c4db84fda4ac8a6ce4 Status: Downloaded newer image for drud/ddev-router:v1.16.2 docker.io/drud/ddev-router:v1.16.2 v1.16.0: Pulling from drud/ddev-dbserver-mariadb-10.2 171857dc49d0f: Pull complete 419640d447d26: Pull complete 61e52fd862619: Pull complete 92802d0f0412e: Pull complete f9b22cd867bcc: Pull complete 1b5f9ce2cc9e3: Pull complete c978fccde1334: Pull complete fd4d9ec93f2fb: Pull complete 92d8eec36e7ef: Pull complete 5bb4a3cb88960: Pull complete a8c820c3bfbec: Pull complete aa577dc2ceeeb: Pull complete d82880dcc0eb7: Pull complete db9aeccaf009d: Pull complete f03de1c5eaca5: Pull complete 9fb8bec7ac41b: Pull complete efa19fcd83e0e: Pull complete c2be88c5f155a: Pull complete 8f0a7dc77fd38: Pull complete da0d3c6f85d5d: Pull complete 28307ccb0745f: Pull complete a0c38cab11057: Pull complete 4bdace4666bab: Pull complete 8f46cafc5f64b: Pull complete Digest: sha256:1f9108cee6c9733ec4c874798dab844dd8c68d2b497e6dac49002b1de5e07aa4b743 Status: Downloaded newer image for drud/ddev-dbserver-mariadb-10.2:v1.16.0 docker.io/drud/ddev-dbserver-mariadb-10.2:v1.16.0 Building ddev-ssh-agent Recreating ddev-ssh-agent ... done ssh-agent container is running: If you want to add authentication to the ssh-agent container, run 'ddev auth ssh' to enable your keys. Creating volume \"wp-mariadb\" with default driver Building db Building web Creating ddev-wp-db ... done Creating ddev-wp-dba ... done Creating ddev-wp-web ... done Recreating ddev-router ... done Successfully started wp Project can be reached at https://wp.ddev.site https://127.0.0.1:55005 . ",
    "url": "http://localhost:4000/CMS/Wordpress/Install/#setup-project",
    "relUrl": "/CMS/Wordpress/Install/#setup-project"
  },"54": {
    "doc": "Install Wordpress",
    "title": "Install Wordpress",
    "content": " ",
    "url": "http://localhost:4000/CMS/Wordpress/Install/",
    "relUrl": "/CMS/Wordpress/Install/"
  },"55": {
    "doc": "JS Libraries",
    "title": "Javascript Libraries",
    "content": "Javascript Libraries are some pre-written Javascript snippets that are used for some specific functions. Different from Javascript Framework where it’s used for the entire website or web app platform. So Framework is for the whole website or web app and Library is for the smaller pieces of the site. Example of JS Libraries: . | jQuery | React | React Native | Anime JS | Particle JS | . ",
    "url": "http://localhost:4000/js-libraries/#javascript-libraries",
    "relUrl": "/js-libraries/#javascript-libraries"
  },"56": {
    "doc": "JS Libraries",
    "title": "JS Libraries",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/",
    "relUrl": "/js-libraries/"
  },"57": {
    "doc": "React JS",
    "title": "React js",
    "content": "Javascript Libraries are some pre-written Javascript snippets that are used for some specific functions. Different from Javascript Framework where it’s used for the entire website or web app platform. So Framework is for the whole website or web app and Library is for the smaller pieces of the site. Example of JS Libraries: . | jQuery | React | React Native | Anime JS | Particle JS | . ",
    "url": "http://localhost:4000/js-libraries/reaksi/#react-js",
    "relUrl": "/js-libraries/reaksi/#react-js"
  },"58": {
    "doc": "React JS",
    "title": "React JS",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/",
    "relUrl": "/js-libraries/reaksi/"
  },"59": {
    "doc": "Laravel",
    "title": "Laravel",
    "content": "Web application framework with expressive, elegant syntax. +Better to understand the following before starting: . | At least basic of HTML &amp; CSS | Javascript and JQuery | PHP and MySQL programming | Bootstrap framework | Concept of object oriented programming with PHP | . ",
    "url": "http://localhost:4000/php-ramework/Laravel/",
    "relUrl": "/php-ramework/Laravel/"
  },"60": {
    "doc": "Markdown",
    "title": "Markdown",
    "content": "Markdown is actually a markup but lightweight and is used for many platform such as blogging, instant messaging, collaborative software like Jira, Redmine and other agile software development platforms and also readme.md file. Here’s a MD list that I use frequently . ",
    "url": "http://localhost:4000/Markdown/",
    "relUrl": "/Markdown/"
  },"61": {
    "doc": "Symfony",
    "title": "Symfony",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/symfony/",
    "relUrl": "/php-ramework/symfony/"
  },"62": {
    "doc": "Access props using `this.props`",
    "title": "Access props using this.props",
    "content": "The last several challenges covered the basic ways to pass props to child components. But what if the child component that you’re passing a prop to is an ES6 class component, rather than a stateless functional component? The ES6 class component uses a slightly different convention to access props. Anytime you refer to a class component within itself, you use the this keyword. To access props within a class component, you preface the code that you use to access it with this. For example, if an ES6 class component has a prop called data, you write {this.props.data} in JSX. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#access-props-using-thisprops",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#access-props-using-thisprops"
  },"63": {
    "doc": "Access props using `this.props`",
    "title": "–instructions–",
    "content": "Render an instance of the Welcome component in the parent component App. Here, give Welcome a prop of name and assign it a value of a string. Within the child, Welcome, access the name prop within the strong tags. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#instructions"
  },"64": {
    "doc": "Access props using `this.props`",
    "title": "–hints–",
    "content": "The App component should return a single div element. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(App)); return mockedComponent.children().type() === 'div'; })() ); . The child of App should be the Welcome component. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(App)); return ( mockedComponent.children().childAt(0).name() === 'Welcome' ); })() ); . The Welcome component should have a prop called name. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(App)); return mockedComponent.find('Welcome').props().name; })() ); . The Welcome component should display the string you pass as the name prop within strong tags. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(App)); return ( mockedComponent.find('strong').text() === mockedComponent.find('Welcome').props().name ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#hints"
  },"65": {
    "doc": "Access props using `this.props`",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#seed"
  },"66": {
    "doc": "Access props using `this.props`",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;App /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#after-user-code"
  },"67": {
    "doc": "Access props using `this.props`",
    "title": "–seed-contents–",
    "content": "class App extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; { /* Change code below this line */ } &lt;Welcome /&gt; { /* Change code above this line */ } &lt;/div&gt; ); } }; class Welcome extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; { /* Change code below this line */ } &lt;p&gt;Hello, &lt;strong&gt;&lt;/strong&gt;!&lt;/p&gt; { /* Change code above this line */ } &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#seed-contents"
  },"68": {
    "doc": "Access props using `this.props`",
    "title": "–solutions–",
    "content": "class Welcome extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; { /* Change code below this line */ } &lt;p&gt;Hello, &lt;strong&gt;{this.props.name}&lt;/strong&gt;!&lt;/p&gt; { /* Change code above this line */ } &lt;/div&gt; ); } }; class App extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; { /* Change code below this line */ } &lt;Welcome name=\"Quincy\"/&gt; { /* Change code above this line */ } &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html#solutions"
  },"69": {
    "doc": "Access props using `this.props`",
    "title": "Access props using `this.props`",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/access-props-using-this.props.html"
  },"70": {
    "doc": "Add comments in JSX",
    "title": "–description–",
    "content": "JSX is a syntax that gets compiled into valid JavaScript. Sometimes, for readability, you might need to add comments to your code. Like most programming languages, JSX has its own way to do this. To put comments inside JSX, you use the syntax {/* */} to wrap around the comment text. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#description"
  },"71": {
    "doc": "Add comments in JSX",
    "title": "–instructions–",
    "content": "The code editor has a JSX element similar to what you created in the last challenge. Add a comment somewhere within the provided div element, without modifying the existing h1 or p elements. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#instructions"
  },"72": {
    "doc": "Add comments in JSX",
    "title": "–hints–",
    "content": "The constant JSX should return a div element. assert(JSX.type === 'div'); . The div should contain an h1 tag as the first element. assert(JSX.props.children[0].type === 'h1'); . The div should contain a p tag as the second element. assert(JSX.props.children[1].type === 'p'); . The existing h1 and p elements should not be modified. assert( JSX.props.children[0].props.children === 'This is a block of JSX' &amp;&amp; JSX.props.children[1].props.children === \"Here's a subtitle\" ); . The JSX should use valid comment syntax. assert(/&lt;div&gt;[\\s\\S]*{\\s*\\/\\*[\\s\\S]*\\*\\/\\s*}[\\s\\S]*&lt;\\/div&gt;/.test(code)); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#hints"
  },"73": {
    "doc": "Add comments in JSX",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#seed"
  },"74": {
    "doc": "Add comments in JSX",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(JSX, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#after-user-code"
  },"75": {
    "doc": "Add comments in JSX",
    "title": "–seed-contents–",
    "content": "const JSX = ( &lt;div&gt; &lt;h1&gt;This is a block of JSX&lt;/h1&gt; &lt;p&gt;Here's a subtitle&lt;/p&gt; &lt;/div&gt; ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#seed-contents"
  },"76": {
    "doc": "Add comments in JSX",
    "title": "–solutions–",
    "content": "const JSX = ( &lt;div&gt; &lt;h1&gt;This is a block of JSX&lt;/h1&gt; { /* this is a JSX comment */ } &lt;p&gt;Here's a subtitle&lt;/p&gt; &lt;/div&gt;); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html#solutions"
  },"77": {
    "doc": "Add comments in JSX",
    "title": "Add comments in JSX",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-comments-in-jsx.html"
  },"78": {
    "doc": "Add even listeners",
    "title": "Add even listeners",
    "content": "The componentDidMount() method is also the best place to attach any event listeners you need to add for specific functionality. React provides a synthetic event system which wraps the native event system present in browsers. This means that the synthetic event system behaves exactly the same regardless of the user’s browser - even if the native events may behave differently between different browsers. You’ve already been using some of these synthetic event handlers such as onClick(). React’s synthetic event system is great to use for most interactions you’ll manage on DOM elements. However, if you want to attach an event handler to the document or window objects, you have to do this directly. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html"
  },"79": {
    "doc": "Add even listeners",
    "title": "–instructions–",
    "content": "Attach an event listener in the componentDidMount() method for keydown events and have these events trigger the callback handleKeyPress(). You can use document.addEventListener() which takes the event (in quotes) as the first argument and the callback as the second argument. Then, in componentWillUnmount(), remove this same event listener. You can pass the same arguments to document.removeEventListener(). It’s good practice to use this lifecycle method to do any clean up on React components before they are unmounted and destroyed. Removing event listeners is an example of one such clean up action. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html#instructions"
  },"80": {
    "doc": "Add even listeners",
    "title": "–hints–",
    "content": "MyComponent should render a div element which wraps an h1 tag. assert( (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('div').children().find('h1').length === 1; })() ); . A keydown listener should be attached to the document in componentDidMount. assert( (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const didMountString = mockedComponent .instance() .componentDidMount.toString(); return new RegExp( 'document.addEventListener(.|\\n|\\r)+keydown(.|\\n|\\r)+this.handleKeyPress' ).test(didMountString); })() ); . The keydown listener should be removed from the document in componentWillUnmount. assert( (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const willUnmountString = mockedComponent .instance() .componentWillUnmount.toString(); return new RegExp( 'document.removeEventListener(.|\\n|\\r)+keydown(.|\\n|\\r)+this.handleKeyPress' ).test(willUnmountString); })() ); . Once the component has mounted, pressing enter should update its state and the rendered h1 tag. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const beforeState = mockedComponent.state('message'); const beforeText = mockedComponent.find('h1').text(); const pressEnterKey = () =&gt; { mockedComponent.instance().handleKeyPress({ keyCode: 13 }); return waitForIt(() =&gt; { mockedComponent.update(); return { state: mockedComponent.state('message'), text: mockedComponent.find('h1').text() }; }); }; const afterKeyPress = await pressEnterKey(); assert( beforeState !== afterKeyPress.state &amp;&amp; beforeText !== afterKeyPress.text ); }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html#hints"
  },"81": {
    "doc": "Add even listeners",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html#seed"
  },"82": {
    "doc": "Add even listeners",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html#after-user-code"
  },"83": {
    "doc": "Add even listeners",
    "title": "–seed-contents–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { message: '' }; this.handleEnter = this.handleEnter.bind(this); this.handleKeyPress = this.handleKeyPress.bind(this); } // Change code below this line componentDidMount() { } componentWillUnmount() { } // Change code above this line handleEnter() { this.setState((state) =&gt; ({ message: state.message + 'You pressed the enter key! ' })); } handleKeyPress(event) { if (event.keyCode === 13) { this.handleEnter(); } } render() { return ( &lt;div&gt; &lt;h1&gt;{this.state.message}&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html#seed-contents"
  },"84": {
    "doc": "Add even listeners",
    "title": "–solutions–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { message: '' }; this.handleKeyPress = this.handleKeyPress.bind(this); this.handleEnter = this.handleEnter.bind(this); } componentDidMount() { // Change code below this line document.addEventListener('keydown', this.handleKeyPress); // Change code above this line } componentWillUnmount() { // Change code below this line document.removeEventListener('keydown', this.handleKeyPress); // Change code above this line } handleEnter() { this.setState((state) =&gt; ({ message: state.message + 'You pressed the enter key! ' })); } handleKeyPress(event) { if (event.keyCode === 13) { this.handleEnter(); } } render() { return ( &lt;div&gt; &lt;h1&gt;{this.state.message}&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-event-listeners.html#solutions"
  },"85": {
    "doc": "Add inline styles in React",
    "title": "Add inline styles in React",
    "content": "You may have noticed in the last challenge that there were several other syntax differences from HTML inline styles in addition to the style attribute set to a JavaScript object. First, the names of certain CSS style properties use camel case. For example, the last challenge set the size of the font with fontSize instead of font-size. Hyphenated words like font-size are invalid syntax for JavaScript object properties, so React uses camel case. As a rule, any hyphenated style properties are written using camel case in JSX. All property value length units (like height, width, and fontSize) are assumed to be in px unless otherwise specified. If you want to use em, for example, you wrap the value and the units in quotes, like {fontSize: \"4em\"}. Other than the length values that default to px, all other property values should be wrapped in quotes. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html"
  },"86": {
    "doc": "Add inline styles in React",
    "title": "–instructions–",
    "content": "If you have a large set of styles, you can assign a style object to a constant to keep your code organized. Declare your styles constant as a global variable at the top of the file. Initialize styles constant and assign an object with three style properties and their values to it. Give the div a color of purple, a font-size of 40, and a border of 2px solid purple. Then set the style attribute equal to the styles constant. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html#instructions"
  },"87": {
    "doc": "Add inline styles in React",
    "title": "–hints–",
    "content": "The styles variable should be an object with three properties. assert(Object.keys(styles).length === 3); . The styles variable should have a color property set to a value of purple. assert(styles.color === 'purple'); . The styles variable should have a fontSize property set to a value of 40. assert(styles.fontSize == 40); . The styles variable should have a border property set to a value of 2px solid purple. assert(styles.border === '2px solid purple'); . The component should render a div element. assert( (function () { const mockedComponent = Enzyme.shallow(React.createElement(Colorful)); return mockedComponent.type() === 'div'; })() ); . The div element should have its styles defined by the styles object. assert( (function () { const mockedComponent = Enzyme.shallow(React.createElement(Colorful)); return ( mockedComponent.props().style.color === 'purple' &amp;&amp; mockedComponent.props().style.fontSize == 40 &amp;&amp; mockedComponent.props().style.border === '2px solid purple' ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html#hints"
  },"88": {
    "doc": "Add inline styles in React",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html#seed"
  },"89": {
    "doc": "Add inline styles in React",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;Colorful /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html#after-user-code"
  },"90": {
    "doc": "Add inline styles in React",
    "title": "–seed-contents–",
    "content": "// Change code above this line class Colorful extends React.Component { render() { // Change code below this line return ( &lt;div style=&gt;Style Me!&lt;/div&gt; ); // Change code above this line } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html#seed-contents"
  },"91": {
    "doc": "Add inline styles in React",
    "title": "–solutions–",
    "content": "const styles = { color: \"purple\", fontSize: 40, border: \"2px solid purple\" }; // Change code above this line class Colorful extends React.Component { render() { // Change code below this line return ( &lt;div style={styles}&gt;Style Me!&lt;/div&gt; ); // Change code above this line } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/add-inline-styles-in-react.html#solutions"
  },"92": {
    "doc": "Bind `this` to a class method",
    "title": "Bind this to a class method",
    "content": "In addition to setting and updating state, you can also define methods for your component class. A class method typically needs to use the this keyword so it can access properties on the class (such as state and props) inside the scope of the method. There are a few ways to allow your class methods to access this. One common way is to explicitly bind this in the constructor so this becomes bound to the class methods when the component is initialized. You may have noticed the last challenge used this.handleClick = this.handleClick.bind(this) for its handleClick method in the constructor. Then, when you call a function like this.setState() within your class method, this refers to the class and will not be undefined. Note: The this keyword is one of the most confusing aspects of JavaScript but it plays an important role in React. Although its behavior here is totally normal, these lessons aren’t the place for an in-depth review of this so please refer to other lessons if the above is confusing! . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#bind-this-to-a-class-method",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#bind-this-to-a-class-method"
  },"93": {
    "doc": "Bind `this` to a class method",
    "title": "–instructions–",
    "content": "The code editor has a component with a state that keeps track of the text. It also has a method which allows you to set the text to You clicked!. However, the method doesn’t work because it’s using the this keyword that is undefined. Fix it by explicitly binding this to the handleClick() method in the component’s constructor. Next, add a click handler to the button element in the render method. It should trigger the handleClick() method when the button receives a click event. Remember that the method you pass to the onClick handler needs curly braces because it should be interpreted directly as JavaScript. Once you complete the above steps you should be able to click the button and see You clicked!. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#instructions"
  },"94": {
    "doc": "Bind `this` to a class method",
    "title": "–hints–",
    "content": "MyComponent should return a div element which wraps two elements, a button and an h1 element, in that order. assert( Enzyme.mount(React.createElement(MyComponent)).find('div').length === 1 &amp;&amp; Enzyme.mount(React.createElement(MyComponent)) .find('div') .childAt(0) .type() === 'button' &amp;&amp; Enzyme.mount(React.createElement(MyComponent)) .find('div') .childAt(1) .type() === 'h1' ); . The state of MyComponent should initialize with the key value pair { text: \"Hello\" }. assert( Enzyme.mount(React.createElement(MyComponent)).state('text') === 'Hello' ); . Clicking the button element should run the handleClick method and set the state text to You clicked!. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () =&gt; { mockedComponent.setState({ text: 'Hello' }); return waitForIt(() =&gt; mockedComponent.state('text')); }; const second = () =&gt; { mockedComponent.find('button').simulate('click'); return waitForIt(() =&gt; mockedComponent.state('text')); }; const firstValue = await first(); const secondValue = await second(); assert(firstValue === 'Hello' &amp;&amp; secondValue === 'You clicked!'); }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#hints"
  },"95": {
    "doc": "Bind `this` to a class method",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#seed"
  },"96": {
    "doc": "Bind `this` to a class method",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#after-user-code"
  },"97": {
    "doc": "Bind `this` to a class method",
    "title": "–seed-contents–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { text: \"Hello\" }; // Change code below this line // Change code above this line } handleClick() { this.setState({ text: \"You clicked!\" }); } render() { return ( &lt;div&gt; { /* Change code below this line */ } &lt;button&gt;Click Me&lt;/button&gt; { /* Change code above this line */ } &lt;h1&gt;{this.state.text}&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#seed-contents"
  },"98": {
    "doc": "Bind `this` to a class method",
    "title": "–solutions–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { text: \"Hello\" }; this.handleClick = this.handleClick.bind(this); } handleClick() { this.setState({ text: \"You clicked!\" }); } render() { return ( &lt;div&gt; &lt;button onClick = {this.handleClick}&gt;Click Me&lt;/button&gt; &lt;h1&gt;{this.state.text}&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html#solutions"
  },"99": {
    "doc": "Bind `this` to a class method",
    "title": "Bind `this` to a class method",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/bind-this-to-a-class-method.html"
  },"100": {
    "doc": "Block quotes",
    "title": "Blockquotes",
    "content": "Important: . | Space is needed after the marker &gt;; | You could just add only one &gt; at the first line; | Blockquotes can be nested | Blockquotes can contain multiple paragraphs. Add a &gt; between the paragraphs. | Blockquotes can contain other Markdown formatted elements. But not all elements can be used. | . Makdown . &gt; Nasi goreng is delicious... &gt;&gt; ...if you like Asian food... &gt; &gt; &gt; ...good with spicy chilli sauce and cold beer. Rendered output . Nasi goreng is delicious… . …if you like Asian food… . …good with spicy chilli sauce and cold beer. Makdown . &gt; Nasi goreng is delicious &gt; &gt; if you like Asian food, good with sipcy chilli sauce and cold beer. Rendered output . Nasi goreng is delicious . if you like Asian food, good with sipcy chilli sauce and cold beer. Makdown . &gt; #### The quarterly results look great! &gt; &gt; - Revenue was off the chart. &gt; - Profits were higher than ever. &gt; &gt; *Everything* is going according to **plan**. Rendered output . The quarterly results look great! . | Revenue was off the chart. | Profits were higher than ever. | . Everything is going according to plan. ",
    "url": "http://localhost:4000/Markdown/block-quote.html#blockquotes",
    "relUrl": "/Markdown/block-quote.html#blockquotes"
  },"101": {
    "doc": "Block quotes",
    "title": "Block quotes",
    "content": " ",
    "url": "http://localhost:4000/Markdown/block-quote.html",
    "relUrl": "/Markdown/block-quote.html"
  },"102": {
    "doc": "Bootstrap",
    "title": "Bootstrap",
    "content": " ",
    "url": "http://localhost:4000/css-frameworks/bootstrap.html",
    "relUrl": "/css-frameworks/bootstrap.html"
  },"103": {
    "doc": "Building contents",
    "title": "Building contents",
    "content": ". | Building contents . | Create page | Create posts | . | . ",
    "url": "http://localhost:4000/Static/jekyll/building-contents.html",
    "relUrl": "/Static/jekyll/building-contents.html"
  },"104": {
    "doc": "Building contents",
    "title": "Create page",
    "content": "We can add post manually by adding new .MD file with the name of the post but there’s a quick way using jekyll-compose plugin. Install jekyll-compose plugin . Add the following line inside the Gemfile . gem 'jekyll-compose', group:[:jekyll_plugins] . Then in terminal run bundle and this will install this plugin. Then add a post: . bundle exec jekyll page \"The title of your page\" . this will create the-title-of-your-page.md file, then you can edit it and adjust the Front matter part. ",
    "url": "http://localhost:4000/Static/jekyll/building-contents.html#create-page",
    "relUrl": "/Static/jekyll/building-contents.html#create-page"
  },"105": {
    "doc": "Building contents",
    "title": "Create posts",
    "content": "We can also create post for blogging if your template has the post layout: . bundle exec jekyll post \"Woohoo post\" . This will create the 2020-02-20-woohoo-post.md and to check the page, run the serve and URL structure will be /2020/02/20/woohoo-post.html. You can define the URL structure with categories on the front matter and matched with the layout file. ",
    "url": "http://localhost:4000/Static/jekyll/building-contents.html#create-posts",
    "relUrl": "/Static/jekyll/building-contents.html#create-posts"
  },"106": {
    "doc": "Building the site",
    "title": "Running in local machine",
    "content": "If you happen to work on a new computer and just git clone the Gatsby repository from Github, i wont be straight away worked. You might have to do the following: . Update NPM . ERROR ╭───────────────────────────────────────╮ │ │ │ Update available 2.19.1 → 2.19.2 │ │ Run npm i -g gatsby-cli to update │ │ │ ╰───────────────────────────────────────╯ . And run npm install there might be some issues during this update with vulnerabilities in the packates, so we need to run npm audit fix. After this, you should be good running gatsby develop . ",
    "url": "http://localhost:4000/Static/Gatsby/building-site.html#running-in-local-machine",
    "relUrl": "/Static/Gatsby/building-site.html#running-in-local-machine"
  },"107": {
    "doc": "Building the site",
    "title": "Building the site",
    "content": " ",
    "url": "http://localhost:4000/Static/Gatsby/building-site.html",
    "relUrl": "/Static/Gatsby/building-site.html"
  },"108": {
    "doc": "Bulma",
    "title": "Bulma",
    "content": " ",
    "url": "http://localhost:4000/css-frameworks/bulma.html",
    "relUrl": "/css-frameworks/bulma.html"
  },"109": {
    "doc": "Change inline CSS conditionally based on component state",
    "title": "Change inline CSS conditionally based on component state",
    "content": "At this point, you’ve seen several applications of conditional rendering and the use of inline styles. Here’s one more example that combines both of these topics. You can also render CSS conditionally based on the state of a React component. To do this, you check for a condition, and if that condition is met, you modify the styles object that’s assigned to the JSX elements in the render method. This paradigm is important to understand because it is a dramatic shift from the more traditional approach of applying styles by modifying DOM elements directly (which is very common with jQuery, for example). In that approach, you must keep track of when elements change and also handle the actual manipulation directly. It can become difficult to keep track of changes, potentially making your UI unpredictable. When you set a style object based on a condition, you describe how the UI should look as a function of the application’s state. There is a clear flow of information that only moves in one direction. This is the preferred method when writing applications with React. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html"
  },"110": {
    "doc": "Change inline CSS conditionally based on component state",
    "title": "–instructions–",
    "content": "The code editor has a simple controlled input component with a styled border. You want to style this border red if the user types more than 15 characters of text in the input box. Add a condition to check for this and, if the condition is valid, set the input border style to 3px solid red. You can try it out by entering text in the input. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html#instructions"
  },"111": {
    "doc": "Change inline CSS conditionally based on component state",
    "title": "–hints–",
    "content": "The GateKeeper component should render a div element. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(GateKeeper)); return mockedComponent.find('div').length === 1; })() ); . The GateKeeper component should be initialized with a state key input set to an empty string. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(GateKeeper)); return mockedComponent.state().input === ''; })() ); . The GateKeeper component should render an h3 tag and an input tag. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(GateKeeper)); return ( mockedComponent.find('h3').length === 1 &amp;&amp; mockedComponent.find('input').length === 1 ); })() ); . The input tag should initially have a style of 1px solid black for the border property. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(GateKeeper)); return ( mockedComponent.find('input').props().style.border === '1px solid black' ); })() ); . The input tag should be styled with a border of 3px solid red if the input value in state is longer than 15 characters. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 100)); const mockedComponent = Enzyme.mount(React.createElement(GateKeeper)); const simulateChange = (el, value) =&gt; el.simulate('change', { target: { value } }); let initialStyle = mockedComponent.find('input').props().style.border; const state_1 = () =&gt; { mockedComponent.setState({ input: 'this is 15 char' }); return waitForIt(() =&gt; mockedComponent.find('input').props().style.border); }; const state_2 = () =&gt; { mockedComponent.setState({ input: 'A very long string longer than 15 characters.' }); return waitForIt(() =&gt; mockedComponent.find('input').props().style.border); }; const style_1 = await state_1(); const style_2 = await state_2(); assert( initialStyle === '1px solid black' &amp;&amp; style_1 === '1px solid black' &amp;&amp; style_2 === '3px solid red' ); }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html#hints"
  },"112": {
    "doc": "Change inline CSS conditionally based on component state",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html#seed"
  },"113": {
    "doc": "Change inline CSS conditionally based on component state",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;GateKeeper /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html#after-user-code"
  },"114": {
    "doc": "Change inline CSS conditionally based on component state",
    "title": "–seed-contents–",
    "content": "class GateKeeper extends React.Component { constructor(props) { super(props); this.state = { input: '' }; this.handleChange = this.handleChange.bind(this); } handleChange(event) { this.setState({ input: event.target.value }) } render() { let inputStyle = { border: '1px solid black' }; // Change code below this line // Change code above this line return ( &lt;div&gt; &lt;h3&gt;Don't Type Too Much:&lt;/h3&gt; &lt;input type=\"text\" style={inputStyle} value={this.state.input} onChange={this.handleChange} /&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html#seed-contents"
  },"115": {
    "doc": "Change inline CSS conditionally based on component state",
    "title": "–solutions–",
    "content": "class GateKeeper extends React.Component { constructor(props) { super(props); this.state = { input: '' }; this.handleChange = this.handleChange.bind(this); } handleChange(event) { this.setState({ input: event.target.value }) } render() { let inputStyle = { border: '1px solid black' }; // Change code below this line if (this.state.input.length &gt; 15) { inputStyle.border = '3px solid red'; }; // Change code above this line return ( &lt;div&gt; &lt;h3&gt;Don't Type Too Much:&lt;/h3&gt; &lt;input type=\"text\" style={inputStyle} value={this.state.input} onChange={this.handleChange} /&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/change-inline-css-conditionally-based-on-component-state.html#solutions"
  },"116": {
    "doc": "Child theme",
    "title": "Child theme",
    "content": "Child theme is pretty much using an available theme on the market, whether it’s free or not but renaming it yourself and change the styling to your need. Most of the file are still dependent on the parent theme. The core requirement for child theme is function.php and style.css. And screenshot.png if you wish. This is recommended if you would like to change some styling on the theme you purchase or download so that when the parent is updated, the styling you changed are still there. ",
    "url": "http://localhost:4000/CMS/Wordpress/child-theme.html",
    "relUrl": "/CMS/Wordpress/child-theme.html"
  },"117": {
    "doc": "Child theme",
    "title": "The function.php file for child theme:",
    "content": "&lt;?php add_action( 'wp_enqueue_scripts', 'my_theme_enqueue_styles' ); function my_theme_enqueue_styles() { $parent_style = 'parent-style'; // This is 'parent-theme-style' for the Nasi Goreng theme. wp_enqueue_style( $parent_style, get_template_directory_uri() . '/style.css' ); wp_enqueue_style( 'child-style', get_stylesheet_directory_uri() . '/style.css', array( $parent_style ), wp_get_theme()-&gt;get('Version') ); } ?&gt; . ",
    "url": "http://localhost:4000/CMS/Wordpress/child-theme.html#the-functionphp-file-for-child-theme",
    "relUrl": "/CMS/Wordpress/child-theme.html#the-functionphp-file-for-child-theme"
  },"118": {
    "doc": "Child theme",
    "title": "The style.css file",
    "content": "Here’s the style.css that you can modify or add styling for your child theme . /* Theme Name: Nasi Goreng Theme URI: http://irawan.id.au Description: Nasi Goreng theme Author: Nasi Goreng theme Author URI: http://irawan.id.au Template: parent-theme Version: 1.0.0 License: GNU General Public License v2 or later License URI: http://www.gnu.org/licenses/gpl-2.0.html Tags: light, dark, two-columns, right-sidebar, responsive-layout, accessibility-ready Text Domain: topend */ /* add your custom style below */ @media screen and (max-width: 580px){ #site-branding{ margin: 0 60px 0 60px; width: calc(55% - 120px); } p { font-size:1.3rem !important; font-weight:500; } .top-tel .mobile-clear { padding-bottom:20px; } } @media screen and (max-width: 480px){ #site-branding{ margin: 0 60px 0 60px; width: calc(55% - 120px); } p { font-size:1.3rem !important; font-weight:500; } .top-tel .mobile-clear { padding-bottom:20px; } } .top-cart .item-count { background: #e9fd06; } . ",
    "url": "http://localhost:4000/CMS/Wordpress/child-theme.html#the-stylecss-file",
    "relUrl": "/CMS/Wordpress/child-theme.html#the-stylecss-file"
  },"119": {
    "doc": "Child theme",
    "title": "Using wp scaffold - to start child theme",
    "content": "Running the following wp cli will start and create function.php and style.css to your child theme. E.g child theme name nasigoreng with parent twentytwentyone . wp scaffold child-theme nasigoreng --parent_theme=twentytwentyone . Then activate the theme: . wp theme activate nasigoreng . ",
    "url": "http://localhost:4000/CMS/Wordpress/child-theme.html#using-wp-scaffold---to-start-child-theme",
    "relUrl": "/CMS/Wordpress/child-theme.html#using-wp-scaffold---to-start-child-theme"
  },"120": {
    "doc": "Code snippets",
    "title": "Code snippets in markdown",
    "content": "Notes: . | Inline codes is written inside ` ` | or idented by add four spaces or one tab before | . Makdown . This is inline `code`. Rendered output . This is inline code. For a block of codes add three backward single quotes . Makdown . ``` javascript var s = \"JavaScript syntax highlighting\"; alert(s); ``` ```python s = \"Python syntax highlighting\" print s ``` . Rendered output . var s = \"JavaScript syntax highlighting\"; alert(s); . s = \"Python syntax highlighting\" print s . ",
    "url": "http://localhost:4000/Markdown/code-snippets.html#code-snippets-in-markdown",
    "relUrl": "/Markdown/code-snippets.html#code-snippets-in-markdown"
  },"121": {
    "doc": "Code snippets",
    "title": "Escaping markdown code block within markdown page",
    "content": "To escape block code as above or to display markdown code within markdown with three backticks included without being rendered, use either four backticks or three ~~~ . Makdown . ````md ```md &gt; Nasi goreng is delicious... &gt;&gt; ...if you like Asian food... &gt; &gt; &gt; ...good with spicy chilli sauce and cold beer. ``` ```` # or ~~~md ```md &gt; Nasi goreng is delicious... &gt;&gt; ...if you like Asian food... &gt; &gt; &gt; ...good with spicy chilli sauce and cold beer. ``` ~~~ . Rendered output . ```md &gt; Nasi goreng is delicious... &gt;&gt; ...if you like Asian food... &gt; &gt; &gt; ...good with spicy chilli sauce and cold beer. ``` . to display above md snippet, add 5 backticks etc… . ",
    "url": "http://localhost:4000/Markdown/code-snippets.html#escaping-markdown-code-block-within-markdown-page",
    "relUrl": "/Markdown/code-snippets.html#escaping-markdown-code-block-within-markdown-page"
  },"122": {
    "doc": "Code snippets",
    "title": "Code snippets",
    "content": " ",
    "url": "http://localhost:4000/Markdown/code-snippets.html",
    "relUrl": "/Markdown/code-snippets.html"
  },"123": {
    "doc": "Combine Multiple Reducers",
    "title": "–description–",
    "content": "When the state of your app begins to grow more complex, it may be tempting to divide state into multiple pieces. Instead, remember the first principle of Redux: all app state is held in a single state object in the store. Therefore, Redux provides reducer composition as a solution for a complex state model. You define multiple reducers to handle different pieces of your application’s state, then compose these reducers together into one root reducer. The root reducer is then passed into the Redux createStore() method. In order to let us combine multiple reducers together, Redux provides the combineReducers() method. This method accepts an object as an argument in which you define properties which associate keys to specific reducer functions. The name you give to the keys will be used by Redux as the name for the associated piece of state. Typically, it is a good practice to create a reducer for each piece of application state when they are distinct or unique in some way. For example, in a note-taking app with user authentication, one reducer could handle authentication while another handles the text and notes that the user is submitting. For such an application, we might write the combineReducers() method like this: . const rootReducer = Redux.combineReducers({ auth: authenticationReducer, notes: notesReducer }); . Now, the key notes will contain all of the state associated with our notes and handled by our notesReducer. This is how multiple reducers can be composed to manage more complex application state. In this example, the state held in the Redux store would then be a single object containing auth and notes properties. ",
    "url": "http://localhost:4000/js-libraries/redux/combine-multiple-reducers.html#description",
    "relUrl": "/js-libraries/redux/combine-multiple-reducers.html#description"
  },"124": {
    "doc": "Combine Multiple Reducers",
    "title": "–instructions–",
    "content": "There are counterReducer() and authReducer() functions provided in the code editor, along with a Redux store. Finish writing the rootReducer() function using the Redux.combineReducers() method. Assign counterReducer to a key called count and authReducer to a key called auth. ",
    "url": "http://localhost:4000/js-libraries/redux/combine-multiple-reducers.html#instructions",
    "relUrl": "/js-libraries/redux/combine-multiple-reducers.html#instructions"
  },"125": {
    "doc": "Combine Multiple Reducers",
    "title": "–hints–",
    "content": "The counterReducer should increment and decrement the state. assert( (function () { const initialState = store.getState().count; store.dispatch({ type: INCREMENT }); store.dispatch({ type: INCREMENT }); const firstState = store.getState().count; store.dispatch({ type: DECREMENT }); const secondState = store.getState().count; return firstState === initialState + 2 &amp;&amp; secondState === firstState - 1; })() ); . The authReducer should toggle the state of authenticated between true and false. assert( (function () { store.dispatch({ type: LOGIN }); const loggedIn = store.getState().auth.authenticated; store.dispatch({ type: LOGOUT }); const loggedOut = store.getState().auth.authenticated; return loggedIn === true &amp;&amp; loggedOut === false; })() ); . The store state should have two keys: count, which holds a number, and auth, which holds an object. The auth object should have a property of authenticated, which holds a boolean. assert( (function () { const state = store.getState(); return ( typeof state.auth === 'object' &amp;&amp; typeof state.auth.authenticated === 'boolean' &amp;&amp; typeof state.count === 'number' ); })() ); . The rootReducer should be a function that combines the counterReducer and the authReducer. (getUserInput) =&gt; assert( (function () { const noWhiteSpace = __helpers.removeWhiteSpace(getUserInput('index')); return ( typeof rootReducer === 'function' &amp;&amp; noWhiteSpace.includes('Redux.combineReducers') ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/redux/combine-multiple-reducers.html#hints",
    "relUrl": "/js-libraries/redux/combine-multiple-reducers.html#hints"
  },"126": {
    "doc": "Combine Multiple Reducers",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/combine-multiple-reducers.html#seed",
    "relUrl": "/js-libraries/redux/combine-multiple-reducers.html#seed"
  },"127": {
    "doc": "Combine Multiple Reducers",
    "title": "–seed-contents–",
    "content": "const INCREMENT = 'INCREMENT'; const DECREMENT = 'DECREMENT'; const counterReducer = (state = 0, action) =&gt; { switch(action.type) { case INCREMENT: return state + 1; case DECREMENT: return state - 1; default: return state; } }; const LOGIN = 'LOGIN'; const LOGOUT = 'LOGOUT'; const authReducer = (state = {authenticated: false}, action) =&gt; { switch(action.type) { case LOGIN: return { authenticated: true } case LOGOUT: return { authenticated: false } default: return state; } }; const rootReducer = // Define the root reducer here const store = Redux.createStore(rootReducer); . ",
    "url": "http://localhost:4000/js-libraries/redux/combine-multiple-reducers.html#seed-contents",
    "relUrl": "/js-libraries/redux/combine-multiple-reducers.html#seed-contents"
  },"128": {
    "doc": "Combine Multiple Reducers",
    "title": "–solutions–",
    "content": "const INCREMENT = 'INCREMENT'; const DECREMENT = 'DECREMENT'; const counterReducer = (state = 0, action) =&gt; { switch(action.type) { case INCREMENT: return state + 1; case DECREMENT: return state - 1; default: return state; } }; const LOGIN = 'LOGIN'; const LOGOUT = 'LOGOUT'; const authReducer = (state = {authenticated: false}, action) =&gt; { switch(action.type) { case LOGIN: return { authenticated: true } case LOGOUT: return { authenticated: false } default: return state; } }; const rootReducer = Redux.combineReducers({ count: counterReducer, auth: authReducer }); const store = Redux.createStore(rootReducer); . ",
    "url": "http://localhost:4000/js-libraries/redux/combine-multiple-reducers.html#solutions",
    "relUrl": "/js-libraries/redux/combine-multiple-reducers.html#solutions"
  },"129": {
    "doc": "Combine Multiple Reducers",
    "title": "Combine Multiple Reducers",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/combine-multiple-reducers.html",
    "relUrl": "/js-libraries/redux/combine-multiple-reducers.html"
  },"130": {
    "doc": "Common Issues",
    "title": "Wordpress common issues",
    "content": "When building Wordpressm site or migrating the site, we often face some issues such as the following: . | Blank white page | Homepage is working but other pages are 404 | DNS_PROBE_FINISHED_NXDOMAIN | Plugin or theme issues | . ",
    "url": "http://localhost:4000/CMS/Wordpress/common-issues.html#wordpress-common-issues",
    "relUrl": "/CMS/Wordpress/common-issues.html#wordpress-common-issues"
  },"131": {
    "doc": "Common Issues",
    "title": "Common Issues",
    "content": " ",
    "url": "http://localhost:4000/CMS/Wordpress/common-issues.html",
    "relUrl": "/CMS/Wordpress/common-issues.html"
  },"132": {
    "doc": "Compose react components",
    "title": "Compose react components",
    "content": "As the challenges continue to use more complex compositions with React components and JSX, there is one important point to note. Rendering ES6 style class components within other components is no different than rendering the simple components you used in the last few challenges. You can render JSX elements, stateless functional components, and ES6 class components within other components. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/compose-react-components.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/compose-react-components.html"
  },"133": {
    "doc": "Compose react components",
    "title": "–instructions–",
    "content": "In the code editor, the TypesOfFood component is already rendering a component called Vegetables. Also, there is the Fruits component from the last challenge. Nest two components inside of Fruits — first NonCitrus, and then Citrus. Both of these components are provided for you behind the scenes. Next, nest the Fruits class component into the TypesOfFood component, below the h1 heading element and above Vegetables. The result should be a series of nested components, which uses two different component types. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#instructions"
  },"134": {
    "doc": "Compose react components",
    "title": "–hints–",
    "content": "The TypesOfFood component should return a single div element. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return mockedComponent.children().type() === 'div'; })() ); . The TypesOfFood component should return the Fruits component. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return mockedComponent.children().childAt(1).name() === 'Fruits'; })() ); . The Fruits component should return the NonCitrus component and the Citrus component. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return ( mockedComponent.find('Fruits').children().find('NonCitrus').length === 1 &amp;&amp; mockedComponent.find('Fruits').children().find('Citrus').length === 1 ); })() ); . The TypesOfFood component should return the Vegetables component below the Fruits component. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return mockedComponent.children().childAt(2).name() === 'Vegetables'; })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#hints"
  },"135": {
    "doc": "Compose react components",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#seed"
  },"136": {
    "doc": "Compose react components",
    "title": "–before-user-code–",
    "content": "class NonCitrus extends React.Component { render() { return ( &lt;div&gt; &lt;h4&gt;Non-Citrus:&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Apples&lt;/li&gt; &lt;li&gt;Blueberries&lt;/li&gt; &lt;li&gt;Strawberries&lt;/li&gt; &lt;li&gt;Bananas&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ); } }; class Citrus extends React.Component { render() { return ( &lt;div&gt; &lt;h4&gt;Citrus:&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Lemon&lt;/li&gt; &lt;li&gt;Lime&lt;/li&gt; &lt;li&gt;Orange&lt;/li&gt; &lt;li&gt;Grapefruit&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ); } }; class Vegetables extends React.Component { render() { return ( &lt;div&gt; &lt;h2&gt;Vegetables:&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Brussel Sprouts&lt;/li&gt; &lt;li&gt;Broccoli&lt;/li&gt; &lt;li&gt;Squash&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#before-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#before-user-code"
  },"137": {
    "doc": "Compose react components",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;TypesOfFood /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#after-user-code"
  },"138": {
    "doc": "Compose react components",
    "title": "–seed-contents–",
    "content": "class Fruits extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h2&gt;Fruits:&lt;/h2&gt; { /* Change code below this line */ } { /* Change code above this line */ } &lt;/div&gt; ); } }; class TypesOfFood extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;Types of Food:&lt;/h1&gt; { /* Change code below this line */ } { /* Change code above this line */ } &lt;Vegetables /&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#seed-contents"
  },"139": {
    "doc": "Compose react components",
    "title": "–solutions–",
    "content": "class Fruits extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h2&gt;Fruits:&lt;/h2&gt; { /* Change code below this line */ } &lt;NonCitrus /&gt; &lt;Citrus /&gt; { /* Change code above this line */ } &lt;/div&gt; ) } } class TypesOfFood extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;Types of Food:&lt;/h1&gt; { /* Change code below this line */ } &lt;Fruits /&gt; { /* Change code above this line */ } &lt;Vegetables /&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/compose-react-components.html#solutions"
  },"140": {
    "doc": "Git config",
    "title": "Configuration",
    "content": " ",
    "url": "http://localhost:4000/Git/config.html#configuration",
    "relUrl": "/Git/config.html#configuration"
  },"141": {
    "doc": "Git config",
    "title": "Configuring the username and email for commit",
    "content": "In order to be able to commit on remote repositories, you will have to ensure that you configured your username and email address on your git local and have access to the remote repo . | to check your git configuration run this on your command line either globally or on the specific folder you are working on:cat .git/config | If you haven’t had any git configuration, you can add them globally or locally on the working folder | . ",
    "url": "http://localhost:4000/Git/config.html#configuring-the-username-and-email-for-commit",
    "relUrl": "/Git/config.html#configuring-the-username-and-email-for-commit"
  },"142": {
    "doc": "Git config",
    "title": "Add globally:",
    "content": ". | Add username: on your command line, run: git config --global user.name \"USER_NAME\" . | Add email address that you have the access to remote: git config --global user.email \"Name.of.email@email.com\" . | . ",
    "url": "http://localhost:4000/Git/config.html#add-globally",
    "relUrl": "/Git/config.html#add-globally"
  },"143": {
    "doc": "Git config",
    "title": "Setup the local folder different from global configuration, remove the --global :",
    "content": ". | Add username locally: git config user.name \"USER_NAME\" . | Set your email address locally git config user.email \"Name.of.email@email.com\" . | then check if all correct: cat .git/config . | . ",
    "url": "http://localhost:4000/Git/config.html#setup-the-local-folder-different-from-global-configuration-remove-the---global-",
    "relUrl": "/Git/config.html#setup-the-local-folder-different-from-global-configuration-remove-the---global-"
  },"144": {
    "doc": "Git config",
    "title": "Git config",
    "content": " ",
    "url": "http://localhost:4000/Git/config.html",
    "relUrl": "/Git/config.html"
  },"145": {
    "doc": "Configuring Laravel",
    "title": "Configuration",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Laravel/configuration.html#configuration",
    "relUrl": "/php-ramework/Laravel/configuration.html#configuration"
  },"146": {
    "doc": "Configuring Laravel",
    "title": "Configuring Laravel",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Laravel/configuration.html",
    "relUrl": "/php-ramework/Laravel/configuration.html"
  },"147": {
    "doc": "Jekyll configuration",
    "title": "Configure",
    "content": ". | Configure . | _config.yml file | File structure | . | . ",
    "url": "http://localhost:4000/Static/jekyll/configure.html#configure",
    "relUrl": "/Static/jekyll/configure.html#configure"
  },"148": {
    "doc": "Jekyll configuration",
    "title": "_config.yml file",
    "content": "The configuration for Jekyll is stored under the _config.yml file. This file will include: . | Title of the site | Language used | Description of the site | Theme - depending on the theme, there will be more additional information needed | Plugins | Google analytics | Custom domain information | . When you started a new Jekyll installation, it will come with the default theme Minima . Example of _config.yml default new Jekyll install . # Welcome to Jekyll! # # This config file is meant for settings that affect your whole blog, values # which you are expected to set up once and rarely edit after that. If you find # yourself editing this file very often, consider using Jekyll's data files # feature for the data you need to update frequently. # # For technical reasons, this file is *NOT* reloaded automatically when you use # 'bundle exec jekyll serve'. If you change this file, please restart the server process. # # If you need help with YAML syntax, here are some quick references for you: # https://learn-the-web.algonquindesign.ca/topics/markdown-yaml-cheat-sheet/#yaml # https://learnxinyminutes.com/docs/yaml/ # # Site settings # These are used to personalize your new site. If you look in the HTML files, # you will see them accessed via Dokumentasi, , and so on. # You can create any custom variable you would like, and they will be accessible # in the templates via . title: Your awesome title email: your-email@example.com description: &gt;- # this means to ignore newlines until \"baseurl:\" Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description. baseurl: \"\" # the subpath of your site, e.g. /blog url: \"\" # the base hostname &amp; protocol for your site, e.g. http://example.com twitter_username: jekyllrb github_username: jekyll # Build settings theme: minima plugins: - jekyll-feed # Exclude from processing. # The following items will not be processed, by default. # Any item listed under the `exclude:` key here will be automatically added to # the internal \"default list\". # # Excluded items can be processed by explicitly listing the directories or # their entries' file path in the `include:` list. # # exclude: # - .sass-cache/ # - .jekyll-cache/ # - gemfiles/ # - Gemfile # - Gemfile.lock # - node_modules/ # - vendor/bundle/ # - vendor/cache/ # - vendor/gems/ # - vendor/ruby/ . ",
    "url": "http://localhost:4000/Static/jekyll/configure.html#_configyml-file",
    "relUrl": "/Static/jekyll/configure.html#_configyml-file"
  },"149": {
    "doc": "Jekyll configuration",
    "title": "File structure",
    "content": "The file structure of default Jekyll install looks like below tree. ├── 404.html ├── Gemfile ├── Gemfile.lock ├── _config.yml ├── _posts │   └── 2021-02-25-welcome-to-jekyll.markdown ├── _site │   ├── 404.html │   ├── about │   │   └── index.html │   ├── assets │   │   ├── main.css │   │   ├── main.css.map │   │   └── minima-social-icons.svg │   ├── feed.xml │   ├── index.html │   └── jekyll │   └── update │   └── 2021 │   └── 02 │   └── 25 │   └── welcome-to-jekyll.html ├── about.markdown └── index.markdown . The Content types on this theme are defined by the files in _layout folder. And the _site folder, contains the essential files such as the assets and html files that are created when you start creating pages in markdown . ",
    "url": "http://localhost:4000/Static/jekyll/configure.html#file-structure",
    "relUrl": "/Static/jekyll/configure.html#file-structure"
  },"150": {
    "doc": "Jekyll configuration",
    "title": "Jekyll configuration",
    "content": " ",
    "url": "http://localhost:4000/Static/jekyll/configure.html",
    "relUrl": "/Static/jekyll/configure.html"
  },"151": {
    "doc": "Copy an Object with Object.assign",
    "title": "–description–",
    "content": "The last several challenges worked with arrays, but there are ways to help enforce state immutability when state is an object, too. A useful tool for handling objects is the Object.assign() utility. Object.assign() takes a target object and source objects and maps properties from the source objects to the target object. Any matching properties are overwritten by properties in the source objects. This behavior is commonly used to make shallow copies of objects by passing an empty object as the first argument followed by the object(s) you want to copy. Here’s an example: . const newObject = Object.assign({}, obj1, obj2); . This creates newObject as a new object, which contains the properties that currently exist in obj1 and obj2. ",
    "url": "http://localhost:4000/js-libraries/redux/copy-an-object-with-object.assign.html#description",
    "relUrl": "/js-libraries/redux/copy-an-object-with-object.assign.html#description"
  },"152": {
    "doc": "Copy an Object with Object.assign",
    "title": "–instructions–",
    "content": "The Redux state and actions were modified to handle an object for the state. Edit the code to return a new state object for actions with type ONLINE, which set the status property to the string online. Try to use Object.assign() to complete the challenge. ",
    "url": "http://localhost:4000/js-libraries/redux/copy-an-object-with-object.assign.html#instructions",
    "relUrl": "/js-libraries/redux/copy-an-object-with-object.assign.html#instructions"
  },"153": {
    "doc": "Copy an Object with Object.assign",
    "title": "–hints–",
    "content": "The Redux store should exist and initialize with a state that is equivalent to the defaultState object declared on line 1. assert( (function () { const expectedState = { user: 'CamperBot', status: 'offline', friends: '732,982', community: 'freeCodeCamp' }; const initialState = store.getState(); return DeepEqual(expectedState, initialState); })() ); . wakeUp and immutableReducer both should be functions. assert(typeof wakeUp === 'function' &amp;&amp; typeof immutableReducer === 'function'); . Dispatching an action of type ONLINE should update the property status in state to online and should NOT mutate state. assert( (function () { const initialState = store.getState(); const isFrozen = DeepFreeze(initialState); store.dispatch({ type: 'ONLINE' }); const finalState = store.getState(); const expectedState = { user: 'CamperBot', status: 'online', friends: '732,982', community: 'freeCodeCamp' }; return isFrozen &amp;&amp; DeepEqual(finalState, expectedState); })() ); . Object.assign should be used to return new state. (getUserInput) =&gt; assert(getUserInput('index').includes('Object.assign')); . ",
    "url": "http://localhost:4000/js-libraries/redux/copy-an-object-with-object.assign.html#hints",
    "relUrl": "/js-libraries/redux/copy-an-object-with-object.assign.html#hints"
  },"154": {
    "doc": "Copy an Object with Object.assign",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/copy-an-object-with-object.assign.html#seed",
    "relUrl": "/js-libraries/redux/copy-an-object-with-object.assign.html#seed"
  },"155": {
    "doc": "Copy an Object with Object.assign",
    "title": "–seed-contents–",
    "content": "const defaultState = { user: 'CamperBot', status: 'offline', friends: '732,982', community: 'freeCodeCamp' }; const immutableReducer = (state = defaultState, action) =&gt; { switch(action.type) { case 'ONLINE': // Don't mutate state here or the tests will fail return default: return state; } }; const wakeUp = () =&gt; { return { type: 'ONLINE' } }; const store = Redux.createStore(immutableReducer); . ",
    "url": "http://localhost:4000/js-libraries/redux/copy-an-object-with-object.assign.html#seed-contents",
    "relUrl": "/js-libraries/redux/copy-an-object-with-object.assign.html#seed-contents"
  },"156": {
    "doc": "Copy an Object with Object.assign",
    "title": "–solutions–",
    "content": "const defaultState = { user: 'CamperBot', status: 'offline', friends: '732,982', community: 'freeCodeCamp' }; const immutableReducer = (state = defaultState, action) =&gt; { switch(action.type) { case 'ONLINE': return Object.assign({}, state, { status: 'online' }); default: return state; } }; const wakeUp = () =&gt; { return { type: 'ONLINE' } }; const store = Redux.createStore(immutableReducer); . ",
    "url": "http://localhost:4000/js-libraries/redux/copy-an-object-with-object.assign.html#solutions",
    "relUrl": "/js-libraries/redux/copy-an-object-with-object.assign.html#solutions"
  },"157": {
    "doc": "Copy an Object with Object.assign",
    "title": "Copy an Object with Object.assign",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/copy-an-object-with-object.assign.html",
    "relUrl": "/js-libraries/redux/copy-an-object-with-object.assign.html"
  },"158": {
    "doc": "Create a complex JSX element",
    "title": "Create a complex JSX element",
    "content": "The last challenge was a simple example of JSX, but JSX can represent more complex HTML as well. One important thing to know about nested JSX is that it must return a single element. This one parent element would wrap all of the other levels of nested elements. For instance, several JSX elements written as siblings with no parent wrapper element will not transpile. Here’s an example: . Valid JSX: . &lt;div&gt; &lt;p&gt;Paragraph One&lt;/p&gt; &lt;p&gt;Paragraph Two&lt;/p&gt; &lt;p&gt;Paragraph Three&lt;/p&gt; &lt;/div&gt; . Invalid JSX: . &lt;p&gt;Paragraph One&lt;/p&gt; &lt;p&gt;Paragraph Two&lt;/p&gt; &lt;p&gt;Paragraph Three&lt;/p&gt; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html"
  },"159": {
    "doc": "Create a complex JSX element",
    "title": "–instructions–",
    "content": "Define a new constant JSX that renders a div which contains the following elements in order: . An h1, a p, and an unordered list that contains three li items. You can include any text you want within each element. Note: When rendering multiple elements like this, you can wrap them all in parentheses, but it’s not strictly required. Also notice this challenge uses a div tag to wrap all the child elements within a single parent element. If you remove the div, the JSX will no longer transpile. Keep this in mind, since it will also apply when you return JSX elements in React components. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html#instructions"
  },"160": {
    "doc": "Create a complex JSX element",
    "title": "–hints–",
    "content": "The constant JSX should return a div element. assert(JSX.type === 'div'); . The div should contain an h1 tag as the first element. assert(JSX.props.children[0].type === 'h1'); . The div should contain a p tag as the second element. assert(JSX.props.children[1].type === 'p'); . The div should contain a ul tag as the third element. assert(JSX.props.children[2].type === 'ul'); . The ul should contain three li elements. assert( JSX.props.children .filter((ele) =&gt; ele.type === 'ul')[0] .props.children.filter((ele) =&gt; ele.type === 'li').length === 3 ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html#hints"
  },"161": {
    "doc": "Create a complex JSX element",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html#seed"
  },"162": {
    "doc": "Create a complex JSX element",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(JSX, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html#after-user-code"
  },"163": {
    "doc": "Create a complex JSX element",
    "title": "–seed-contents–",
    "content": ". ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html#seed-contents"
  },"164": {
    "doc": "Create a complex JSX element",
    "title": "–solutions–",
    "content": "const JSX = ( &lt;div&gt; &lt;h1&gt;Hello JSX!&lt;/h1&gt; &lt;p&gt;Some info&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An item&lt;/li&gt; &lt;li&gt;Another item&lt;/li&gt; &lt;li&gt;A third item&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-complex-jsx-element.html#solutions"
  },"165": {
    "doc": "Create a component with composition",
    "title": "Create a component with composition",
    "content": "Now we will look at how we can compose multiple React components together. Imagine you are building an app and have created three components: a Navbar, Dashboard, and Footer. To compose these components together, you could create an App parent component which renders each of these three components as children. To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX. For example, in the render method you could write: . return ( &lt;App&gt; &lt;Navbar /&gt; &lt;Dashboard /&gt; &lt;Footer /&gt; &lt;/App&gt; ) . When React encounters a custom HTML tag that references another component (a component name wrapped in &lt; /&gt; like in this example), it renders the markup for that component in the location of the tag. This should illustrate the parent/child relationship between the App component and the Navbar, Dashboard, and Footer. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html"
  },"166": {
    "doc": "Create a component with composition",
    "title": "–instructions–",
    "content": "In the code editor, there is a simple functional component called ChildComponent and a class component called ParentComponent. Compose the two together by rendering the ChildComponent within the ParentComponent. Make sure to close the ChildComponent tag with a forward slash. Note: ChildComponent is defined with an ES6 arrow function because this is a very common practice when using React. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html#instructions"
  },"167": {
    "doc": "Create a component with composition",
    "title": "–hints–",
    "content": "The React component should return a single div element. assert( (function () { var shallowRender = Enzyme.shallow(React.createElement(ParentComponent)); return shallowRender.type() === 'div'; })() ); . The component should return two nested elements. assert( (function () { var shallowRender = Enzyme.shallow(React.createElement(ParentComponent)); return shallowRender.children().length === 2; })() ); . The component should return the ChildComponent as its second child. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ParentComponent)); return ( mockedComponent.find('ParentComponent').find('ChildComponent').length === 1 ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html#hints"
  },"168": {
    "doc": "Create a component with composition",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html#seed"
  },"169": {
    "doc": "Create a component with composition",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;ParentComponent /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html#after-user-code"
  },"170": {
    "doc": "Create a component with composition",
    "title": "–seed-contents–",
    "content": "const ChildComponent = () =&gt; { return ( &lt;div&gt; &lt;p&gt;I am the child&lt;/p&gt; &lt;/div&gt; ); }; class ParentComponent extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;I am the parent&lt;/h1&gt; { /* Change code below this line */ } { /* Change code above this line */ } &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html#seed-contents"
  },"171": {
    "doc": "Create a component with composition",
    "title": "–solutions–",
    "content": "const ChildComponent = () =&gt; { return ( &lt;div&gt; &lt;p&gt;I am the child&lt;/p&gt; &lt;/div&gt; ); }; class ParentComponent extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;I am the parent&lt;/h1&gt; { /* Change code below this line */ } &lt;ChildComponent /&gt; { /* Change code above this line */ } &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-component-with-composition.html#solutions"
  },"172": {
    "doc": "Create a controlled form",
    "title": "Create a controlled form",
    "content": "The last challenge showed that React can control the internal state for certain elements like input and textarea, which makes them controlled components. This applies to other form elements as well, including the regular HTML form element. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html"
  },"173": {
    "doc": "Create a controlled form",
    "title": "–instructions–",
    "content": "The MyForm component is set up with an empty form with a submit handler. The submit handler will be called when the form is submitted. We’ve added a button which submits the form. You can see it has the type set to submit indicating it is the button controlling the form. Add the input element in the form and set its value and onChange() attributes like the last challenge. You should then complete the handleSubmit method so that it sets the component state property submit to the current input value in the local state. Note: You also must call event.preventDefault() in the submit handler, to prevent the default form submit behavior which will refresh the web page. For camper convenience, the default behavior has been disabled here to prevent refreshes from resetting challenge code. Finally, create an h1 tag after the form which renders the submit value from the component’s state. You can then type in the form and click the button (or press enter), and you should see your input rendered to the page. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html#instructions"
  },"174": {
    "doc": "Create a controlled form",
    "title": "–hints–",
    "content": "MyForm should return a div element which contains a form and an h1 tag. The form should include an input and a button. assert( (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(MyForm)); return ( mockedComponent.find('div').children().find('form').length === 1 &amp;&amp; mockedComponent.find('div').children().find('h1').length === 1 &amp;&amp; mockedComponent.find('form').children().find('input').length === 1 &amp;&amp; mockedComponent.find('form').children().find('button').length === 1 ); })() ); . The state of MyForm should initialize with input and submit properties, both set to empty strings. assert( Enzyme.mount(React.createElement(MyForm)).state('input') === '' &amp;&amp; Enzyme.mount(React.createElement(MyForm)).state('submit') === '' ); . Typing in the input element should update the input property of the component’s state. (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(MyForm)); const _1 = () =&gt; { mockedComponent.setState({ input: '' }); return mockedComponent.state('input'); }; const _2 = () =&gt; { mockedComponent .find('input') .simulate('change', { target: { value: 'TestInput' } }); return { state: mockedComponent.state('input'), inputVal: mockedComponent.find('input').props().value }; }; const before = _1(); const after = _2(); assert( before === '' &amp;&amp; after.state === 'TestInput' &amp;&amp; after.inputVal === 'TestInput' ); })(); . Submitting the form should run handleSubmit which should set the submit property in state equal to the current input. (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(MyForm)); const _1 = () =&gt; { mockedComponent.setState({ input: '' }); mockedComponent.setState({ submit: '' }); mockedComponent .find('input') .simulate('change', { target: { value: 'SubmitInput' } }); return mockedComponent.state('submit'); }; const _2 = () =&gt; { mockedComponent.find('form').simulate('submit'); return mockedComponent.state('submit'); }; const before = _1(); const after = _2(); assert(before === '' &amp;&amp; after === 'SubmitInput'); })(); . handleSubmit should call event.preventDefault . assert( __helpers.isCalledWithNoArgs( 'event.preventDefault', MyForm.prototype.handleSubmit.toString() ) ); . The h1 heading element should render the value of the submit field from the component’s state. (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(MyForm)); const _1 = () =&gt; { mockedComponent.setState({ input: '' }); mockedComponent.setState({ submit: '' }); mockedComponent .find('input') .simulate('change', { target: { value: 'TestInput' } }); return mockedComponent.find('h1').text(); }; const _2 = () =&gt; { mockedComponent.find('form').simulate('submit'); return mockedComponent.find('h1').text(); }; const before = _1(); const after = _2(); assert(before === '' &amp;&amp; after === 'TestInput'); })(); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html#hints"
  },"175": {
    "doc": "Create a controlled form",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html#seed"
  },"176": {
    "doc": "Create a controlled form",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyForm /&gt;, document.getElementById('root')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html#after-user-code"
  },"177": {
    "doc": "Create a controlled form",
    "title": "–seed-contents–",
    "content": "class MyForm extends React.Component { constructor(props) { super(props); this.state = { input: '', submit: '' }; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); } handleChange(event) { this.setState({ input: event.target.value }); } handleSubmit(event) { // Change code below this line // Change code above this line } render() { return ( &lt;div&gt; &lt;form onSubmit={this.handleSubmit}&gt; {/* Change code below this line */} {/* Change code above this line */} &lt;button type='submit'&gt;Submit!&lt;/button&gt; &lt;/form&gt; {/* Change code below this line */} {/* Change code above this line */} &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html#seed-contents"
  },"178": {
    "doc": "Create a controlled form",
    "title": "–solutions–",
    "content": "class MyForm extends React.Component { constructor(props) { super(props); this.state = { input: '', submit: '' }; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); } handleChange(event) { this.setState({ input: event.target.value }); } handleSubmit(event) { event.preventDefault(); this.setState(state =&gt; ({ submit: state.input })); } render() { return ( &lt;div&gt; &lt;form onSubmit={this.handleSubmit}&gt; &lt;input value={this.state.input} onChange={this.handleChange} /&gt; &lt;button type='submit'&gt;Submit!&lt;/button&gt; &lt;/form&gt; &lt;h1&gt;{this.state.submit}&lt;/h1&gt; &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-form.html#solutions"
  },"179": {
    "doc": "Create a controlled input",
    "title": "Create a controlled input",
    "content": "Your application may have more complex interactions between state and the rendered UI. For example, form control elements for text input, such as input and textarea, maintain their own state in the DOM as the user types. With React, you can move this mutable state into a React component’s state. The user’s input becomes part of the application state, so React controls the value of that input field. Typically, if you have React components with input fields the user can type into, it will be a controlled input form. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html"
  },"180": {
    "doc": "Create a controlled input",
    "title": "–instructions–",
    "content": "The code editor has the skeleton of a component called ControlledInput to create a controlled input element. The component’s state is already initialized with an input property that holds an empty string. This value represents the text a user types into the input field. First, create a method called handleChange() that has a parameter called event. When the method is called, it receives an event object that contains a string of text from the input element. You can access this string with event.target.value inside the method. Update the input property of the component’s state with this new string. In the render method, create the input element above the h4 tag. Add a value attribute which is equal to the input property of the component’s state. Then add an onChange() event handler set to the handleChange() method. When you type in the input box, that text is processed by the handleChange() method, set as the input property in the local state, and rendered as the value in the input box on the page. The component state is the single source of truth regarding the input data. Last but not least, don’t forget to add the necessary bindings in the constructor. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html#instructions"
  },"181": {
    "doc": "Create a controlled input",
    "title": "–hints–",
    "content": "ControlledInput should return a div element which contains an input and a p tag. assert( Enzyme.mount(React.createElement(ControlledInput)) .find('div') .children() .find('input').length === 1 &amp;&amp; Enzyme.mount(React.createElement(ControlledInput)) .find('div') .children() .find('p').length === 1 ); . The state of ControlledInput should initialize with an input property set to an empty string. assert.strictEqual( Enzyme.mount(React.createElement(ControlledInput)).state('input'), '' ); . Typing in the input element should update the state and the value of the input, and the p element should render this state as you type. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(ControlledInput)); const _1 = () =&gt; { mockedComponent.setState({ input: '' }); return waitForIt(() =&gt; mockedComponent.state('input')); }; const _2 = () =&gt; { mockedComponent .find('input') .simulate('change', { target: { value: 'TestInput' } }); return waitForIt(() =&gt; ({ state: mockedComponent.state('input'), text: mockedComponent.find('p').text(), inputVal: mockedComponent.find('input').props().value })); }; const before = await _1(); const after = await _2(); assert( before === '' &amp;&amp; after.state === 'TestInput' &amp;&amp; after.text === 'TestInput' &amp;&amp; after.inputVal === 'TestInput' ); }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html#hints"
  },"182": {
    "doc": "Create a controlled input",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html#seed"
  },"183": {
    "doc": "Create a controlled input",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;ControlledInput /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html#after-user-code"
  },"184": {
    "doc": "Create a controlled input",
    "title": "–seed-contents–",
    "content": "class ControlledInput extends React.Component { constructor(props) { super(props); this.state = { input: '' }; // Change code below this line // Change code above this line } // Change code below this line // Change code above this line render() { return ( &lt;div&gt; { /* Change code below this line */} { /* Change code above this line */} &lt;h4&gt;Controlled Input:&lt;/h4&gt; &lt;p&gt;{this.state.input}&lt;/p&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html#seed-contents"
  },"185": {
    "doc": "Create a controlled input",
    "title": "–solutions–",
    "content": "class ControlledInput extends React.Component { constructor(props) { super(props); this.state = { input: '' }; this.handleChange = this.handleChange.bind(this); } handleChange(event) { this.setState({ input: event.target.value }); } render() { return ( &lt;div&gt; &lt;input value={this.state.input} onChange={this.handleChange} /&gt; &lt;h4&gt;Controlled Input:&lt;/h4&gt; &lt;p&gt;{this.state.input}&lt;/p&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-controlled-input.html#solutions"
  },"186": {
    "doc": "Create a react component",
    "title": "Create a react component",
    "content": "The other way to define a React component is with the ES6 class syntax. In the following example, Kitten extends React.Component: . class Kitten extends React.Component { constructor(props) { super(props); } render() { return ( &lt;h1&gt;Hi&lt;/h1&gt; ); } } . This creates an ES6 class Kitten which extends the React.Component class. So the Kitten class now has access to many useful React features, such as local state and lifecycle hooks. Don’t worry if you aren’t familiar with these terms yet, they will be covered in greater detail in later challenges. Also notice the Kitten class has a constructor defined within it that calls super(). It uses super() to call the constructor of the parent class, in this case React.Component. The constructor is a special method used during the initialization of objects that are created with the class keyword. It is best practice to call a component’s constructor with super, and pass props to both. This makes sure the component is initialized properly. For now, know that it is standard for this code to be included. Soon you will see other uses for the constructor as well as props. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html"
  },"187": {
    "doc": "Create a react component",
    "title": "–instructions–",
    "content": "MyComponent is defined in the code editor using class syntax. Finish writing the render method so it returns a div element that contains an h1 with the text Hello React!. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html#instructions"
  },"188": {
    "doc": "Create a react component",
    "title": "–hints–",
    "content": "The React component should return a div element. assert(Enzyme.shallow(React.createElement(MyComponent)).type() === 'div'); . The returned div should render an h1 heading element within it. assert( /&lt;div&gt;&lt;h1&gt;.*&lt;\\/h1&gt;&lt;\\/div&gt;/.test( Enzyme.shallow(React.createElement(MyComponent)).html() ) ); . The h1 heading element should contain the string Hello React!. assert( Enzyme.shallow(React.createElement(MyComponent)).html() === '&lt;div&gt;&lt;h1&gt;Hello React!&lt;/h1&gt;&lt;/div&gt;' ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html#hints"
  },"189": {
    "doc": "Create a react component",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html#seed"
  },"190": {
    "doc": "Create a react component",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html#after-user-code"
  },"191": {
    "doc": "Create a react component",
    "title": "–seed-contents–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); } render() { // Change code below this line // Change code above this line } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html#seed-contents"
  },"192": {
    "doc": "Create a react component",
    "title": "–solutions–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); } render() { // Change code below this line return ( &lt;div&gt; &lt;h1&gt;Hello React!&lt;/h1&gt; &lt;/div&gt; ); // Change code above this line } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-react-component.html#solutions"
  },"193": {
    "doc": "Create a Redux Store",
    "title": "–description–",
    "content": "Redux is a state management framework that can be used with a number of different web technologies, including React. In Redux, there is a single state object that’s responsible for the entire state of your application. This means if you had a React app with ten components, and each component had its own local state, the entire state of your app would be defined by a single state object housed in the Redux store. This is the first important principle to understand when learning Redux: the Redux store is the single source of truth when it comes to application state. This also means that any time any piece of your app wants to update state, it must do so through the Redux store. The unidirectional data flow makes it easier to track state management in your app. ",
    "url": "http://localhost:4000/js-libraries/redux/create-a-redux-store.html#description",
    "relUrl": "/js-libraries/redux/create-a-redux-store.html#description"
  },"194": {
    "doc": "Create a Redux Store",
    "title": "–instructions–",
    "content": "The Redux store is an object which holds and manages application state. There is a method called createStore() on the Redux object, which you use to create the Redux store. This method takes a reducer function as a required argument. The reducer function is covered in a later challenge, and is already defined for you in the code editor. It simply takes state as an argument and returns state. Declare a store variable and assign it to the createStore() method, passing in the reducer as an argument. Note: The code in the editor uses ES6 default argument syntax to initialize this state to hold a value of 5. If you’re not familiar with default arguments, you can refer to the ES6 section in the Curriculum which covers this topic. ",
    "url": "http://localhost:4000/js-libraries/redux/create-a-redux-store.html#instructions",
    "relUrl": "/js-libraries/redux/create-a-redux-store.html#instructions"
  },"195": {
    "doc": "Create a Redux Store",
    "title": "–hints–",
    "content": "The Redux store should exist. assert(typeof store.getState === 'function'); . The Redux store should have a value of 5 for the state. assert(store.getState() === 5); . ",
    "url": "http://localhost:4000/js-libraries/redux/create-a-redux-store.html#hints",
    "relUrl": "/js-libraries/redux/create-a-redux-store.html#hints"
  },"196": {
    "doc": "Create a Redux Store",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/create-a-redux-store.html#seed",
    "relUrl": "/js-libraries/redux/create-a-redux-store.html#seed"
  },"197": {
    "doc": "Create a Redux Store",
    "title": "–seed-contents–",
    "content": "const reducer = (state = 5) =&gt; { return state; } // Redux methods are available from a Redux object // For example: Redux.createStore() // Define the store here: . ",
    "url": "http://localhost:4000/js-libraries/redux/create-a-redux-store.html#seed-contents",
    "relUrl": "/js-libraries/redux/create-a-redux-store.html#seed-contents"
  },"198": {
    "doc": "Create a Redux Store",
    "title": "–solutions–",
    "content": "const reducer = (state = 5) =&gt; { return state; } const store = Redux.createStore(reducer); . ",
    "url": "http://localhost:4000/js-libraries/redux/create-a-redux-store.html#solutions",
    "relUrl": "/js-libraries/redux/create-a-redux-store.html#solutions"
  },"199": {
    "doc": "Create a Redux Store",
    "title": "Create a Redux Store",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/create-a-redux-store.html",
    "relUrl": "/js-libraries/redux/create-a-redux-store.html"
  },"200": {
    "doc": "Create a simple JSX element",
    "title": "Create a simple JSX element",
    "content": "React is an Open Source view library created and maintained by Facebook. It’s a great tool to render the User Interface (UI) of modern web applications. React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part, JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges. For instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. To do this, you simply include the code you want to be treated as JavaScript within curly braces: { 'this is treated as JavaScript code' }. Keep this in mind, since it’s used in several future challenges. However, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript. The transpiler Babel is a popular tool for this process. For your convenience, it’s already added behind the scenes for these challenges. If you happen to write syntactically invalid JSX, you will see the first test in these challenges fail. It’s worth noting that under the hood the challenges are calling ReactDOM.render(JSX, document.getElementById('root')). This function call is what places your JSX into React’s own lightweight representation of the DOM. React then uses snapshots of its own DOM to optimize updating only specific parts of the actual DOM. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html"
  },"201": {
    "doc": "Create a simple JSX element",
    "title": "–instructions–",
    "content": "The current code uses JSX to assign a div element to the constant JSX. Replace the div with an h1 element and add the text Hello JSX! inside it. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html#instructions"
  },"202": {
    "doc": "Create a simple JSX element",
    "title": "–hints–",
    "content": "The constant JSX should return an h1 element. assert(JSX.type === 'h1'); . The h1 tag should include the text Hello JSX! . assert(Enzyme.shallow(JSX).contains('Hello JSX!')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html#hints"
  },"203": {
    "doc": "Create a simple JSX element",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html#seed"
  },"204": {
    "doc": "Create a simple JSX element",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(JSX, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html#after-user-code"
  },"205": {
    "doc": "Create a simple JSX element",
    "title": "–seed-contents–",
    "content": "const JSX = &lt;div&gt;&lt;/div&gt;; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html#seed-contents"
  },"206": {
    "doc": "Create a simple JSX element",
    "title": "–solutions–",
    "content": "const JSX = &lt;h1&gt;Hello JSX!&lt;/h1&gt;; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-simple-jsx-element.html#solutions"
  },"207": {
    "doc": "Create stateful component",
    "title": "Create stateful component",
    "content": "One of the most important topics in React is state. State consists of any data your application needs to know about, that can change over time. You want your apps to respond to state changes and present an updated UI when necessary. React offers a nice solution for the state management of modern web applications. You create state in a React component by declaring a state property on the component class in its constructor. This initializes the component with state when it is created. The state property must be set to a JavaScript object. Declaring it looks like this: . this.state = { } . You have access to the state object throughout the life of your component. You can update it, render it in your UI, and pass it as props to child components. The state object can be as complex or as simple as you need it to be. Note that you must create a class component by extending React.Component in order to create state like this. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html"
  },"208": {
    "doc": "Create stateful component",
    "title": "–instructions–",
    "content": "There is a component in the code editor that is trying to render a firstName property from its state. However, there is no state defined. Initialize the component with state in the constructor and assign your name to a property of firstName. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html#instructions"
  },"209": {
    "doc": "Create stateful component",
    "title": "–hints–",
    "content": "StatefulComponent should exist and render. assert( (function () { const mockedComponent = Enzyme.mount( React.createElement(StatefulComponent) ); return mockedComponent.find('StatefulComponent').length === 1; })() ); . StatefulComponent should render a div and an h1 element. assert( (function () { const mockedComponent = Enzyme.mount( React.createElement(StatefulComponent) ); return ( mockedComponent.find('div').length === 1 &amp;&amp; mockedComponent.find('h1').length === 1 ); })() ); . The state of StatefulComponent should be initialized with a property firstName set to a string. assert( (function () { const mockedComponent = Enzyme.mount( React.createElement(StatefulComponent) ); const initialState = mockedComponent.state(); return ( typeof initialState === 'object' &amp;&amp; typeof initialState.firstName === 'string' ); })() ); . The property firstName in the state of StatefulComponent should render in the h1 element. assert( (function () { const mockedComponent = Enzyme.mount( React.createElement(StatefulComponent) ); const initialState = mockedComponent.state(); return mockedComponent.find('h1').text() === initialState.firstName; })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html#hints"
  },"210": {
    "doc": "Create stateful component",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html#seed"
  },"211": {
    "doc": "Create stateful component",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;StatefulComponent /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html#after-user-code"
  },"212": {
    "doc": "Create stateful component",
    "title": "–seed-contents–",
    "content": "class StatefulComponent extends React.Component { constructor(props) { super(props); // Only change code below this line // Only change code above this line } render() { return ( &lt;div&gt; &lt;h1&gt;{this.state.firstName}&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html#seed-contents"
  },"213": {
    "doc": "Create stateful component",
    "title": "–solutions–",
    "content": "class StatefulComponent extends React.Component { constructor(props) { super(props); this.state = { firstName: 'freeCodeCamp!' } } render() { return ( &lt;div&gt; &lt;h1&gt;{this.state.firstName}&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateful-component.html#solutions"
  },"214": {
    "doc": "Create a stateless functional component",
    "title": "Create a stateless functional component",
    "content": "Components are the core of React. Everything in React is a component and here you will learn how to create one. There are two ways to create a React component. The first way is to use a JavaScript function. Defining a component in this way creates a stateless functional component. The concept of state in an application will be covered in later challenges. For now, think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data. (We’ll cover the second way to create a React component in the next challenge.) . To create a component with a function, you simply write a JavaScript function that returns either JSX or null. One important thing to note is that React requires your function name to begin with a capital letter. Here’s an example of a stateless functional component that assigns an HTML class in JSX: . const DemoComponent = function() { return ( &lt;div className='customClass' /&gt; ); }; . After being transpiled, the &lt;div&gt; will have a CSS class of customClass. Because a JSX component represents HTML, you could put several components together to create a more complex HTML page. This is one of the key advantages of the component architecture React provides. It allows you to compose your UI from many separate, isolated components. This makes it easier to build and maintain complex user interfaces. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html"
  },"215": {
    "doc": "Create a stateless functional component",
    "title": "–instructions–",
    "content": "The code editor has a function called MyComponent. Complete this function so it returns a single div element which contains some string of text. Note: The text is considered a child of the div element, so you will not be able to use a self-closing tag. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html#instructions"
  },"216": {
    "doc": "Create a stateless functional component",
    "title": "–hints–",
    "content": "MyComponent should return JSX. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.length === 1; })() ); . MyComponent should return a div element. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.children().type() === 'div'; })() ); . The div element should contain a string of text. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('div').text() !== ''; })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html#hints"
  },"217": {
    "doc": "Create a stateless functional component",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html#seed"
  },"218": {
    "doc": "Create a stateless functional component",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html#after-user-code"
  },"219": {
    "doc": "Create a stateless functional component",
    "title": "–seed-contents–",
    "content": "const MyComponent = function() { // Change code below this line // Change code above this line } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html#seed-contents"
  },"220": {
    "doc": "Create a stateless functional component",
    "title": "–solutions–",
    "content": "const MyComponent = function() { // Change code below this line return ( &lt;div&gt; Demo Solution &lt;/div&gt; ); // Change code above this line } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/create-a-stateless-functional-component.html#solutions"
  },"221": {
    "doc": "CRUD",
    "title": "CRUD (Create Read Update and Delete)",
    "content": " ",
    "url": "http://localhost:4000/the-basics/crud.html#crud-create-read-update-and-delete",
    "relUrl": "/the-basics/crud.html#crud-create-read-update-and-delete"
  },"222": {
    "doc": "CRUD",
    "title": "CRUD",
    "content": " ",
    "url": "http://localhost:4000/the-basics/crud.html",
    "relUrl": "/the-basics/crud.html"
  },"223": {
    "doc": "CSS, SCSS, SASS and LESS",
    "title": "CSS",
    "content": "This will include CSS, SCSS, SASS, LESS and PostCSS . ",
    "url": "http://localhost:4000/the-languages/css.html#css",
    "relUrl": "/the-languages/css.html#css"
  },"224": {
    "doc": "CSS, SCSS, SASS and LESS",
    "title": "Basic CSS",
    "content": ". | Comments /* here's your comment to put note on your css */ | Linking the CSS file correctly . | Internal linking with file | External linking to other URL | Inline | . | . | Selectors | Properties | . ",
    "url": "http://localhost:4000/the-languages/css.html#basic-css",
    "relUrl": "/the-languages/css.html#basic-css"
  },"225": {
    "doc": "CSS, SCSS, SASS and LESS",
    "title": "SCSS",
    "content": "Overview . ",
    "url": "http://localhost:4000/the-languages/css.html#scss",
    "relUrl": "/the-languages/css.html#scss"
  },"226": {
    "doc": "CSS, SCSS, SASS and LESS",
    "title": "SASS",
    "content": "Overview . ",
    "url": "http://localhost:4000/the-languages/css.html#sass",
    "relUrl": "/the-languages/css.html#sass"
  },"227": {
    "doc": "CSS, SCSS, SASS and LESS",
    "title": "LESS",
    "content": "Ovierview . ",
    "url": "http://localhost:4000/the-languages/css.html#less",
    "relUrl": "/the-languages/css.html#less"
  },"228": {
    "doc": "CSS, SCSS, SASS and LESS",
    "title": "PostCSS",
    "content": "Overview . ",
    "url": "http://localhost:4000/the-languages/css.html#postcss",
    "relUrl": "/the-languages/css.html#postcss"
  },"229": {
    "doc": "CSS, SCSS, SASS and LESS",
    "title": "CSS, SCSS, SASS and LESS",
    "content": ". | CSS . | Basic CSS | . | SCSS | SASS | LESS | PostCSS | . ",
    "url": "http://localhost:4000/the-languages/css.html",
    "relUrl": "/the-languages/css.html"
  },"230": {
    "doc": "Custom domain",
    "title": "Publishing on your own domain",
    "content": ". | Publishing on your own domain . | On the domain side | On Github Side | . | . You can publish your Jekyll site that you build in Github page to your own domain name. Here’s the two steps: . | On your domain side Zone Editor, add A records pointing to Github | On the Github side - add CNAME file and adjust the settings | . ",
    "url": "http://localhost:4000/Static/jekyll/custom-domain.html#publishing-on-your-own-domain",
    "relUrl": "/Static/jekyll/custom-domain.html#publishing-on-your-own-domain"
  },"231": {
    "doc": "Custom domain",
    "title": "On the domain side",
    "content": "Login to your Domain CPanel or client console and navigate to the Zone editors and add 4 A records with the following IPs: . 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 . See Github page for more details . Check it in your terminal with dig . dig YOURDOMAIN.COM.AU +noall +answer # It'll give you this list if they are setup correctly. YOURDOMAIN.COM.AU. 4122 IN A 185.199.108.153 YOURDOMAIN.COM.AU. 4122 IN A 185.199.111.153 YOURDOMAIN.COM.AU. 4122 IN A 185.199.109.153 YOURDOMAIN.COM.AU. 4122 IN A 103.208.219.11 YOURDOMAIN.COM.AU. 4122 IN A 185.199.110.153 . It may take a moment to settle these up. ",
    "url": "http://localhost:4000/Static/jekyll/custom-domain.html#on-the-domain-side",
    "relUrl": "/Static/jekyll/custom-domain.html#on-the-domain-side"
  },"232": {
    "doc": "Custom domain",
    "title": "On Github Side",
    "content": "Navigate to the Repository’s Settings and add the domain name above. ",
    "url": "http://localhost:4000/Static/jekyll/custom-domain.html#on-github-side",
    "relUrl": "/Static/jekyll/custom-domain.html#on-github-side"
  },"233": {
    "doc": "Custom domain",
    "title": "Custom domain",
    "content": " ",
    "url": "http://localhost:4000/Static/jekyll/custom-domain.html",
    "relUrl": "/Static/jekyll/custom-domain.html"
  },"234": {
    "doc": "Custom Modules",
    "title": "Drupal Custom Modules",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Drupal/custom-module.html#drupal-custom-modules",
    "relUrl": "/php-ramework/Drupal/custom-module.html#drupal-custom-modules"
  },"235": {
    "doc": "Custom Modules",
    "title": "Custom Modules",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Drupal/custom-module.html",
    "relUrl": "/php-ramework/Drupal/custom-module.html"
  },"236": {
    "doc": "Custom theme",
    "title": "Custom theme",
    "content": " ",
    "url": "http://localhost:4000/CMS/Wordpress/custom-theme.html",
    "relUrl": "/CMS/Wordpress/custom-theme.html"
  },"237": {
    "doc": "Custom theme",
    "title": "Drupal Custom Theme",
    "content": ". | info.yml file | Custom theme file structure | Folder structure | Steps to create custom theme (e.g. Bootstrap SASS) | . ",
    "url": "http://localhost:4000/php-ramework/Drupal/custom-theme.html#drupal-custom-theme",
    "relUrl": "/php-ramework/Drupal/custom-theme.html#drupal-custom-theme"
  },"238": {
    "doc": "Custom theme",
    "title": "info.yml file",
    "content": "Your theme name info.yml file will define the custom theme. This file should be located in your custom theme name folder. If your theme name is nasigoreng this hould be in /themes/custom/nasigoreng/nasigoreng.info.yml . Example of a .info.yml file . name: Nasi Goreng type: theme description: Spicy Nasi Goreng Theme core_version_requirement: ^8 || ^9 base theme: classy screenshot: nasigoreng.png libraries: - nasigoreng/ig-css - nasigoreng/quicksand - nasigoreng/normalize regions: header: Header highlighted: Highlighted help: Help content: Content sidebar_first: Left sidebar sidebar_second: Right sidebar front: Front page blocks footer: Footer page_top: Page top page_bottom: Page bottom . Following are the key value that are compulsory for the theme.info.yml Required: . | name (required) | type (required) | core (required, optional if you include core_version_requirement) | base theme (required in Drupal 9, optional for Drupal 8) | . Optional . | php (optional) | version (optional) | libraries (optional) | libraries-override (optional) | libraries-extend (optional) | hidden (optional) | engine (optional) | logo (optional) | screenshot (optional) | regions (optional) | regions_hidden (optional) | features (optional) | ckeditor_stylesheets (optional) | . ",
    "url": "http://localhost:4000/php-ramework/Drupal/custom-theme.html#infoyml-file",
    "relUrl": "/php-ramework/Drupal/custom-theme.html#infoyml-file"
  },"239": {
    "doc": "Custom theme",
    "title": "Custom theme file structure",
    "content": "|-core |-modules |-themes | |-bartik | |-seven .. |-modules |-themes |-contrib | |-zen | |-basic | |-bluemarine |-custom | |-nasigoreng . ",
    "url": "http://localhost:4000/php-ramework/Drupal/custom-theme.html#custom-theme-file-structure",
    "relUrl": "/php-ramework/Drupal/custom-theme.html#custom-theme-file-structure"
  },"240": {
    "doc": "Custom theme",
    "title": "Folder structure",
    "content": "The folder and file structure of the custom themes . |-nasigoreng.breakpoints.yml |-nasigoreng.info.yml |-nasigoreng.libraries.yml |-nasigoreng.theme |-config |-install |-nasigoreng.settings.yml |-schema |-nasigoreng.schema.yml |-css |-style.css |-js |-nasigoreng.js |-images |-buttons.png |-logo.svg |-screenshot.png |-templates |-maintenance-page.html.twig |-node.html.twig . ",
    "url": "http://localhost:4000/php-ramework/Drupal/custom-theme.html#folder-structure",
    "relUrl": "/php-ramework/Drupal/custom-theme.html#folder-structure"
  },"241": {
    "doc": "Custom theme",
    "title": "Steps to create custom theme (e.g. Bootstrap SASS)",
    "content": ". | Install the contributed theme as parent composer require drupal/bootstrap_barrio #as the parent . this will install the theme under */themes/contrib/ . | Install the starter kit composer require drupal/bootstrap_sass^[version] #installing the starter kit . | Navigate to the folder /themes/contrib/bootstrap_sass and run the npm install and gulp npm install --global gulp-cli #installing gulp-cli with NPM (ensure that you have installed the latest NPM) npm install #installing all the dependencies in the folder's package gulp . It’ll show you the progress: . ─ user@macpro ~/dev/drupal-project/app/themes/contrib/bootstrap_sass ╰─ gulp  ✔  6920  13:49:58 [13:50:07] Using gulpfile ~/dev/drupal-project/app/themes/contrib/bootstrap_sass/gulpfile.js [13:50:07] Starting 'default'... [13:50:07] Starting 'styles'... [13:50:10] Finished 'styles' after 3.48 s [13:50:10] Starting 'js'... [13:50:10] Starting 'serve'... [Browsersync] Proxying: https://0.0.0.0 [Browsersync] Access URLs: ------------------------------------- Local: https://localhost:3000 External: https://172.20.10.3:3000 ------------------------------------- UI: http://localhost:3001 UI External: http://localhost:3001 ------------------------------------- [Browsersync] 3 files changed (bootstrap.min.js, popper.min.js, barrio.js) [13:50:10] Finished 'js' after 140 ms [Browsersync] Reloading Browsers... (buffered 3 events) [13:51:28] Starting 'styles'... [Browsersync] Reloading Browsers... [Browsersync] 2 files changed (bootstrap.min.css, style.min.css) [13:51:32] Finished 'styles' after 3.89 s [13:56:32] Starting 'styles'... | Duplicate the starter kit folder Once it’s all running with SASS, create a custom theme with your own style undr *\\themes\\custom\\nasigoreng by copy pasting the starter kit folder above. Ensure to change the required filenmes and variables. | Customise the themplate pages in TWIG under /themes/custom/nasigoreng/template/ folder | . ",
    "url": "http://localhost:4000/php-ramework/Drupal/custom-theme.html#steps-to-create-custom-theme-eg-bootstrap-sass",
    "relUrl": "/php-ramework/Drupal/custom-theme.html#steps-to-create-custom-theme-eg-bootstrap-sass"
  },"242": {
    "doc": "Custom theme",
    "title": "Custom theme",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Drupal/custom-theme.html",
    "relUrl": "/php-ramework/Drupal/custom-theme.html"
  },"243": {
    "doc": "Database",
    "title": "Database",
    "content": " ",
    "url": "http://localhost:4000/the-basics/database.html",
    "relUrl": "/the-basics/database.html"
  },"244": {
    "doc": "Define a Redux Action",
    "title": "–description–",
    "content": "Since Redux is a state management framework, updating state is one of its core tasks. In Redux, all state updates are triggered by dispatching actions. An action is simply a JavaScript object that contains information about an action event that has occurred. The Redux store receives these action objects, then updates its state accordingly. Sometimes a Redux action also carries some data. For example, the action carries a username after a user logs in. While the data is optional, actions must carry a type property that specifies the ‘type’ of action that occurred. Think of Redux actions as messengers that deliver information about events happening in your app to the Redux store. The store then conducts the business of updating state based on the action that occurred. ",
    "url": "http://localhost:4000/js-libraries/redux/define-a-redux-action.html#description",
    "relUrl": "/js-libraries/redux/define-a-redux-action.html#description"
  },"245": {
    "doc": "Define a Redux Action",
    "title": "–instructions–",
    "content": "Writing a Redux action is as simple as declaring an object with a type property. Declare an object action and give it a property type set to the string 'LOGIN'. ",
    "url": "http://localhost:4000/js-libraries/redux/define-a-redux-action.html#instructions",
    "relUrl": "/js-libraries/redux/define-a-redux-action.html#instructions"
  },"246": {
    "doc": "Define a Redux Action",
    "title": "–hints–",
    "content": "An action object should exist. assert( (function () { return typeof action === 'object'; })() ); . The action object should have a key property type with value LOGIN. assert( (function () { return action.type === 'LOGIN'; })() ); . ",
    "url": "http://localhost:4000/js-libraries/redux/define-a-redux-action.html#hints",
    "relUrl": "/js-libraries/redux/define-a-redux-action.html#hints"
  },"247": {
    "doc": "Define a Redux Action",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/define-a-redux-action.html#seed",
    "relUrl": "/js-libraries/redux/define-a-redux-action.html#seed"
  },"248": {
    "doc": "Define a Redux Action",
    "title": "–seed-contents–",
    "content": "// Define an action here: . ",
    "url": "http://localhost:4000/js-libraries/redux/define-a-redux-action.html#seed-contents",
    "relUrl": "/js-libraries/redux/define-a-redux-action.html#seed-contents"
  },"249": {
    "doc": "Define a Redux Action",
    "title": "–solutions–",
    "content": "const action = { type: 'LOGIN' } . ",
    "url": "http://localhost:4000/js-libraries/redux/define-a-redux-action.html#solutions",
    "relUrl": "/js-libraries/redux/define-a-redux-action.html#solutions"
  },"250": {
    "doc": "Define a Redux Action",
    "title": "Define a Redux Action",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/define-a-redux-action.html",
    "relUrl": "/js-libraries/redux/define-a-redux-action.html"
  },"251": {
    "doc": "Define an Action Creator",
    "title": "–description–",
    "content": "After creating an action, the next step is sending the action to the Redux store so it can update its state. In Redux, you define action creators to accomplish this. An action creator is simply a JavaScript function that returns an action. In other words, action creators create objects that represent action events. ",
    "url": "http://localhost:4000/js-libraries/redux/define-an-action-creator.html#description",
    "relUrl": "/js-libraries/redux/define-an-action-creator.html#description"
  },"252": {
    "doc": "Define an Action Creator",
    "title": "–instructions–",
    "content": "Define a function named actionCreator() that returns the action object when called. ",
    "url": "http://localhost:4000/js-libraries/redux/define-an-action-creator.html#instructions",
    "relUrl": "/js-libraries/redux/define-an-action-creator.html#instructions"
  },"253": {
    "doc": "Define an Action Creator",
    "title": "–hints–",
    "content": "The function actionCreator should exist. assert(typeof actionCreator === 'function'); . Running the actionCreator function should return the action object. assert(typeof action === 'object'); . The returned action should have a key property type with value LOGIN. assert(action.type === 'LOGIN'); . ",
    "url": "http://localhost:4000/js-libraries/redux/define-an-action-creator.html#hints",
    "relUrl": "/js-libraries/redux/define-an-action-creator.html#hints"
  },"254": {
    "doc": "Define an Action Creator",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/define-an-action-creator.html#seed",
    "relUrl": "/js-libraries/redux/define-an-action-creator.html#seed"
  },"255": {
    "doc": "Define an Action Creator",
    "title": "–seed-contents–",
    "content": "const action = { type: 'LOGIN' } // Define an action creator here: . ",
    "url": "http://localhost:4000/js-libraries/redux/define-an-action-creator.html#seed-contents",
    "relUrl": "/js-libraries/redux/define-an-action-creator.html#seed-contents"
  },"256": {
    "doc": "Define an Action Creator",
    "title": "–solutions–",
    "content": "const action = { type: 'LOGIN' } const actionCreator = () =&gt; { return action; }; . ",
    "url": "http://localhost:4000/js-libraries/redux/define-an-action-creator.html#solutions",
    "relUrl": "/js-libraries/redux/define-an-action-creator.html#solutions"
  },"257": {
    "doc": "Define an Action Creator",
    "title": "Define an Action Creator",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/define-an-action-creator.html",
    "relUrl": "/js-libraries/redux/define-an-action-creator.html"
  },"258": {
    "doc": "Define an HTML class in JSX",
    "title": "Define an HTML class in JSX",
    "content": "Now that you’re getting comfortable writing JSX, you may be wondering how it differs from HTML. So far, it may seem that HTML and JSX are exactly the same. One key difference in JSX is that you can no longer use the word class to define HTML classes. This is because class is a reserved word in JavaScript. Instead, JSX uses className. In fact, the naming convention for all HTML attributes and event references in JSX become camelCase. For example, a click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange. While this is a subtle difference, it is an important one to keep in mind moving forward. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html"
  },"259": {
    "doc": "Define an HTML class in JSX",
    "title": "–instructions–",
    "content": "Apply a class of myDiv to the div provided in the JSX code. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html#instructions"
  },"260": {
    "doc": "Define an HTML class in JSX",
    "title": "–hints–",
    "content": "The constant JSX should return a div element. assert.strictEqual(JSX.type, 'div'); . The div should have a class of myDiv. assert.strictEqual(JSX.props.className, 'myDiv'); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html#hints"
  },"261": {
    "doc": "Define an HTML class in JSX",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html#seed"
  },"262": {
    "doc": "Define an HTML class in JSX",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(JSX, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html#after-user-code"
  },"263": {
    "doc": "Define an HTML class in JSX",
    "title": "–seed-contents–",
    "content": "const JSX = ( &lt;div&gt; &lt;h1&gt;Add a class to this div&lt;/h1&gt; &lt;/div&gt; ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html#seed-contents"
  },"264": {
    "doc": "Define an HTML class in JSX",
    "title": "–solutions–",
    "content": "const JSX = ( &lt;div className = 'myDiv'&gt; &lt;h1&gt;Add a class to this div&lt;/h1&gt; &lt;/div&gt;); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/define-an-html-class-in-jsx.html#solutions"
  },"265": {
    "doc": "Dispatch an Action Event",
    "title": "–description–",
    "content": "dispatch method is what you use to dispatch actions to the Redux store. Calling store.dispatch() and passing the value returned from an action creator sends an action back to the store. Recall that action creators return an object with a type property that specifies the type of action that has occurred. Then the method dispatches an action object to the Redux store. Based on the previous challenge’s example, the following lines are equivalent, and both dispatch the action of type LOGIN: . store.dispatch(actionCreator()); store.dispatch({ type: 'LOGIN' }); . ",
    "url": "http://localhost:4000/js-libraries/redux/dispatch-an-action-event.html#description",
    "relUrl": "/js-libraries/redux/dispatch-an-action-event.html#description"
  },"266": {
    "doc": "Dispatch an Action Event",
    "title": "–instructions–",
    "content": "The Redux store in the code editor has an initialized state that’s an object containing a login property currently set to false. There’s also an action creator called loginAction() which returns an action of type LOGIN. Dispatch the LOGIN action to the Redux store by calling the dispatch method, and pass in the action created by loginAction(). ",
    "url": "http://localhost:4000/js-libraries/redux/dispatch-an-action-event.html#instructions",
    "relUrl": "/js-libraries/redux/dispatch-an-action-event.html#instructions"
  },"267": {
    "doc": "Dispatch an Action Event",
    "title": "–hints–",
    "content": "Calling the function loginAction should return an object with type property set to the string LOGIN. assert(loginAction().type === 'LOGIN'); . The store should be initialized with an object with property login set to false. assert(store.getState().login === false); . The store.dispatch() method should be used to dispatch an action of type LOGIN. (getUserInput) =&gt; assert( (function () { let noWhiteSpace = getUserInput('index').replace(/\\s/g, ''); return ( noWhiteSpace.includes('store.dispatch(loginAction())') || noWhiteSpace.includes(\"store.dispatch({type: 'LOGIN'})\") === true ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/redux/dispatch-an-action-event.html#hints",
    "relUrl": "/js-libraries/redux/dispatch-an-action-event.html#hints"
  },"268": {
    "doc": "Dispatch an Action Event",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/dispatch-an-action-event.html#seed",
    "relUrl": "/js-libraries/redux/dispatch-an-action-event.html#seed"
  },"269": {
    "doc": "Dispatch an Action Event",
    "title": "–seed-contents–",
    "content": "const store = Redux.createStore( (state = {login: false}) =&gt; state ); const loginAction = () =&gt; { return { type: 'LOGIN' } }; // Dispatch the action here: . ",
    "url": "http://localhost:4000/js-libraries/redux/dispatch-an-action-event.html#seed-contents",
    "relUrl": "/js-libraries/redux/dispatch-an-action-event.html#seed-contents"
  },"270": {
    "doc": "Dispatch an Action Event",
    "title": "–solutions–",
    "content": "const store = Redux.createStore( (state = {login: false}) =&gt; state ); const loginAction = () =&gt; { return { type: 'LOGIN' } }; store.dispatch(loginAction()); . ",
    "url": "http://localhost:4000/js-libraries/redux/dispatch-an-action-event.html#solutions",
    "relUrl": "/js-libraries/redux/dispatch-an-action-event.html#solutions"
  },"271": {
    "doc": "Dispatch an Action Event",
    "title": "Dispatch an Action Event",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/dispatch-an-action-event.html",
    "relUrl": "/js-libraries/redux/dispatch-an-action-event.html"
  },"272": {
    "doc": "Docker issues",
    "title": "Some Docker issues I",
    "content": " ",
    "url": "http://localhost:4000/Docker/docker-issues.html#some-docker-issues-i",
    "relUrl": "/Docker/docker-issues.html#some-docker-issues-i"
  },"273": {
    "doc": "Docker issues",
    "title": "No space left on device",
    "content": "This issue showed up when I ran docker compose up after I updated the database from remote latest. One of the containers cried out: . nginx_1 : ...\"var/tmp/nginx/client_body\" failed (28: No space left on device) . It’s not the machine space but it’s Docker’s. Clean it by pruning the Docker containers: . With options: . docker system prune --all - all stopped containers - all networks not used by at least one container - all dangling images - all dangling build cache . To skip the prompt options: . docker system prune --all --force . This will clean up some space and should be good. ",
    "url": "http://localhost:4000/Docker/docker-issues.html#no-space-left-on-device",
    "relUrl": "/Docker/docker-issues.html#no-space-left-on-device"
  },"274": {
    "doc": "Docker issues",
    "title": "Docker issues",
    "content": " ",
    "url": "http://localhost:4000/Docker/docker-issues.html",
    "relUrl": "/Docker/docker-issues.html"
  },"275": {
    "doc": "Drush issues",
    "title": "Using PHP 8.X",
    "content": "I just updated my local PHP version into 8 and it seems that the PHP8/PHAR updater is abondened. Here’s what happened when I run drush status . Box Requirements Checker ======================== &gt; Using PHP 8.0.6 &gt; PHP is using the following php.ini file: /usr/local/etc/php/8.0/php.ini &gt; Checking Box requirements: ..E......... [ERROR] Your system is not ready to run the application. Fix the following mandatory requirements: ========================================= * The package \"padraic/humbug_get_contents\" requires the version \"^5.3 || ^7.0 || ^7.1 || ^7.2\" or greater. This issue was resolved by downloading the latest Drush launcher: . wget -O /usr/local/bin/drush https://github.com/drush-ops/drush-launcher/releases/latest/download/drush.phar \\ &amp;&amp; chmod +x /usr/local/bin/drush . ",
    "url": "http://localhost:4000/php-ramework/Drupal/drush-issues.html#using-php-8x",
    "relUrl": "/php-ramework/Drupal/drush-issues.html#using-php-8x"
  },"276": {
    "doc": "Drush issues",
    "title": "Using MAMP",
    "content": "When using MAMP, for some reason it failed to talk to the MySQL database if you leave the setting as default. Running just simply drush or drush --help is fine but when it’s using the database such as drush cr or drush pm ** it will result: . In Connection.php line 156: SQLSTATE[HY000] [2002] No such file or directory cache:rebuild [--cache-clear [CACHE-CLEAR]] [--no-cache-clear] [-h|--help] [-q|--quiet] [-v|vv|vvv|--verbose] [-V|--version] [--ansi] [--no-ansi] [-n|--no-interaction] [-d|--debug] [-y|--yes] [--no] [--remote-host REMOTE-HOST] [--remote-user REMOTE-USER] [-r|--root ROOT] [-l|--uri URI] [--simulate] [--pipe] [-D|--define DEFINE] [--notify [NOTIFY]] [--druplicon] [--xh-link XH-LINK] [--] &lt;command&gt; . Solution: . On ~/settings.php, change the . 'host' =&gt; 'localhost' . to . 'host' =&gt; '127.0.0.1', . And add the unix socket : . 'unix_socket' =&gt; '/Applications/MAMP/tmp/mysql/mysql.sock', . Happy drushing! . ",
    "url": "http://localhost:4000/php-ramework/Drupal/drush-issues.html#using-mamp",
    "relUrl": "/php-ramework/Drupal/drush-issues.html#using-mamp"
  },"277": {
    "doc": "Drush issues",
    "title": "Drush issues",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Drupal/drush-issues.html",
    "relUrl": "/php-ramework/Drupal/drush-issues.html"
  },"278": {
    "doc": "Drush",
    "title": "Drush",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Drupal/drush.html",
    "relUrl": "/php-ramework/Drupal/drush.html"
  },"279": {
    "doc": "Drush",
    "title": "What is drush?",
    "content": "It’s a command line shell and Unix interface for Drupal developers to make it easier to work on outside of browsers. The commands are interacting with code like modules/themes/profile and other command such as drush generate, drush sqlc cron and clean cache jobs etc. ",
    "url": "http://localhost:4000/php-ramework/Drupal/drush.html#what-is-drush",
    "relUrl": "/php-ramework/Drupal/drush.html#what-is-drush"
  },"280": {
    "doc": "Drush",
    "title": "Install Drush on root",
    "content": "Get a composer if you haven’t already . curl -sS https://getcomposer.org/installer | php . $mv composer.phar /usr/local/bin/composer . ln -s /usr/local/bin/composer /usr/bin/composer . Download drush from git repo . git clone https://github.com/drush-ops/drush.git /usr/local/src/drush . Get the latest one . cd /usr/local/src/drush git checkout master #for the latest one or whatever version you want . ln -s /usr/local/src/drush/drush /usr/bin/drush . composer install #if this results in error, run composer update to add the dependencies . Check the version . drush --version . Have fun with drush within the folder where you installed Drupal. ",
    "url": "http://localhost:4000/php-ramework/Drupal/drush.html#install-drush-on-root",
    "relUrl": "/php-ramework/Drupal/drush.html#install-drush-on-root"
  },"281": {
    "doc": "Emphasis",
    "title": "Emphasis",
    "content": "Makdown . **This is bold text** __This is bold text__ *This is italic text* _This is italic text_ We have **bold***italic* This text is ***really important*** This text is ___really important___ This text is __*really important*__ This text is **_really important_** . Rendered output . This is bold text This is bold text This is italic text This is italic text We have bolditalic This text is really important This text is really important This text is really important This text is really important . ",
    "url": "http://localhost:4000/Markdown/emphasis.html",
    "relUrl": "/Markdown/emphasis.html"
  },"282": {
    "doc": "Git errors and the solutions",
    "title": "Operation must be in a work tree",
    "content": "Error: . fatal: this operation must be run in a work tree . This error below happend when somehow the git is as a bare and no working tree. Run this and it will fix the issue . git config --unset core.bare . ",
    "url": "http://localhost:4000/Git/error-solution.html#operation-must-be-in-a-work-tree",
    "relUrl": "/Git/error-solution.html#operation-must-be-in-a-work-tree"
  },"283": {
    "doc": "Git errors and the solutions",
    "title": "Git errors and the solutions",
    "content": " ",
    "url": "http://localhost:4000/Git/error-solution.html",
    "relUrl": "/Git/error-solution.html"
  },"284": {
    "doc": "Extend Drupal",
    "title": "Extend Drupal",
    "content": "Drupal like other CMS or open source platform is so extendable with modules and themes available from the community. The Drupal community I found it is amazing and very supportive. ",
    "url": "http://localhost:4000/php-ramework/Drupal/extend.html",
    "relUrl": "/php-ramework/Drupal/extend.html"
  },"285": {
    "doc": "Extend Drupal",
    "title": "Installing module and theme with composer",
    "content": "To install Drupal module or theme with composer you can just simply run . composer require drupal/module_name . Example above is for a drupal project called module_name and in Drupal page it will be after /project/ folder: https://drupal.org/project/module_name . ",
    "url": "http://localhost:4000/php-ramework/Drupal/extend.html#installing-module-and-theme-with-composer",
    "relUrl": "/php-ramework/Drupal/extend.html#installing-module-and-theme-with-composer"
  },"286": {
    "doc": "Extend Drupal",
    "title": "Install module with composer require issues",
    "content": "Memory exceeding . Sometimes the composer as a memory limit issue, add the following command before the composer. php -d memory_limit=-1 `which composer` require drupal/module_name # instead of composer require drupal/module_name . ",
    "url": "http://localhost:4000/php-ramework/Drupal/extend.html#install-module-with-composer-require-issues",
    "relUrl": "/php-ramework/Drupal/extend.html#install-module-with-composer-require-issues"
  },"287": {
    "doc": "Front matter",
    "title": "Front matter",
    "content": "Front matter in Jekyll world is a snippet of YML file that is placed on top of the MD file between three dashes, that set the variables of the page. This can be used for: . | Layout | Title | Navigation structure | and other element defined by the theme | . Example of front mater for this page: . --- layout: default title: Front matter parent: Jekyll grand_parent: Static nav_order: 5 has_child: false has_toc: false --- . ",
    "url": "http://localhost:4000/Static/jekyll/front-matter.html",
    "relUrl": "/Static/jekyll/front-matter.html"
  },"288": {
    "doc": "Get State from the Redux Store",
    "title": "–description–",
    "content": "The Redux store object provides several methods that allow you to interact with it. For example, you can retrieve the current state held in the Redux store object with the getState() method. ",
    "url": "http://localhost:4000/js-libraries/redux/get-state-from-the-redux-store.html#description",
    "relUrl": "/js-libraries/redux/get-state-from-the-redux-store.html#description"
  },"289": {
    "doc": "Get State from the Redux Store",
    "title": "–instructions–",
    "content": "The code from the previous challenge is re-written more concisely in the code editor. Use store.getState() to retrieve the state from the store, and assign this to a new variable currentState. ",
    "url": "http://localhost:4000/js-libraries/redux/get-state-from-the-redux-store.html#instructions",
    "relUrl": "/js-libraries/redux/get-state-from-the-redux-store.html#instructions"
  },"290": {
    "doc": "Get State from the Redux Store",
    "title": "–hints–",
    "content": "The Redux store should have a value of 5 for the initial state. assert(store.getState() === 5); . A variable currentState should exist and should be assigned the current state of the Redux store. (getUserInput) =&gt; assert( currentState === 5 &amp;&amp; getUserInput('index').includes('store.getState()') ); . ",
    "url": "http://localhost:4000/js-libraries/redux/get-state-from-the-redux-store.html#hints",
    "relUrl": "/js-libraries/redux/get-state-from-the-redux-store.html#hints"
  },"291": {
    "doc": "Get State from the Redux Store",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/get-state-from-the-redux-store.html#seed",
    "relUrl": "/js-libraries/redux/get-state-from-the-redux-store.html#seed"
  },"292": {
    "doc": "Get State from the Redux Store",
    "title": "–seed-contents–",
    "content": "const store = Redux.createStore( (state = 5) =&gt; state ); // Change code below this line . ",
    "url": "http://localhost:4000/js-libraries/redux/get-state-from-the-redux-store.html#seed-contents",
    "relUrl": "/js-libraries/redux/get-state-from-the-redux-store.html#seed-contents"
  },"293": {
    "doc": "Get State from the Redux Store",
    "title": "–solutions–",
    "content": "const store = Redux.createStore( (state = 5) =&gt; state ); // Change code below this line const currentState = store.getState(); . ",
    "url": "http://localhost:4000/js-libraries/redux/get-state-from-the-redux-store.html#solutions",
    "relUrl": "/js-libraries/redux/get-state-from-the-redux-store.html#solutions"
  },"294": {
    "doc": "Get State from the Redux Store",
    "title": "Get State from the Redux Store",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/get-state-from-the-redux-store.html",
    "relUrl": "/js-libraries/redux/get-state-from-the-redux-store.html"
  },"295": {
    "doc": "Git init",
    "title": "Git Init",
    "content": ". | Adding existing project to collaborate (Github) | New repository on Github | . Inititating git workflow either for a new project or existing . ",
    "url": "http://localhost:4000/Git/git-init.html#git-init",
    "relUrl": "/Git/git-init.html#git-init"
  },"296": {
    "doc": "Git init",
    "title": "Adding existing project to collaborate (Github)",
    "content": ". | Create a new repository on Github, I’ll call my repository nasigoreng | Navigate to the working directory with command line and initialise Git: git init -b main . | Add the files in the local repostiory, this will stage them for the first commit: git add . | Then commit them git commit -m \"Initial commit\" . | Copy the URL of the repository you set on step 1. For example git@github.com:jamirawan/nasigoreng.git | Then go back to the terminal add git remote on the folder you just committed: git remote add origin git@github.com:jamirawan/nasigoreng.git #then check the remote: git remote -v #and it should be showing : origin https://github.com/jamirawan/nasigoreng.git (fetch) origin https://github.com/jamirawan/nasigoreng.git (push) . | Push your commits to the upstream origin then your branch: git push -u origin main . | . ",
    "url": "http://localhost:4000/Git/git-init.html#adding-existing-project-to-collaborate-github",
    "relUrl": "/Git/git-init.html#adding-existing-project-to-collaborate-github"
  },"297": {
    "doc": "Git init",
    "title": "New repository on Github",
    "content": "When you created a repository on Github, it comes with instruction below . Quick setup — if you’ve done this kind of thing before Get started by creating a new file or uploading an existing file. We recommend every repository include a README, LICENSE, and .gitignore. …or create a new repository on the command line . echo \"# iirawan\" &gt;&gt; README.md git init git add README.md git commit -m \"first commit\" git branch -M main git remote add origin git@github.com:iirawan/iirawan.git git push -u origin main . …or push an existing repository from the command line . git remote add origin git@github.com:iirawan/iirawan.git git branch -M main git push -u origin main . …or import code from another repository . You can initialize this repository with code from a Subversion, Mercurial, or TFS project. Import code . ",
    "url": "http://localhost:4000/Git/git-init.html#new-repository-on-github",
    "relUrl": "/Git/git-init.html#new-repository-on-github"
  },"298": {
    "doc": "Git init",
    "title": "Git init",
    "content": " ",
    "url": "http://localhost:4000/Git/git-init.html",
    "relUrl": "/Git/git-init.html"
  },"299": {
    "doc": "Give sibling elements a unique key attribute",
    "title": "Give sibling elements a unique key attribute",
    "content": "The last challenge showed how the map method is used to dynamically render a number of elements based on user input. However, there was an important piece missing from that example. When you create an array of elements, each one needs a key attribute set to a unique value. React uses these keys to keep track of which items are added, changed, or removed. This helps make the re-rendering process more efficient when the list is modified in any way. Note: Keys only need to be unique between sibling elements, they don’t need to be globally unique in your application. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html"
  },"300": {
    "doc": "Give sibling elements a unique key attribute",
    "title": "–instructions–",
    "content": "The code editor has an array with some front end frameworks and a stateless functional component named Frameworks(). Frameworks() needs to map the array to an unordered list, much like in the last challenge. Finish writing the map callback to return an li element for each framework in the frontEndFrameworks array. This time, make sure to give each li a key attribute, set to a unique value. The li elements should also contain text from frontEndFrameworks. Normally, you want to make the key something that uniquely identifies the element being rendered. As a last resort the array index may be used, but typically you should try to use a unique identification. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html#instructions"
  },"301": {
    "doc": "Give sibling elements a unique key attribute",
    "title": "–hints–",
    "content": "The Frameworks component should exist and render to the page. assert( Enzyme.mount(React.createElement(Frameworks)).find('Frameworks').length === 1 ); . Frameworks should render an h1 element. assert(Enzyme.mount(React.createElement(Frameworks)).find('h1').length === 1); . Frameworks should render a ul element. assert(Enzyme.mount(React.createElement(Frameworks)).find('ul').length === 1); . The ul tag should render 6 child li elements. assert( Enzyme.mount(React.createElement(Frameworks)).find('ul').children().length === 6 &amp;&amp; Enzyme.mount(React.createElement(Frameworks)) .find('ul') .childAt(0) .name() === 'li' &amp;&amp; Enzyme.mount(React.createElement(Frameworks)).find('li').length === 6 ); . Each list item element should have a unique key attribute. assert( (() =&gt; { const ul = Enzyme.mount(React.createElement(Frameworks)).find('ul'); const keys = new Set([ ul.childAt(0).key(), ul.childAt(1).key(), ul.childAt(2).key(), ul.childAt(3).key(), ul.childAt(4).key(), ul.childAt(5).key() ]); return keys.size === 6; })() ); . Each list item element should contain text from frontEndFrameworks. assert( (() =&gt; { const li = Enzyme.mount(React.createElement(Frameworks)) .find('ul') .children(); return [...Array(5)].every((_, i) =&gt; frontEndFrameworks.includes(li.at(i).text()) ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html#hints"
  },"302": {
    "doc": "Give sibling elements a unique key attribute",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html#seed"
  },"303": {
    "doc": "Give sibling elements a unique key attribute",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;Frameworks /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html#after-user-code"
  },"304": {
    "doc": "Give sibling elements a unique key attribute",
    "title": "–seed-contents–",
    "content": "const frontEndFrameworks = [ 'React', 'Angular', 'Ember', 'Knockout', 'Backbone', 'Vue' ]; function Frameworks() { const renderFrameworks = null; // Change this line return ( &lt;div&gt; &lt;h1&gt;Popular Front End JavaScript Frameworks&lt;/h1&gt; &lt;ul&gt; {renderFrameworks} &lt;/ul&gt; &lt;/div&gt; ); }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html#seed-contents"
  },"305": {
    "doc": "Give sibling elements a unique key attribute",
    "title": "–solutions–",
    "content": "const frontEndFrameworks = [ 'React', 'Angular', 'Ember', 'Knockout', 'Backbone', 'Vue' ]; function Frameworks() { const renderFrameworks = frontEndFrameworks.map((fw, i) =&gt; &lt;li key={i}&gt;{fw}&lt;/li&gt;); return ( &lt;div&gt; &lt;h1&gt;Popular Front End JavaScript Frameworks&lt;/h1&gt; &lt;ul&gt; {renderFrameworks} &lt;/ul&gt; &lt;/div&gt; ); }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/give-sibling-elements-a-unique-key-attribute.html#solutions"
  },"306": {
    "doc": "Setup Google Analytics",
    "title": "Set up Google Analytics tracking on Jekyll page",
    "content": "Depending on the theme you are using, it can be varies. Basically you need to add the GA tracking ID into the _config.yml then added into the &lt;head&gt;&lt;/head&gt; somewhere in the html file. I can not embed the code as it rendered in MD and confused the _config.yml file . ¯\\_(ツ)_/¯ . I’ll get back on that . ",
    "url": "http://localhost:4000/Static/jekyll/google-analytics.html#set-up-google-analytics-tracking-on-jekyll-page",
    "relUrl": "/Static/jekyll/google-analytics.html#set-up-google-analytics-tracking-on-jekyll-page"
  },"307": {
    "doc": "Setup Google Analytics",
    "title": "Setup Google Analytics",
    "content": " ",
    "url": "http://localhost:4000/Static/jekyll/google-analytics.html",
    "relUrl": "/Static/jekyll/google-analytics.html"
  },"308": {
    "doc": "GraphQL",
    "title": "GraphQL",
    "content": "GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API. It gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools. To learn about the GraphQL visit the documentation . ",
    "url": "http://localhost:4000/API/graphql.html",
    "relUrl": "/API/graphql.html"
  },"309": {
    "doc": "Grep",
    "title": "grep",
    "content": "grep let you search one or more input files for lines containing a match to a specified pattern. By default the outputs the matching lines. ",
    "url": "http://localhost:4000/osx-cli/grep.html#grep",
    "relUrl": "/osx-cli/grep.html#grep"
  },"310": {
    "doc": "Grep",
    "title": "Search in file",
    "content": "We can use grep to search term in file(s) . | Specify which file you wish to search. Use grep followed by the search term and file locetion,then it shoud be | . ├── Gatsby │   ├── README.md │   ├── building-site.md │   ├── install.md │   └── publish-netlify-cms.md ├── Hugo │   └── README.md ├── README.md └── jekyll ├── building-contents.md ├── configure.md ├── custom-domain.md ├── front-matter.md ├── google-analytics.md ├── install.md ├── publish-to-netlify.md ├── readme.md └── theme.md . For example searching for term gatsby in install.md file . $ grep gatsby install.md . If there’s gatsby words in the file, it will show the sentences with the term in them. ",
    "url": "http://localhost:4000/osx-cli/grep.html#search-in-file",
    "relUrl": "/osx-cli/grep.html#search-in-file"
  },"311": {
    "doc": "Grep",
    "title": "Grep",
    "content": " ",
    "url": "http://localhost:4000/osx-cli/grep.html",
    "relUrl": "/osx-cli/grep.html"
  },"312": {
    "doc": "Gulp",
    "title": "Gulp",
    "content": " ",
    "url": "http://localhost:4000/tools/gulp.html",
    "relUrl": "/tools/gulp.html"
  },"313": {
    "doc": "Handle an Action in the Store",
    "title": "–description–",
    "content": "After an action is created and dispatched, the Redux store needs to know how to respond to that action. This is the job of a reducer function. Reducers in Redux are responsible for the state modifications that take place in response to actions. A reducer takes state and action as arguments, and it always returns a new state. It is important to see that this is the only role of the reducer. It has no side effects — it never calls an API endpoint and it never has any hidden surprises. The reducer is simply a pure function that takes state and action, then returns new state. Another key principle in Redux is that state is read-only. In other words, the reducer function must always return a new copy of state and never modify state directly. Redux does not enforce state immutability, however, you are responsible for enforcing it in the code of your reducer functions. You’ll practice this in later challenges. ",
    "url": "http://localhost:4000/js-libraries/redux/handle-an-action-in-the-store.html#description",
    "relUrl": "/js-libraries/redux/handle-an-action-in-the-store.html#description"
  },"314": {
    "doc": "Handle an Action in the Store",
    "title": "–instructions–",
    "content": "The code editor has the previous example as well as the start of a reducer function for you. Fill in the body of the reducer function so that if it receives an action of type 'LOGIN' it returns a state object with login set to true. Otherwise, it returns the current state. Note that the current state and the dispatched action are passed to the reducer, so you can access the action’s type directly with action.type. ",
    "url": "http://localhost:4000/js-libraries/redux/handle-an-action-in-the-store.html#instructions",
    "relUrl": "/js-libraries/redux/handle-an-action-in-the-store.html#instructions"
  },"315": {
    "doc": "Handle an Action in the Store",
    "title": "–hints–",
    "content": "Calling the function loginAction should return an object with type property set to the string LOGIN. assert(loginAction().type === 'LOGIN'); . The store should be initialized with an object with property login set to false. assert(store.getState().login === false); . Dispatching loginAction should update the login property in the store state to true. assert( (function () { const initialState = store.getState(); store.dispatch(loginAction()); const afterState = store.getState(); return initialState.login === false &amp;&amp; afterState.login === true; })() ); . If the action is not of type LOGIN, the store should return the current state. assert( (function () { store.dispatch({ type: '__TEST__ACTION__' }); let afterTest = store.getState(); return typeof afterTest === 'object' &amp;&amp; afterTest.hasOwnProperty('login'); })() ); . ",
    "url": "http://localhost:4000/js-libraries/redux/handle-an-action-in-the-store.html#hints",
    "relUrl": "/js-libraries/redux/handle-an-action-in-the-store.html#hints"
  },"316": {
    "doc": "Handle an Action in the Store",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/handle-an-action-in-the-store.html#seed",
    "relUrl": "/js-libraries/redux/handle-an-action-in-the-store.html#seed"
  },"317": {
    "doc": "Handle an Action in the Store",
    "title": "–seed-contents–",
    "content": "const defaultState = { login: false }; const reducer = (state = defaultState, action) =&gt; { // Change code below this line // Change code above this line }; const store = Redux.createStore(reducer); const loginAction = () =&gt; { return { type: 'LOGIN' } }; . ",
    "url": "http://localhost:4000/js-libraries/redux/handle-an-action-in-the-store.html#seed-contents",
    "relUrl": "/js-libraries/redux/handle-an-action-in-the-store.html#seed-contents"
  },"318": {
    "doc": "Handle an Action in the Store",
    "title": "–solutions–",
    "content": "const defaultState = { login: false }; const reducer = (state = defaultState, action) =&gt; { if (action.type === 'LOGIN') { return {login: true} } else { return state } }; const store = Redux.createStore(reducer); const loginAction = () =&gt; { return { type: 'LOGIN' } }; . ",
    "url": "http://localhost:4000/js-libraries/redux/handle-an-action-in-the-store.html#solutions",
    "relUrl": "/js-libraries/redux/handle-an-action-in-the-store.html#solutions"
  },"319": {
    "doc": "Handle an Action in the Store",
    "title": "Handle an Action in the Store",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/handle-an-action-in-the-store.html",
    "relUrl": "/js-libraries/redux/handle-an-action-in-the-store.html"
  },"320": {
    "doc": "Headers",
    "title": "Headings",
    "content": "Makdown . # h1 Heading ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading . Output . ",
    "url": "http://localhost:4000/Markdown/headers.html#headings",
    "relUrl": "/Markdown/headers.html#headings"
  },"321": {
    "doc": "Headers",
    "title": "h1 Heading",
    "content": " ",
    "url": "http://localhost:4000/Markdown/headers.html#h1-heading",
    "relUrl": "/Markdown/headers.html#h1-heading"
  },"322": {
    "doc": "Headers",
    "title": "h2 Heading",
    "content": "h3 Heading . h4 Heading . h5 Heading . h6 Heading . ",
    "url": "http://localhost:4000/Markdown/headers.html#h2-heading",
    "relUrl": "/Markdown/headers.html#h2-heading"
  },"323": {
    "doc": "Headers",
    "title": "Headers",
    "content": " ",
    "url": "http://localhost:4000/Markdown/headers.html",
    "relUrl": "/Markdown/headers.html"
  },"324": {
    "doc": "HTML and DOM",
    "title": "HTML and DOM",
    "content": "*Understanding HTML and DOM Understanding the main parts of an HTML document, knowing when to use each of the main semantic elements, what the DOM is, and use development tools built-in to certain browsers. ",
    "url": "http://localhost:4000/the-basics/html-dom.html",
    "relUrl": "/the-basics/html-dom.html"
  },"325": {
    "doc": "HTML 5",
    "title": "HTML 5",
    "content": ". | Basic tags | Style and Semantics | Lists | Media (Images, Video and Audio) . | Image | Video and audio | . | Forms and input | Frames | Tables | Programming | Formattings | What is HTML DOM? | . Following are the list of tags you will need to be friendly with. Some of the tags may no longer supported by HTML 5. ",
    "url": "http://localhost:4000/the-languages/html5.html",
    "relUrl": "/the-languages/html5.html"
  },"326": {
    "doc": "HTML 5",
    "title": "Basic tags",
    "content": "Tags: . | a Comment out The &lt;!-- Comment about your code --&gt; is to put some note on your code. | the document type: &lt;!DOCTYPE html&gt; . | an HTML Document &lt;html&gt; &lt;/html&gt; . | Contains metadata information for the document &lt;meta&gt;&lt;/meta&gt; . | a title for the document &lt;title&gt;&lt;/title&gt; . | the documents body &lt;body&gt;&lt;/body&gt; . | HTML Headings, from heading 1 - 6 &lt;h1&gt;&lt;/h1&gt; - &lt;h6&gt;&lt;/h6&gt; . | a Paragraph &lt;p&gt;&lt;/p&gt; . | Inserts a single line break &lt;br&gt; . | a thematic change in the content with horizontal line &lt;hr&gt;&lt;/hr&gt; . | a hyperlink &lt;a&gt;&lt;/a&gt; . | the relationship between a document and an external resource (mostly used to link to a style sheet) - &lt;link&gt;&lt;/link&gt; . | metadata about an HTML Document &lt;meta&gt;&lt;/meta&gt; . | style information for a document &lt;style&gt;&lt;/style&gt; . | . Back to top . ",
    "url": "http://localhost:4000/the-languages/html5.html#basic-tags",
    "relUrl": "/the-languages/html5.html#basic-tags"
  },"327": {
    "doc": "HTML 5",
    "title": "Style and Semantics",
    "content": "Tags: . | a section in a document . | a header for the document or section . | navigation links . | Specifies the main content of a document . | a section in a document . | an article . | content aside from the page content . | additional details that the user can view or hide . | a dialog box or window . | a visible heading for a &lt;details&gt; element . | Adds a machine-readable translation of a given content . | a footer for a document or section . | . Back to top . ",
    "url": "http://localhost:4000/the-languages/html5.html#style-and-semantics",
    "relUrl": "/the-languages/html5.html#style-and-semantics"
  },"328": {
    "doc": "HTML 5",
    "title": "Lists",
    "content": "Tags: . | unordered list . | ordered list . | list item . | directory list . | description list . | term name in a description list . | description of a term name in a description list . | . Back to top . ",
    "url": "http://localhost:4000/the-languages/html5.html#lists",
    "relUrl": "/the-languages/html5.html#lists"
  },"329": {
    "doc": "HTML 5",
    "title": "Media (Images, Video and Audio)",
    "content": "Tags . Image . | client-side image map . | area inside an image map . | Used to draw graphics, on the fly, via scripting (JavaScript) . | caption for a &lt;figure&gt; element . | Specifies self-contained content . | container for multiple image resources . | container for SVG graphics . | . Back to top . Video and audio . Tags . | sound content . | multiple media resources for media elements &lt;video&gt;, &lt;audio&gt; and &lt;picture&gt; . | text tracks for media elements &lt;video&gt; and &lt;audio&gt; . | a video or movie . | . Back to top . ",
    "url": "http://localhost:4000/the-languages/html5.html#media-images-video-and-audio",
    "relUrl": "/the-languages/html5.html#media-images-video-and-audio"
  },"330": {
    "doc": "HTML 5",
    "title": "Forms and input",
    "content": "Tags: . | HTML form for user input . | input control . | multiline input control (text area) . | clickable button . | drop-down list . | group of related options in a drop-down list . | option in a drop-down list . | label for an &lt;input&gt; element . | Groups related elements in a form . | caption for a &lt;fieldset&gt; element . | Specifies a list of pre-defined options for input controls . | the result of a calculation . | . Back to top . ",
    "url": "http://localhost:4000/the-languages/html5.html#forms-and-input",
    "relUrl": "/the-languages/html5.html#forms-and-input"
  },"331": {
    "doc": "HTML 5",
    "title": "Frames",
    "content": "Tags . | window (a frame) in a frameset . | set of frames . | alternate content for users that do not support frames . | inline frame . | . Back to top . ",
    "url": "http://localhost:4000/the-languages/html5.html#frames",
    "relUrl": "/the-languages/html5.html#frames"
  },"332": {
    "doc": "HTML 5",
    "title": "Tables",
    "content": "Tags . | table . | table caption . | header cell in a table . | row in a table . | cell in a table . | Groups the header content in a table . | Groups the body content in a table . | Groups the footer content in a table . | Specifies column properties for each column within a &lt;colgroup&gt;element . | Specifies a group of one or more columns in a table for formatting . | . Back to top . ",
    "url": "http://localhost:4000/the-languages/html5.html#tables",
    "relUrl": "/the-languages/html5.html#tables"
  },"333": {
    "doc": "HTML 5",
    "title": "Programming",
    "content": "Tags: . | client-side script &lt;script&gt;&lt;/script&gt; . | alternate content for user that do not support client-side scripts . | container for an external (non-HTML) application . | embedded object . | parameter for an object . | . Back to top . ",
    "url": "http://localhost:4000/the-languages/html5.html#programming",
    "relUrl": "/the-languages/html5.html#programming"
  },"334": {
    "doc": "HTML 5",
    "title": "Formattings",
    "content": "Text formatting tags: . | an acronym . | an abbreviation or an acronym . | contact information for the author/owner of a document/article . | bold text . | Isolates a part of text that might be formatted in a different direction from other text outside it . | Overrides the currect text direction . | big text . | a section that is quoted from another source . | centered text . | the title of a work . | a piece of computer code . | text that has been deleted from a document . | Specifies a term that is going to be defined within the content . | emphasized text . | font, color, and size for text . | a part of text in an alternate voice or mood . | a text that has been inserted into a document . | keyboard input . | marked/highlighted text . | a scalar measurement within a known range (a gauge) . | preformatted text . | Represents the progress of a task . | a short quotation . | what to show in browsers that do not support ruby annotations . | an explanation/pronunciation of characters (for East Asian typography) . | a ruby annotation (for East Asian typography) . | text that is no longer correct . | sample output from a computer program . | smaller text . | strikethrough text . | important text . | subscripted text . | superscripted text . | a container for content that should be hidden when the page loads . | a specific time (or datetime) . | teletype text . | a variable . | . Back to top . ",
    "url": "http://localhost:4000/the-languages/html5.html#formattings",
    "relUrl": "/the-languages/html5.html#formattings"
  },"335": {
    "doc": "HTML 5",
    "title": "What is HTML DOM?",
    "content": " ",
    "url": "http://localhost:4000/the-languages/html5.html#what-is-html-dom",
    "relUrl": "/the-languages/html5.html#what-is-html-dom"
  },"336": {
    "doc": "Images",
    "title": "Images",
    "content": "To insert image in markdown, it’s like linking to source img with exlamation mark at the front. Exlamation mark + text in square bracket + link to image in round bracket. Makdown . ![Irawan's Image](https://irawan.io/og/irawan-io.png) . Rendered output . ",
    "url": "http://localhost:4000/Markdown/images.html",
    "relUrl": "/Markdown/images.html"
  },"337": {
    "doc": "Install Gatsby",
    "title": "Install on your local with NPM",
    "content": "Ensure that the npm on your machine is up to date . npm update graceful-fs@latest ╭───────────────────────────────────────────────────────────────╮ │ │ │ New major version of npm available! 6.14.11 → 7.5.6 │ │ Changelog: https://github.com/npm/cli/releases/tag/v7.5.6 │ │ Run npm install -g npm to update! │ │ │ ╰───────────────────────────────────────────────────────────────╯ npm install -g npm . Then install the gatsby-cli . npm install -g gatsby-cli . Then start installing and developing gatsby with starter packages that can be found on this page which is like templates for your website. For example this one called Gatsby Starter Blog, start with gatsby new followed with the name of your project/folder e.g. blog then the Github URL of the source https://github.com/gatsbyjs/gatsby-starter-blog to install: . gatsby new blog https://github.com/gatsbyjs/gatsby-starter-blog . This will clone the repo and install Gatsby packages. info Your new Gatsby site has been successfully bootstrapped. Start developing it by running: cd blog # --&gt; get in to the folder you setup above gatsby develop # --&gt; starting the gatsby engine . This will start the engine and it will give you the local URL address: . You can now view gatsby-starter-blog in the browser. ⠀ http://localhost:8000/ . Open http://localhost:8000/ in your favorite browser . ",
    "url": "http://localhost:4000/Static/Gatsby/install.html#install-on-your-local-with-npm",
    "relUrl": "/Static/Gatsby/install.html#install-on-your-local-with-npm"
  },"338": {
    "doc": "Install Gatsby",
    "title": "Install Gatsby",
    "content": " ",
    "url": "http://localhost:4000/Static/Gatsby/install.html",
    "relUrl": "/Static/Gatsby/install.html"
  },"339": {
    "doc": "Install Laravel",
    "title": "Installation",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Laravel/install.html#installation",
    "relUrl": "/php-ramework/Laravel/install.html#installation"
  },"340": {
    "doc": "Install Laravel",
    "title": "On Mac",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Laravel/install.html#on-mac",
    "relUrl": "/php-ramework/Laravel/install.html#on-mac"
  },"341": {
    "doc": "Install Laravel",
    "title": "Install",
    "content": "Install With curl . As long as you have Docker in your Mac you can run simple CURL command to start creating project. web-app is an example of your project URL you can customise: . curl -s https://laravel.build/web-app | bash . Install with Composer . composer create-project laravel/laravel # or with Laravel Installer web-app composer global require laravel/installer laravel new web-app # then go to the web-ap folder cd web-app php artisan serve . ",
    "url": "http://localhost:4000/php-ramework/Laravel/install.html#install",
    "relUrl": "/php-ramework/Laravel/install.html#install"
  },"342": {
    "doc": "Install Laravel",
    "title": "Sail up!",
    "content": "Go to the directory cd web-app after the installation done and we can start running the Laravel Sail that providfe a simple CLI for interacting with Laravel’s default Docker configuration: . docker-compose up -d #or ./vendor/bin/sail up -d . With alias setup: sail up -d (refer to ‘Sail’ section for alias setup) . Ensure that the port you are using, by default it’s :80, is not in use by other Docker containers. If it’s already used and the following error came up, you can change the port number or kill other containers first: . Check who uses port (number) . Run this to check who’s using the port number you wish to list: . sudo lsof -i -P -n | grep &lt;port number&gt; . Change port . ERROR: for mailhog Cannot start service mailhog: driver failed programming external connectivity on endpoint web-app_mailhog_1 (ae8085daf269cf4a0f7eae07927d10a0975d5ae3a082659314663956afce36c1): Error starting userland proxy: listen tcp4 0.0.0.0:8025: bind: address already in use ERROR: for laravel.test Cannot start service laravel.test: Ports are not available: listen tcp 0.0.0.0:80: bind: address already in use . You can change the port number Change to other ports by editing the docker-compose.yml file: . ports: - \"8084:80\" . And try to use port 8084 instaed http://localhost:8084 . Stop and remove containers . docker-compose down # Stop container on current dir if there is a docker-compose.yml . And then run the up the sail again: ./vendor/bin/sail up or sail up -d if you have your alias setup. This may take a few minutes but you’ll see this line where you can check your web app: . laravel.test_1 | Starting Laravel development server: http://0.0.0.0:80 . So your project web local web app is: http://0.0.0.0:80 or just localhost . ",
    "url": "http://localhost:4000/php-ramework/Laravel/install.html#sail-up",
    "relUrl": "/php-ramework/Laravel/install.html#sail-up"
  },"343": {
    "doc": "Install Laravel",
    "title": "Install Laravel",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Laravel/install.html",
    "relUrl": "/php-ramework/Laravel/install.html"
  },"344": {
    "doc": "Install Jekyll",
    "title": "Install",
    "content": ". | Installing on MacOS . | Install Ruby | Install Jekyll | Create a new Jekyll site | . | Install Jekyll on anything other than Mac OS | . ",
    "url": "http://localhost:4000/Static/jekyll/install.html#install",
    "relUrl": "/Static/jekyll/install.html#install"
  },"345": {
    "doc": "Install Jekyll",
    "title": "Installing on MacOS",
    "content": "Install Ruby . Ensure you install Ruby, not the ruby from the Apple default install. It will give you this error: . ERROR: While executing gem ... (Gem::FilePermissionError) You don't have write permissions for the /Library/Ruby/Gems/2.6.0 directory. Use Homebrew to install latest Ruby. If you haven’t had Homebrew installed: . /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" . Then install Ruby . brew install ruby . Add Ruby path on your terminal: . # If you're using Zsh echo 'export PATH=\"/usr/local/opt/ruby/bin:/usr/local/lib/ruby/gems/X.X.X/bin:$PATH\"' &gt;&gt; ~/.zshrc # If you're using Bash echo 'export PATH=\"/usr/local/opt/ruby/bin:/usr/local/lib/ruby/gems/X.X.X/bin:$PATH\"' &gt;&gt; ~/.bash_profile # Unsure which shell you are using? Type echo $SHELL . Refresh your shell . source ~/.zshrc # or source ~/.bash_profile . check the path and you shoud see anything other than: /usr/local/bin/ruby and check the version and it should be the latest: . which ruby . Mine would be: . /usr/local/opt/ruby/bin/ruby . Check ruby version . ruby -v . Install Jekyll . Install the Bundler: . gem install --user-install bundler jekyll . Create a new Jekyll site . Once the Jekyll is installed, you can start creating the site e.g in /blog folder: . jekyll new blog . In an indeal world you can just login to the new folder blog where the Jekyll install is and run bundle exec jekyll serve and will show you all details of configuration including the server you can go to in local. But since the following libraries are no longer bundled gems or standard libraries including webrick, this message will appear: . /usr/local/lib/ruby/gems/3.0.0/gems/jekyll-4.2.0/lib/jekyll/commands/serve/servlet.rb:3:in `require': cannot load such file -- webrick (LoadError) . Then you need to run bundle add webrick providing you have bundle installed. This should let you run the bundle exec jekyll serve and the following message will appear: . Configuration file: /Users/irawan/dev/others/bloog/_config.yml Source: /Users/irawan/dev/others/bloog Destination: /Users/irawan/dev/others/bloog/_site Incremental build: disabled. Enable with --incremental Generating... Jekyll Feed: Generating feed for posts done in 0.465 seconds. Auto-regeneration: enabled for '/Users/irawan/dev/others/bloog' Server address: http://127.0.0.1:4000/ Server running... press ctrl-c to stop. Where Server address: http://127.0.0.1:4000/ is your localhost address of your Jeckyll site. Once you . If you have an issue with missing gems, e.g: . Could not find commonmarker-0.17.13 in any of the sources . You will need to install the bundle and this will resolve the issue: . bundle install . ",
    "url": "http://localhost:4000/Static/jekyll/install.html#installing-on-macos",
    "relUrl": "/Static/jekyll/install.html#installing-on-macos"
  },"346": {
    "doc": "Install Jekyll",
    "title": "Install Jekyll on anything other than Mac OS",
    "content": "Please rever to Jekyll installation on other OS . ",
    "url": "http://localhost:4000/Static/jekyll/install.html#install-jekyll-on-anything-other-than-mac-os",
    "relUrl": "/Static/jekyll/install.html#install-jekyll-on-anything-other-than-mac-os"
  },"347": {
    "doc": "Install Jekyll",
    "title": "Install Jekyll",
    "content": " ",
    "url": "http://localhost:4000/Static/jekyll/install.html",
    "relUrl": "/Static/jekyll/install.html"
  },"348": {
    "doc": "Access props using `this.props`",
    "title": "–description–",
    "content": "There are other complex concepts that add powerful capabilities to your React code. But you may be wondering about the more simple problem of how to style those JSX elements you create in React. You likely know that it won’t be exactly the same as working with HTML because of the way you apply classes to JSX elements. If you import styles from a stylesheet, it isn’t much different at all. You apply a class to your JSX element using the className attribute, and apply styles to the class in your stylesheet. Another option is to apply inline styles, which are very common in ReactJS development. You apply inline styles to JSX elements similar to how you do it in HTML, but with a few JSX differences. Here’s an example of an inline style in HTML: . &lt;div style=\"color: yellow; font-size: 16px\"&gt;Mellow Yellow&lt;/div&gt; . JSX elements use the style attribute, but because of the way JSX is transpiled, you can’t set the value to a string. Instead, you set it equal to a JavaScript object. Here’s an example: . &lt;div style=&gt;Mellow Yellow&lt;/div&gt; . Notice how we camelCase the fontSize property? This is because React will not accept kebab-case keys in the style object. React will apply the correct property name for us in the HTML. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#description"
  },"349": {
    "doc": "Access props using `this.props`",
    "title": "–instructions–",
    "content": "Add a style attribute to the div in the code editor to give the text a color of red and font size of 72px. Note that you can optionally set the font size to be a number, omitting the units px, or write it as \"72px\". ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#instructions"
  },"350": {
    "doc": "Access props using `this.props`",
    "title": "–hints–",
    "content": "The component should render a div element. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(Colorful)); return mockedComponent.children().type() === 'div'; })() ); . The div element should have a color of red. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(Colorful)); return mockedComponent.children().props().style.color === 'red'; })() ); . The div element should have a font size of 72px. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(Colorful)); return ( mockedComponent.children().props().style.fontSize === 72 || mockedComponent.children().props().style.fontSize === '72' || mockedComponent.children().props().style.fontSize === '72px' ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#hints"
  },"351": {
    "doc": "Access props using `this.props`",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#seed"
  },"352": {
    "doc": "Access props using `this.props`",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;Colorful /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#after-user-code"
  },"353": {
    "doc": "Access props using `this.props`",
    "title": "–seed-contents–",
    "content": "class Colorful extends React.Component { render() { return ( &lt;div&gt;Big Red&lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#seed-contents"
  },"354": {
    "doc": "Access props using `this.props`",
    "title": "–solutions–",
    "content": "class Colorful extends React.Component { render() { return ( &lt;div style=&gt;Big Red&lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html#solutions"
  },"355": {
    "doc": "Access props using `this.props`",
    "title": "Access props using `this.props`",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/introducing-inline-styles.html"
  },"356": {
    "doc": "Javascript",
    "title": "Javascript",
    "content": ". | Jaascript basic | ES6 | JS Reguar expression (regex) | . ",
    "url": "http://localhost:4000/the-languages/javascript.html",
    "relUrl": "/the-languages/javascript.html"
  },"357": {
    "doc": "Javascript",
    "title": "Jaascript basic",
    "content": "See this documentation . ",
    "url": "http://localhost:4000/the-languages/javascript.html#jaascript-basic",
    "relUrl": "/the-languages/javascript.html#jaascript-basic"
  },"358": {
    "doc": "Javascript",
    "title": "ES6",
    "content": "ES5 is a kind of Javascript version to adjust with the standard browser behaviour. It was released in 2015, added many powerful new features to the language. In this course, you’ll learn these new features, including arrow functions, destructuring, classes, promises, and modules. | let | const | object.freeze | =&gt; function | =&gt; with parameters | Default parameters | (…args) rest parameter | Spread operator -&gt; evaluate arrays in place | Destructuring assignment -&gt; extract values from object | Destructuring assignment -&gt; assign var from objects | Destructuring assignment -&gt; assign var from nested objects | Destructuring assignment -&gt; assign var from arrays | Destructuring assignments with rest parameter to reassign array elements | Destructuring assignments to pass an object as a function parameter | Template literal | Getters and setters | script type=\"module\" | export to share codeblock | import | export default | Promise =&gt; (resolve, reject) | then | catch | . ",
    "url": "http://localhost:4000/the-languages/javascript.html#es6",
    "relUrl": "/the-languages/javascript.html#es6"
  },"359": {
    "doc": "Javascript",
    "title": "JS Reguar expression (regex)",
    "content": ". | using .test | . ",
    "url": "http://localhost:4000/the-languages/javascript.html#js-reguar-expression-regex",
    "relUrl": "/the-languages/javascript.html#js-reguar-expression-regex"
  },"360": {
    "doc": "kramdown",
    "title": "kramdown",
    "content": "It’s a Ruby library that converts supersets of Markdown. ",
    "url": "http://localhost:4000/Markdown/kramdown.html",
    "relUrl": "/Markdown/kramdown.html"
  },"361": {
    "doc": "LAMP",
    "title": "LAMP (Linux, Apache, MySQL and PHP)",
    "content": " ",
    "url": "http://localhost:4000/the-basics/lamp.html#lamp-linux-apache-mysql-and-php",
    "relUrl": "/the-basics/lamp.html#lamp-linux-apache-mysql-and-php"
  },"362": {
    "doc": "LAMP",
    "title": "LAMP",
    "content": " ",
    "url": "http://localhost:4000/the-basics/lamp.html",
    "relUrl": "/the-basics/lamp.html"
  },"363": {
    "doc": "Access props using `this.props`",
    "title": "–description–",
    "content": "So far, you’ve seen how JSX differs from HTML in a key way with the use of className vs. class for defining HTML classes. Another important way in which JSX differs from HTML is in the idea of the self-closing tag. In HTML, almost all tags have both an opening and closing tag: &lt;div&gt;&lt;/div&gt;; the closing tag always has a forward slash before the tag name that you are closing. However, there are special instances in HTML called “self-closing tags”, or tags that don’t require both an opening and closing tag before another tag can start. For example the line-break tag can be written as &lt;br&gt; or as &lt;br /&gt;, but should never be written as &lt;br&gt;&lt;/br&gt;, since it doesn’t contain any content. In JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed. The line-break tag, for example, must always be written as &lt;br /&gt; in order to be valid JSX that can be transpiled. A &lt;div&gt;, on the other hand, can be written as &lt;div /&gt; or &lt;div&gt;&lt;/div&gt;. The difference is that in the first syntax version there is no way to include anything in the &lt;div /&gt;. You will see in later challenges that this syntax is useful when rendering React components. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#description"
  },"364": {
    "doc": "Access props using `this.props`",
    "title": "–instructions–",
    "content": "Fix the errors in the code editor so that it is valid JSX and successfully transpiles. Make sure you don’t change any of the content - you only need to close tags where they are needed. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#instructions"
  },"365": {
    "doc": "Access props using `this.props`",
    "title": "–hints–",
    "content": "The constant JSX should return a div element. assert.strictEqual(JSX.type, 'div'); . The div should contain a br tag. assert(Enzyme.shallow(JSX).find('br').length === 1); . The div should contain an hr tag. assert(Enzyme.shallow(JSX).find('hr').length === 1); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#hints"
  },"366": {
    "doc": "Access props using `this.props`",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#seed"
  },"367": {
    "doc": "Access props using `this.props`",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(JSX, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#after-user-code"
  },"368": {
    "doc": "Access props using `this.props`",
    "title": "–seed-contents–",
    "content": "const JSX = ( &lt;div&gt; &lt;h2&gt;Welcome to React!&lt;/h2&gt; &lt;br &gt; &lt;p&gt;Be sure to close all tags!&lt;/p&gt; &lt;hr &gt; &lt;/div&gt; ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#seed-contents"
  },"369": {
    "doc": "Access props using `this.props`",
    "title": "–solutions–",
    "content": "const JSX = ( &lt;div&gt; &lt;h2&gt;Welcome to React!&lt;/h2&gt; &lt;br /&gt; &lt;p&gt;Be sure to close all tags!&lt;/p&gt; &lt;hr /&gt; &lt;/div&gt; ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html#solutions"
  },"370": {
    "doc": "Access props using `this.props`",
    "title": "Access props using `this.props`",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/learn-about-self-closing-jsx-tags.html"
  },"371": {
    "doc": "Line breaks",
    "title": "Line Break",
    "content": "Notes: . | To create a line break, end a line with two or more spaces, and then type return | Or use the &lt;br&gt; HTML tag | . Markdown . This is the first line. And this is the second line. On browser: . This is the first line. And this is the second line. Alternative Makdown . First line with the HTML tag after.&lt;br&gt; And the next line. Rendered output . First line with the HTML tag after. And the next line. ",
    "url": "http://localhost:4000/Markdown/linebreaks.html#line-break",
    "relUrl": "/Markdown/linebreaks.html#line-break"
  },"372": {
    "doc": "Line breaks",
    "title": "Line breaks",
    "content": " ",
    "url": "http://localhost:4000/Markdown/linebreaks.html",
    "relUrl": "/Markdown/linebreaks.html"
  },"373": {
    "doc": "Links",
    "title": "Links",
    "content": ". | Externarl links . | Directly put link on the address with &lt;&gt; | . | Internal link within Jekyll pages | Buttons | Prevent automated linking or skip linking | Add emphasize/anchored link | Reference in text | . To link text in markdown, just insert the linked tex in square bracket followed with round bracket of the URL, no space. ",
    "url": "http://localhost:4000/Markdown/links.html",
    "relUrl": "/Markdown/links.html"
  },"374": {
    "doc": "Links",
    "title": "Externarl links",
    "content": "Markdown . This is [linked text](https://irawan.io) &lt;br&gt; This is [link with title](https://irawan.io \"Irawan's site\") . Rendered output . This is linked text This is link with title . Directly put link on the address with &lt;&gt; . Markdown . &lt;https://www.irawan.io&gt; &lt;me@irawan.io&gt; . Output . https://www.irawan.io me@irawan.io . ",
    "url": "http://localhost:4000/Markdown/links.html#externarl-links",
    "relUrl": "/Markdown/links.html#externarl-links"
  },"375": {
    "doc": "Links",
    "title": "Internal link within Jekyll pages",
    "content": "There are many ways of doing this but here’s the simplest I choose with link tags: . Markdown: [Link text to Docker](/Docker/) . Output . Link text to Docker . ",
    "url": "http://localhost:4000/Markdown/links.html#internal-link-within-jekyll-pages",
    "relUrl": "/Markdown/links.html#internal-link-within-jekyll-pages"
  },"376": {
    "doc": "Links",
    "title": "Buttons",
    "content": "Button in MD is similar to links but add {: .btn} at the end . Markdown . [Link button to my page](https://irawan.io){: .btn} . Output . Link button to my page . ",
    "url": "http://localhost:4000/Markdown/links.html#buttons",
    "relUrl": "/Markdown/links.html#buttons"
  },"377": {
    "doc": "Links",
    "title": "Prevent automated linking or skip linking",
    "content": "Markdown . `https://www.irawan.io` . Output . https://www.irawan.io . ",
    "url": "http://localhost:4000/Markdown/links.html#prevent-automated-linking-or-skip-linking",
    "relUrl": "/Markdown/links.html#prevent-automated-linking-or-skip-linking"
  },"378": {
    "doc": "Links",
    "title": "Add emphasize/anchored link",
    "content": "Markdown . This is the *[Irawan's site](https://www.irawan.io)*. See the section on [top of the page](#). Output . This is the Irawan’s site. See the section on top of the page. ",
    "url": "http://localhost:4000/Markdown/links.html#add-emphasizeanchored-link",
    "relUrl": "/Markdown/links.html#add-emphasizeanchored-link"
  },"379": {
    "doc": "Links",
    "title": "Reference in text",
    "content": "Markdown . It was a [nasi-goreng][ng], and that means comfort. [ng]: &lt;https://en.wikipedia.org/wiki/Nasi_goreng&gt; \"Nasi Goreng\" . Output . It was a nasi goreng, a delicious Indonesian food. ",
    "url": "http://localhost:4000/Markdown/links.html#reference-in-text",
    "relUrl": "/Markdown/links.html#reference-in-text"
  },"380": {
    "doc": "Lists",
    "title": "Lists",
    "content": ". | Unordered | Ordered | Elements in Lists | . ",
    "url": "http://localhost:4000/Markdown/lists.html",
    "relUrl": "/Markdown/lists.html"
  },"381": {
    "doc": "Lists",
    "title": "Unordered",
    "content": "Makdown . + To start a list, there should be an empty line above + Create a list by starting a line with `+`, `-`, or `*` - Changing the sign will add a linespace + Add text under an item This is a text under an item. Notice that there are two spaces at the end above. - Sub-lists are made by indenting 2 spaces: * Item 2a * Item 2b * Item 3 To end a list, there should be one empty line above. Rendered output . | To start a list, there should be an empty line above | Create a list by starting a line with +, -, or * | Changing the sign will add a linespace | Add text under an item This is a text under an item. Notice that there are two spaces at the end above. | Sub-lists are made by indenting 2 spaces: . | Item 2a | Item 2b | . | Item 3 | . To end a list, there should be one empty line above. ",
    "url": "http://localhost:4000/Markdown/lists.html#unordered",
    "relUrl": "/Markdown/lists.html#unordered"
  },"382": {
    "doc": "Lists",
    "title": "Ordered",
    "content": "Makdown . 1. Item 1 1. Item 2 Notice that the sequence number is irrelevant. Markdown will change the sequence automatically when renderring. Notice that there are two spaces at the end above to make a new text under item. 3. Sub-lists are made by indenting 4 spaces 1. Item 3a 2. Item 3b 8. Any number for item 4 . Rendered output . | Item 1 | Item 2 Notice that the sequence number is irrelevant. Markdown will change the sequence automatically when renderring. Notice that there are two spaces at the end above to make a new text under item. | Sub-lists are made by indenting 4 spaces . | Item 3a | Item 3b | . | Any number for item 4 | . Makdown . 57. will started with offset 57 1. so it will be 58 . Rendered output . | will started with offset 57 | so it will be 58 | . ",
    "url": "http://localhost:4000/Markdown/lists.html#ordered",
    "relUrl": "/Markdown/lists.html#ordered"
  },"383": {
    "doc": "Lists",
    "title": "Elements in Lists",
    "content": "Notes: . | To add another element in a list while preserving the continuity of the list, indent the element four spaces or one tab | . Makdown . * This is the first list item. * Here's the second list item. I need to add another paragraph below the second list item. * And here's the third list item. Rendered output . | This is the first list item. | Here’s the second list item. I need to add another paragraph below the second list item. | And here’s the third list item. | . Rendered output . | This is the first list item. | Here’s the second list item. I need to add another paragraph below the second list item. | And here’s the third list item. | . Rendered output . | This is the first list item. | Here’s the second list item. A blockquote would look great below the second list item. | And here’s the third list item. | . Makdown . 1. This list will include image 2. This is Irawan's logo ![Irawan](https://irawan.io/og/irawan-io.png) 3. So that's a logo . Rendered output . | This list will include image | This is Irawan’s logo | So that’s a logo | . ",
    "url": "http://localhost:4000/Markdown/lists.html#elements-in-lists",
    "relUrl": "/Markdown/lists.html#elements-in-lists"
  },"384": {
    "doc": "MEAN",
    "title": "MEAN (Mongo DB, Express, Angular and  Node)",
    "content": " ",
    "url": "http://localhost:4000/the-basics/mean.html#mean-mongo-db-express-angular-and--node",
    "relUrl": "/the-basics/mean.html#mean-mongo-db-express-angular-and--node"
  },"385": {
    "doc": "MEAN",
    "title": "MEAN",
    "content": " ",
    "url": "http://localhost:4000/the-basics/mean.html",
    "relUrl": "/the-basics/mean.html"
  },"386": {
    "doc": "Moodle",
    "title": "Moodle",
    "content": " ",
    "url": "http://localhost:4000/LMS/moodle.html",
    "relUrl": "/LMS/moodle.html"
  },"387": {
    "doc": "Multiple remotes",
    "title": "Working with Git multiple remotes",
    "content": "Working in between two big companies that have their own environments and each using different pipelines put me in to a situation where I have to understand and work with two git remotes, one with Github and the other with Gitlab . So the structure will be like this for example: . $git remote -v origin git@github.com:company1/project-name.git (fetch) origin git@github.com:company1/project-name.git (push) upstream git@gitlab.com:company2/project-name.git (fetch) upstream git@gitlab.com:company2/project-name.git (push) . Each company will have different environment setup altough this result in one production environment. ",
    "url": "http://localhost:4000/Git/multiple-remotes.html#working-with-git-multiple-remotes",
    "relUrl": "/Git/multiple-remotes.html#working-with-git-multiple-remotes"
  },"388": {
    "doc": "Multiple remotes",
    "title": "Multiple remotes",
    "content": " ",
    "url": "http://localhost:4000/Git/multiple-remotes.html",
    "relUrl": "/Git/multiple-remotes.html"
  },"389": {
    "doc": "Never Mutate State",
    "title": "–description–",
    "content": "These final challenges describe several methods of enforcing the key principle of state immutability in Redux. Immutable state means that you never modify state directly, instead, you return a new copy of state. If you took a snapshot of the state of a Redux app over time, you would see something like state 1, state 2, state 3,state 4, ... and so on where each state may be similar to the last, but each is a distinct piece of data. This immutability, in fact, is what provides such features as time-travel debugging that you may have heard about. Redux does not actively enforce state immutability in its store or reducers, that responsibility falls on the programmer. Fortunately, JavaScript (especially ES6) provides several useful tools you can use to enforce the immutability of your state, whether it is a string, number, array, or object. Note that strings and numbers are primitive values and are immutable by nature. In other words, 3 is always 3. You cannot change the value of the number 3. An array or object, however, is mutable. In practice, your state will probably consist of an array or object, as these are useful data structures for representing many types of information. ",
    "url": "http://localhost:4000/js-libraries/redux/never-mutate-state.html#description",
    "relUrl": "/js-libraries/redux/never-mutate-state.html#description"
  },"390": {
    "doc": "Never Mutate State",
    "title": "–instructions–",
    "content": "There is a store and reducer in the code editor for managing to-do items. Finish writing the ADD_TO_DO case in the reducer to append a new to-do to the state. There are a few ways to accomplish this with standard JavaScript or ES6. See if you can find a way to return a new array with the item from action.todo appended to the end. ",
    "url": "http://localhost:4000/js-libraries/redux/never-mutate-state.html#instructions",
    "relUrl": "/js-libraries/redux/never-mutate-state.html#instructions"
  },"391": {
    "doc": "Never Mutate State",
    "title": "–hints–",
    "content": "The Redux store should exist and initialize with a state equal to the todos array in the code editor. assert( (function () { const todos = [ 'Go to the store', 'Clean the house', 'Cook dinner', 'Learn to code' ]; const initialState = store.getState(); return ( Array.isArray(initialState) &amp;&amp; initialState.join(',') === todos.join(',') ); })() ); . addToDo and immutableReducer both should be functions. assert(typeof addToDo === 'function' &amp;&amp; typeof immutableReducer === 'function'); . Dispatching an action of type ADD_TO_DO on the Redux store should add a todo item and should NOT mutate state. assert( (function () { const initialState = store.getState(); const isFrozen = DeepFreeze(initialState); store.dispatch(addToDo('__TEST__TO__DO__')); const finalState = store.getState(); const expectedState = [ 'Go to the store', 'Clean the house', 'Cook dinner', 'Learn to code', '__TEST__TO__DO__' ]; return isFrozen &amp;&amp; DeepEqual(finalState, expectedState); })() ); . ",
    "url": "http://localhost:4000/js-libraries/redux/never-mutate-state.html#hints",
    "relUrl": "/js-libraries/redux/never-mutate-state.html#hints"
  },"392": {
    "doc": "Never Mutate State",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/never-mutate-state.html#seed",
    "relUrl": "/js-libraries/redux/never-mutate-state.html#seed"
  },"393": {
    "doc": "Never Mutate State",
    "title": "–seed-contents–",
    "content": "const ADD_TO_DO = 'ADD_TO_DO'; // A list of strings representing tasks to do: const todos = [ 'Go to the store', 'Clean the house', 'Cook dinner', 'Learn to code', ]; const immutableReducer = (state = todos, action) =&gt; { switch(action.type) { case ADD_TO_DO: // Don't mutate state here or the tests will fail return default: return state; } }; const addToDo = (todo) =&gt; { return { type: ADD_TO_DO, todo } } const store = Redux.createStore(immutableReducer); . ",
    "url": "http://localhost:4000/js-libraries/redux/never-mutate-state.html#seed-contents",
    "relUrl": "/js-libraries/redux/never-mutate-state.html#seed-contents"
  },"394": {
    "doc": "Never Mutate State",
    "title": "–solutions–",
    "content": "const ADD_TO_DO = 'ADD_TO_DO'; const todos = [ 'Go to the store', 'Clean the house', 'Cook dinner', 'Learn to code', ]; const immutableReducer = (state = todos, action) =&gt; { switch(action.type) { case ADD_TO_DO: return state.concat(action.todo); default: return state; } }; const addToDo = (todo) =&gt; { return { type: ADD_TO_DO, todo } } const store = Redux.createStore(immutableReducer); . ",
    "url": "http://localhost:4000/js-libraries/redux/never-mutate-state.html#solutions",
    "relUrl": "/js-libraries/redux/never-mutate-state.html#solutions"
  },"395": {
    "doc": "Never Mutate State",
    "title": "Never Mutate State",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/never-mutate-state.html",
    "relUrl": "/js-libraries/redux/never-mutate-state.html"
  },"396": {
    "doc": "NPM",
    "title": "NPM",
    "content": ". | What is NPM? | Installation | Check version | Check for hints of usage | Starting the package | Then you can change the config details | check and remove default configuration | Install package . | Locally | Install globally (in the machine and not only in current folder) | . | Remove or uninstall module | Install module with version and upate | To check the root folder of global install | Remove global package | To show the installed packages | . ",
    "url": "http://localhost:4000/tools/npm.html",
    "relUrl": "/tools/npm.html"
  },"397": {
    "doc": "NPM",
    "title": "What is NPM?",
    "content": "npm is the world’s largest software registry. Open source developers from every continent use npm to share and borrow packages, and many organizations use npm to manage private development as well. See more details on About NPM . ",
    "url": "http://localhost:4000/tools/npm.html#what-is-npm",
    "relUrl": "/tools/npm.html#what-is-npm"
  },"398": {
    "doc": "NPM",
    "title": "Installation",
    "content": "Install the npm with NodeJS by downloading it on the download page. It is strongly recommended to install Nodejs and npm with version manager like nvm . ",
    "url": "http://localhost:4000/tools/npm.html#installation",
    "relUrl": "/tools/npm.html#installation"
  },"399": {
    "doc": "NPM",
    "title": "Check version",
    "content": "Once the npm is installed, check the version by running: . npm -v (or --version) . ",
    "url": "http://localhost:4000/tools/npm.html#check-version",
    "relUrl": "/tools/npm.html#check-version"
  },"400": {
    "doc": "NPM",
    "title": "Check for hints of usage",
    "content": "npm help . ",
    "url": "http://localhost:4000/tools/npm.html#check-for-hints-of-usage",
    "relUrl": "/tools/npm.html#check-for-hints-of-usage"
  },"401": {
    "doc": "NPM",
    "title": "Starting the package",
    "content": "Run npm init to start the use and it will create folder node_module and file called package.json. It will ask question in steps about the details. If you wish to use all defauylt options, add -y or --yes . npm init -y (or --yes) . The default package.json will look lik this: . \"name\": \"package-name\", \"version\": \"1.0.0\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"description\": \"\", } } . ",
    "url": "http://localhost:4000/tools/npm.html#starting-the-package",
    "relUrl": "/tools/npm.html#starting-the-package"
  },"402": {
    "doc": "NPM",
    "title": "Then you can change the config details",
    "content": "Example . npm config set init-author-name \"Irawan\" npm set init-license \"MIT\" . Then it will look like this: . \"name\": \"package-name\", \"version\": \"1.0.0\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" }, \"keywords\": [], \"author\": \"Irawan\", \"license\": \"MIT\", \"description\": \"\", \"dependencies\": { \"gulp\": \"^4.0.2\", \"lodash\": \"^4.17.3\" } } . ",
    "url": "http://localhost:4000/tools/npm.html#then-you-can-change-the-config-details",
    "relUrl": "/tools/npm.html#then-you-can-change-the-config-details"
  },"403": {
    "doc": "NPM",
    "title": "check and remove default configuration",
    "content": "To check the configuration details, run the following: . npm config get init-author-name npm get init-license . to remove details; . npm config delete init-author-name npm delete init-license . ",
    "url": "http://localhost:4000/tools/npm.html#check-and-remove-default-configuration",
    "relUrl": "/tools/npm.html#check-and-remove-default-configuration"
  },"404": {
    "doc": "NPM",
    "title": "Install package",
    "content": " ",
    "url": "http://localhost:4000/tools/npm.html#install-package",
    "relUrl": "/tools/npm.html#install-package"
  },"405": {
    "doc": "NPM",
    "title": "Locally",
    "content": "E.g installing gulp-sass . npm install gulp gulp-sass --save-dev . Always use --save-dev to ensure that the changes is saved in the package.json file. ",
    "url": "http://localhost:4000/tools/npm.html#locally",
    "relUrl": "/tools/npm.html#locally"
  },"406": {
    "doc": "NPM",
    "title": "Install globally (in the machine and not only in current folder)",
    "content": "npm install -g nodemon npm install -g live-server . ",
    "url": "http://localhost:4000/tools/npm.html#install-globally-in-the-machine-and-not-only-in-current-folder",
    "relUrl": "/tools/npm.html#install-globally-in-the-machine-and-not-only-in-current-folder"
  },"407": {
    "doc": "NPM",
    "title": "Remove or uninstall module",
    "content": "npm uninstall gulp-sass --save-dev # or npm remove gulp --save-dev #or npm rm gulp-sass --save-dev . ",
    "url": "http://localhost:4000/tools/npm.html#remove-or-uninstall-module",
    "relUrl": "/tools/npm.html#remove-or-uninstall-module"
  },"408": {
    "doc": "NPM",
    "title": "Install module with version and upate",
    "content": "npm install gulp-sas@5.5.5 --save # to update # UPDATE npm update lodash --sav . ",
    "url": "http://localhost:4000/tools/npm.html#install-module-with-version-and-upate",
    "relUrl": "/tools/npm.html#install-module-with-version-and-upate"
  },"409": {
    "doc": "NPM",
    "title": "To check the root folder of global install",
    "content": "npm root -g . ",
    "url": "http://localhost:4000/tools/npm.html#to-check-the-root-folder-of-global-install",
    "relUrl": "/tools/npm.html#to-check-the-root-folder-of-global-install"
  },"410": {
    "doc": "NPM",
    "title": "Remove global package",
    "content": "npm remove -g gulp-sass . ",
    "url": "http://localhost:4000/tools/npm.html#remove-global-package",
    "relUrl": "/tools/npm.html#remove-global-package"
  },"411": {
    "doc": "NPM",
    "title": "To show the installed packages",
    "content": "#Main modules only: npm list #result: ╰─ npm list user@1.0.0 /Users/project-name ├── gulp-cli@2.3.0 ├── gulp-sass@5.1.0 ├── gulp@4.0.2 └── lodash@4.17.21 # Main modules with the direct dependencies: npm list --depth 0 #Main modules with the dependencies next level npm list --depth 1 # etc... ",
    "url": "http://localhost:4000/tools/npm.html#to-show-the-installed-packages",
    "relUrl": "/tools/npm.html#to-show-the-installed-packages"
  },"412": {
    "doc": "Optimize re-renders with `shouldComponentUpdate()`",
    "title": "Optimize re-renders with shouldComponentUpdate()",
    "content": "So far, if any component receives new state or new props, it re-renders itself and all its children. This is usually okay. But React provides a lifecycle method you can call when child components receive new state or props, and declare specifically if the components should update or not. The method is shouldComponentUpdate(), and it takes nextProps and nextState as parameters. This method is a useful way to optimize performance. For example, the default behavior is that your component re-renders when it receives new props, even if the props haven’t changed. You can use shouldComponentUpdate() to prevent this by comparing the props. The method must return a boolean value that tells React whether or not to update the component. You can compare the current props (this.props) to the next props (nextProps) to determine if you need to update or not, and return true or false accordingly. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#optimize-re-renders-with-shouldcomponentupdate",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#optimize-re-renders-with-shouldcomponentupdate"
  },"413": {
    "doc": "Optimize re-renders with `shouldComponentUpdate()`",
    "title": "–instructions–",
    "content": "The shouldComponentUpdate() method is added in a component called OnlyEvens. Currently, this method returns true so OnlyEvens re-renders every time it receives new props. Modify the method so OnlyEvens updates only if the value of its new props is even. Click the Add button and watch the order of events in your browser’s console as the lifecycle hooks are triggered. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#instructions"
  },"414": {
    "doc": "Optimize re-renders with `shouldComponentUpdate()`",
    "title": "–hints–",
    "content": "The Controller component should render the OnlyEvens component as a child. assert( (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(Controller)); return ( mockedComponent.find('Controller').length === 1 &amp;&amp; mockedComponent.find('OnlyEvens').length === 1 ); })() ); . The shouldComponentUpdate method should be defined on the OnlyEvens component. assert( (() =&gt; { const child = React.createElement(OnlyEvens) .type.prototype.shouldComponentUpdate.toString() .replace(/s/g, ''); return child !== 'undefined'; })() ); . The OnlyEvens component should return an h1 tag which renders the value of this.props.value. (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(Controller)); const first = () =&gt; { mockedComponent.setState({ value: 1000 }); return mockedComponent.find('h1').html(); }; const second = () =&gt; { mockedComponent.setState({ value: 10 }); return mockedComponent.find('h1').html(); }; const firstValue = first(); const secondValue = second(); assert(firstValue === '&lt;h1&gt;1000&lt;/h1&gt;' &amp;&amp; secondValue === '&lt;h1&gt;10&lt;/h1&gt;'); })(); . OnlyEvens should re-render only when nextProps.value is even. (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(Controller)); const first = () =&gt; { mockedComponent.setState({ value: 8 }); return mockedComponent.find('h1').text(); }; const second = () =&gt; { mockedComponent.setState({ value: 7 }); return mockedComponent.find('h1').text(); }; const third = () =&gt; { mockedComponent.setState({ value: 42 }); return mockedComponent.find('h1').text(); }; const firstValue = first(); const secondValue = second(); const thirdValue = third(); assert(firstValue === '8' &amp;&amp; secondValue === '8' &amp;&amp; thirdValue === '42'); })(); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#hints"
  },"415": {
    "doc": "Optimize re-renders with `shouldComponentUpdate()`",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#seed"
  },"416": {
    "doc": "Optimize re-renders with `shouldComponentUpdate()`",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;Controller /&gt;, document.getElementById('root')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#after-user-code"
  },"417": {
    "doc": "Optimize re-renders with `shouldComponentUpdate()`",
    "title": "–seed-contents–",
    "content": "class OnlyEvens extends React.Component { constructor(props) { super(props); } shouldComponentUpdate(nextProps, nextState) { console.log('Should I update?'); // Change code below this line return true; // Change code above this line } componentDidUpdate() { console.log('Component re-rendered.'); } render() { return &lt;h1&gt;{this.props.value}&lt;/h1&gt;; } } class Controller extends React.Component { constructor(props) { super(props); this.state = { value: 0 }; this.addValue = this.addValue.bind(this); } addValue() { this.setState(state =&gt; ({ value: state.value + 1 })); } render() { return ( &lt;div&gt; &lt;button onClick={this.addValue}&gt;Add&lt;/button&gt; &lt;OnlyEvens value={this.state.value} /&gt; &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#seed-contents"
  },"418": {
    "doc": "Optimize re-renders with `shouldComponentUpdate()`",
    "title": "–solutions–",
    "content": "class OnlyEvens extends React.Component { constructor(props) { super(props); } shouldComponentUpdate(nextProps, nextState) { console.log('Should I update?'); // Change code below this line return nextProps.value % 2 === 0; // Change code above this line } componentDidUpdate() { console.log('Component re-rendered.'); } render() { return &lt;h1&gt;{this.props.value}&lt;/h1&gt;; } } class Controller extends React.Component { constructor(props) { super(props); this.state = { value: 0 }; this.addValue = this.addValue.bind(this); } addValue() { this.setState(state =&gt; ({ value: state.value + 1 })); } render() { return ( &lt;div&gt; &lt;button onClick={this.addValue}&gt;Add&lt;/button&gt; &lt;OnlyEvens value={this.state.value} /&gt; &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html#solutions"
  },"419": {
    "doc": "Optimize re-renders with `shouldComponentUpdate()`",
    "title": "Optimize re-renders with `shouldComponentUpdate()`",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/optimize-re-renders-with-shouldcomponentupdate.html"
  },"420": {
    "doc": "Override default props",
    "title": "Override default props",
    "content": "The ability to set default props is a useful feature in React. The way to override the default props is to explicitly set the prop values for a component. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/override-default-props.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/override-default-props.html"
  },"421": {
    "doc": "Override default props",
    "title": "–instructions–",
    "content": "The ShoppingCart component now renders a child component Items. This Items component has a default prop quantity set to the integer 0. Override the default prop by passing in a value of 10 for quantity. Note: Remember that the syntax to add a prop to a component looks similar to how you add HTML attributes. However, since the value for quantity is an integer, it won’t go in quotes but it should be wrapped in curly braces. For example, {100}. This syntax tells JSX to interpret the value within the braces directly as JavaScript. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/override-default-props.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/override-default-props.html#instructions"
  },"422": {
    "doc": "Override default props",
    "title": "–hints–",
    "content": "The component ShoppingCart should render. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('ShoppingCart').length === 1; })() ); . The component Items should render. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('Items').length === 1; })() ); . The Items component should have a prop of { quantity: 10 } passed from the ShoppingCart component. (getUserInput) =&gt; assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return ( mockedComponent.find('Items').props().quantity == 10 &amp;&amp; getUserInput('index') .replace(/ /g, '') .includes('&lt;Itemsquantity={10}/&gt;') ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/override-default-props.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/override-default-props.html#hints"
  },"423": {
    "doc": "Override default props",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/override-default-props.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/override-default-props.html#seed"
  },"424": {
    "doc": "Override default props",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;ShoppingCart /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/override-default-props.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/override-default-props.html#after-user-code"
  },"425": {
    "doc": "Override default props",
    "title": "–seed-contents–",
    "content": "const Items = (props) =&gt; { return &lt;h1&gt;Current Quantity of Items in Cart: {props.quantity}&lt;/h1&gt; } Items.defaultProps = { quantity: 0 } class ShoppingCart extends React.Component { constructor(props) { super(props); } render() { { /* Change code below this line */ } return &lt;Items /&gt; { /* Change code above this line */ } } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/override-default-props.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/override-default-props.html#seed-contents"
  },"426": {
    "doc": "Override default props",
    "title": "–solutions–",
    "content": "const Items = (props) =&gt; { return &lt;h1&gt;Current Quantity of Items in Cart: {props.quantity}&lt;/h1&gt; } Items.defaultProps = { quantity: 0 } class ShoppingCart extends React.Component { constructor(props) { super(props); } render() { { /* Change code below this line */ } return &lt;Items quantity = {10} /&gt; { /* Change code above this line */ } } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/override-default-props.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/override-default-props.html#solutions"
  },"427": {
    "doc": "Paragraph",
    "title": "Paragraphs",
    "content": "Notes: . | To create paragraphs, use a blank line to separate one or more lines of text. | Don’t ident paragraphs with spaces or tabs | . Markdown . This is the first paragraph. This is the second paragraph . Rendered output: . This is the first paragraph. This is the second paragraph . ",
    "url": "http://localhost:4000/Markdown/paragraph.html#paragraphs",
    "relUrl": "/Markdown/paragraph.html#paragraphs"
  },"428": {
    "doc": "Paragraph",
    "title": "Paragraph",
    "content": " ",
    "url": "http://localhost:4000/Markdown/paragraph.html",
    "relUrl": "/Markdown/paragraph.html"
  },"429": {
    "doc": "Pass a callback as props",
    "title": "Pass a callback as props",
    "content": "You can pass state as props to child components, but you’re not limited to passing data. You can also pass handler functions or any method that’s defined on a React component to a child component. This is how you allow child components to interact with their parent components. You pass methods to a child just like a regular prop. It’s assigned a name and you have access to that method name under this.props in the child component. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html"
  },"430": {
    "doc": "Pass a callback as props",
    "title": "–instructions–",
    "content": "There are three components outlined in the code editor. The MyApp component is the parent that will render the GetInput and RenderInput child components. Add the GetInput component to the render method in MyApp, then pass it a prop called input assigned to inputValue from MyApp’s state. Also create a prop called handleChange and pass the input handler handleChange to it. Next, add RenderInput to the render method in MyApp, then create a prop called input and pass the inputValue from state to it. Once you are finished you will be able to type in the input field in the GetInput component, which then calls the handler method in its parent via props. This updates the input in the state of the parent, which is passed as props to both children. Observe how the data flows between the components and how the single source of truth remains the state of the parent component. Admittedly, this example is a bit contrived, but should serve to illustrate how data and callbacks can be passed between React components. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html#instructions"
  },"431": {
    "doc": "Pass a callback as props",
    "title": "–hints–",
    "content": "The MyApp component should render. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyApp)); return mockedComponent.find('MyApp').length === 1; })() ); . The GetInput component should render. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyApp)); return mockedComponent.find('GetInput').length === 1; })() ); . The RenderInput component should render. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyApp)); return mockedComponent.find('RenderInput').length === 1; })() ); . The GetInput component should receive the MyApp state property inputValue as props and contain an input element which modifies MyApp state. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyApp)); const state_1 = () =&gt; { mockedComponent.setState({ inputValue: '' }); return waitForIt(() =&gt; mockedComponent.state()); }; const state_2 = () =&gt; { mockedComponent .find('input') .simulate('change', { target: { value: 'TestInput' } }); return waitForIt(() =&gt; mockedComponent.state()); }; const updated_1 = await state_1(); const updated_2 = await state_2(); assert(updated_1.inputValue === '' &amp;&amp; updated_2.inputValue === 'TestInput'); }; . The RenderInput component should receive the MyApp state property inputValue as props. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyApp)); const state_1 = () =&gt; { mockedComponent.setState({ inputValue: 'TestName' }); return waitForIt(() =&gt; mockedComponent); }; const updated_1 = await state_1(); assert(updated_1.find('p').text().includes('TestName')); }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html#hints"
  },"432": {
    "doc": "Pass a callback as props",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html#seed"
  },"433": {
    "doc": "Pass a callback as props",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyApp /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html#after-user-code"
  },"434": {
    "doc": "Pass a callback as props",
    "title": "–seed-contents–",
    "content": "class MyApp extends React.Component { constructor(props) { super(props); this.state = { inputValue: '' } this.handleChange = this.handleChange.bind(this); } handleChange(event) { this.setState({ inputValue: event.target.value }); } render() { return ( &lt;div&gt; { /* Change code below this line */ } { /* Change code above this line */ } &lt;/div&gt; ); } }; class GetInput extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h3&gt;Get Input:&lt;/h3&gt; &lt;input value={this.props.input} onChange={this.props.handleChange}/&gt; &lt;/div&gt; ); } }; class RenderInput extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h3&gt;Input Render:&lt;/h3&gt; &lt;p&gt;{this.props.input}&lt;/p&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html#seed-contents"
  },"435": {
    "doc": "Pass a callback as props",
    "title": "–solutions–",
    "content": "class MyApp extends React.Component { constructor(props) { super(props); this.state = { inputValue: '' } this.handleChange = this.handleChange.bind(this); } handleChange(event) { this.setState({ inputValue: event.target.value }); } render() { return ( &lt;div&gt; &lt;GetInput input={this.state.inputValue} handleChange={this.handleChange}/&gt; &lt;RenderInput input={this.state.inputValue}/&gt; &lt;/div&gt; ); } }; class GetInput extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h3&gt;Get Input:&lt;/h3&gt; &lt;input value={this.props.input} onChange={this.props.handleChange}/&gt; &lt;/div&gt; ); } }; class RenderInput extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h3&gt;Input Render:&lt;/h3&gt; &lt;p&gt;{this.props.input}&lt;/p&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-a-callback-as-props.html#solutions"
  },"436": {
    "doc": "Pass an Array as Props",
    "title": "Pass an Array as Props",
    "content": "The last challenge demonstrated how to pass information from a parent component to a child component as props or properties. This challenge looks at how arrays can be passed as props. To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces. &lt;ParentComponent&gt; &lt;ChildComponent colors={[\"green\", \"blue\", \"red\"]} /&gt; &lt;/ParentComponent&gt; . The child component then has access to the array property colors. Array methods such as join() can be used when accessing the property. const ChildComponent = (props) =&gt; &lt;p&gt;{props.colors.join(', ')}&lt;/p&gt; . This will join all colors array items into a comma separated string and produce: &lt;p&gt;green, blue, red&lt;/p&gt;. Later, we will learn about other common methods to render arrays of data in React. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html"
  },"437": {
    "doc": "Pass an Array as Props",
    "title": "–instructions–",
    "content": "There are List and ToDo components in the code editor. When rendering each List from the ToDo component, pass in a tasks property assigned to an array of to-do tasks, for example [\"walk dog\", \"workout\"]. Then access this tasks array in the List component, showing its value within the p element. Use join(\", \") to display the props.tasks array in the p element as a comma-separated list. Today’s list should have at least 2 tasks and tomorrow’s should have at least 3 tasks. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html#instructions"
  },"438": {
    "doc": "Pass an Array as Props",
    "title": "–hints–",
    "content": "The ToDo component should return a single outer div. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.children().first().type() === 'div'; })() ); . The third child of the ToDo component should be an instance of the List component. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.children().first().childAt(2).name() === 'List'; })() ); . The fifth child of the ToDo component should be an instance of the List component. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.children().first().childAt(4).name() === 'List'; })() ); . Both instances of the List component should have a property called tasks and tasks should be of type array. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return ( Array.isArray(mockedComponent.find('List').get(0).props.tasks) &amp;&amp; Array.isArray(mockedComponent.find('List').get(1).props.tasks) ); })() ); . The first List component representing the tasks for today should have 2 or more items. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.find('List').get(0).props.tasks.length &gt;= 2; })() ); . The second List component representing the tasks for tomorrow should have 3 or more items. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.find('List').get(1).props.tasks.length &gt;= 3; })() ); . The List component should render the value from the tasks prop in the p tag. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return ( mockedComponent .find('p') .get(0) .props.children.replace(/\\s*,\\s*/g, ',') === mockedComponent .find('List') .get(0) .props.tasks.join(',') .replace(/\\s*,\\s*/g, ',') &amp;&amp; mockedComponent .find('p') .get(1) .props.children.replace(/\\s*,\\s*/g, ',') === mockedComponent .find('List') .get(1) .props.tasks.join(',') .replace(/\\s*,\\s*/g, ',') ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html#hints"
  },"439": {
    "doc": "Pass an Array as Props",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html#seed"
  },"440": {
    "doc": "Pass an Array as Props",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;ToDo /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html#after-user-code"
  },"441": {
    "doc": "Pass an Array as Props",
    "title": "–seed-contents–",
    "content": "const List = (props) =&gt; { { /* Change code below this line */ } return &lt;p&gt;{}&lt;/p&gt; { /* Change code above this line */ } }; class ToDo extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;To Do Lists&lt;/h1&gt; &lt;h2&gt;Today&lt;/h2&gt; { /* Change code below this line */ } &lt;List/&gt; &lt;h2&gt;Tomorrow&lt;/h2&gt; &lt;List/&gt; { /* Change code above this line */ } &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html#seed-contents"
  },"442": {
    "doc": "Pass an Array as Props",
    "title": "–solutions–",
    "content": "const List= (props) =&gt; { return &lt;p&gt;{props.tasks.join(', ')}&lt;/p&gt; }; class ToDo extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;To Do Lists&lt;/h1&gt; &lt;h2&gt;Today&lt;/h2&gt; &lt;List tasks={['study', 'exercise']} /&gt; &lt;h2&gt;Tomorrow&lt;/h2&gt; &lt;List tasks={['call Sam', 'grocery shopping', 'order tickets']} /&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-an-array-as-props.html#solutions"
  },"443": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "Pass Props to a Stateless Functional Component",
    "content": "The previous challenges covered a lot about creating and composing JSX elements, functional components, and ES6 style class components in React. With this foundation, it’s time to look at another feature very common in React: props. In React, you can pass props, or properties, to child components. Say you have an App component which renders a child component called Welcome which is a stateless functional component. You can pass Welcome a user property by writing: . &lt;App&gt; &lt;Welcome user='Mark' /&gt; &lt;/App&gt; . You use custom HTML attributes created by you and supported by React to be passed to the component. In this case, the created property user is passed to the component Welcome. Since Welcome is a stateless functional component, it has access to this value like so: . const Welcome = (props) =&gt; &lt;h1&gt;Hello, {props.user}!&lt;/h1&gt; . It is standard to call this value props and when dealing with stateless functional components, you basically consider it as an argument to a function which returns JSX. You can access the value of the argument in the function body. With class components, you will see this is a little different. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html"
  },"444": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "–instructions–",
    "content": "There are Calendar and CurrentDate components in the code editor. When rendering CurrentDate from the Calendar component, pass in a property of date assigned to the current date from JavaScript’s Date object. Then access this prop in the CurrentDate component, showing its value within the p tags. Note that for prop values to be evaluated as JavaScript, they must be enclosed in curly brackets, for instance date={Date()}. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html#instructions"
  },"445": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "–hints–",
    "content": "The Calendar component should return a single div element. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(Calendar)); return mockedComponent.children().type() === 'div'; })() ); . The second child of the Calendar component should be the CurrentDate component. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(Calendar)); return mockedComponent.children().childAt(1).name() === 'CurrentDate'; })() ); . The CurrentDate component should have a prop called date. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(Calendar)); return mockedComponent.children().childAt(1).props().date; })() ); . The date prop of the CurrentDate should contain a string of text. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(Calendar)); const prop = mockedComponent.children().childAt(1).props().date; return typeof prop === 'string' &amp;&amp; prop.length &gt; 0; })() ); . The date prop should be generated by calling Date() . assert(/&lt;CurrentDatedate={Date\\(\\)}\\/&gt;/.test(__helpers.removeWhiteSpace(code))); . The CurrentDate component should render the value from the date prop in the p tag. let date = 'dummy date'; assert( (function () { const mockedComponent = Enzyme.mount( React.createElement(CurrentDate, { date }) ); return mockedComponent.find('p').html().includes(date); })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html#hints"
  },"446": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html#seed"
  },"447": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;Calendar /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html#after-user-code"
  },"448": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "–seed-contents–",
    "content": "const CurrentDate = (props) =&gt; { return ( &lt;div&gt; { /* Change code below this line */ } &lt;p&gt;The current date is: &lt;/p&gt; { /* Change code above this line */ } &lt;/div&gt; ); }; class Calendar extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h3&gt;What date is it?&lt;/h3&gt; { /* Change code below this line */ } &lt;CurrentDate /&gt; { /* Change code above this line */ } &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html#seed-contents"
  },"449": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "–solutions–",
    "content": "const CurrentDate = (props) =&gt; { return ( &lt;div&gt; { /* Change code below this line */ } &lt;p&gt;The current date is: {props.date}&lt;/p&gt; { /* Change code above this line */ } &lt;/div&gt; ); }; class Calendar extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h3&gt;What date is it?&lt;/h3&gt; { /* Change code below this line */ } &lt;CurrentDate date={Date()} /&gt; { /* Change code above this line */ } &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-props-to-a-stateless-functional-component.html#solutions"
  },"450": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "Pass State as Props to Child Components",
    "content": "You saw a lot of examples that passed props to child JSX elements and child React components in previous challenges. You may be wondering where those props come from. A common pattern is to have a stateful component containing the state important to your app, that then renders child components. You want these components to have access to some pieces of that state, which are passed in as props. For example, maybe you have an App component that renders a Navbar, among other components. In your App, you have state that contains a lot of user information, but the Navbar only needs access to the user’s username so it can display it. You pass that piece of state to the Navbar component as a prop. This pattern illustrates some important paradigms in React. The first is unidirectional data flow. State flows in one direction down the tree of your application’s components, from the stateful parent component to child components. The child components only receive the state data they need. The second is that complex stateful apps can be broken down into just a few, or maybe a single, stateful component. The rest of your components simply receive state from the parent as props, and render a UI from that state. It begins to create a separation where state management is handled in one part of code and UI rendering in another. This principle of separating state logic from UI logic is one of React’s key principles. When it’s used correctly, it makes the design of complex, stateful applications much easier to manage. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#pass-state-as-props-to-child-components",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#pass-state-as-props-to-child-components"
  },"451": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "–instructions–",
    "content": "The MyApp component is stateful and renders a Navbar component as a child. Pass the name property in its state down to the child component, then show the name in the h1 tag that’s part of the Navbar render method. name should appear after the text Hello, my name is:. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#instructions"
  },"452": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "–hints–",
    "content": "The MyApp component should render with a Navbar component inside. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyApp)); return ( mockedComponent.find('MyApp').length === 1 &amp;&amp; mockedComponent.find('Navbar').length === 1 ); })() ); . The Navbar component should receive the MyApp state property name as props. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyApp)); const setState = () =&gt; { mockedComponent.setState({ name: 'TestName' }); return waitForIt(() =&gt; mockedComponent.find('Navbar').props()); }; const navProps = await setState(); assert(navProps.name === 'TestName'); }; . The h1 element in Navbar should render the name prop. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyApp)); const navH1Before = mockedComponent.find('Navbar').find('h1').text(); const setState = () =&gt; { mockedComponent.setState({ name: 'TestName' }); return waitForIt(() =&gt; mockedComponent.find('Navbar').find('h1').text()); }; const navH1After = await setState(); assert(new RegExp('TestName').test(navH1After) &amp;&amp; navH1After !== navH1Before); }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#hints"
  },"453": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#seed"
  },"454": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyApp /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#after-user-code"
  },"455": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "–seed-contents–",
    "content": "class MyApp extends React.Component { constructor(props) { super(props); this.state = { name: 'CamperBot' } } render() { return ( &lt;div&gt; {/* Change code below this line */} &lt;Navbar /&gt; {/* Change code above this line */} &lt;/div&gt; ); } }; class Navbar extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; {/* Change code below this line */} &lt;h1&gt;Hello, my name is: &lt;/h1&gt; {/* Change code above this line */} &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#seed-contents"
  },"456": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "–solutions–",
    "content": "class MyApp extends React.Component { constructor(props) { super(props); this.state = { name: 'CamperBot' } } render() { return ( &lt;div&gt; &lt;Navbar name={this.state.name}/&gt; &lt;/div&gt; ); } }; class Navbar extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;Hello, my name is: {this.props.name}&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html#solutions"
  },"457": {
    "doc": "Pass Props to a Stateless Functional Component",
    "title": "Pass Props to a Stateless Functional Component",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/pass-state-as-props-to-child-components.html"
  },"458": {
    "doc": "PHP",
    "title": "PHP and Object-oriented programming (OOP)",
    "content": " ",
    "url": "http://localhost:4000/the-languages/php.html#php-and-object-oriented-programming-oop",
    "relUrl": "/the-languages/php.html#php-and-object-oriented-programming-oop"
  },"459": {
    "doc": "PHP",
    "title": "PHP",
    "content": " ",
    "url": "http://localhost:4000/the-languages/php.html",
    "relUrl": "/the-languages/php.html"
  },"460": {
    "doc": "Publish to Netlify CMS",
    "title": "Publish to Netlify CMS",
    "content": " ",
    "url": "http://localhost:4000/Static/Gatsby/publish-netlify-cms.html",
    "relUrl": "/Static/Gatsby/publish-netlify-cms.html"
  },"461": {
    "doc": "Deploy",
    "title": "Deployment",
    "content": "Once you push the changes to your Github account and make it as Github page, it the page URL will be yourusername.github.io/reponame. Then we have an option to set the custom domain through the repo Settings or via Netlify . ",
    "url": "http://localhost:4000/Static/jekyll/publish-to-netlify.html#deployment",
    "relUrl": "/Static/jekyll/publish-to-netlify.html#deployment"
  },"462": {
    "doc": "Deploy",
    "title": "Deploy",
    "content": " ",
    "url": "http://localhost:4000/Static/jekyll/publish-to-netlify.html",
    "relUrl": "/Static/jekyll/publish-to-netlify.html"
  },"463": {
    "doc": "Jekyll",
    "title": "Jekyll",
    "content": "This Dokumentasi website is an example of my Jekyll install. Following are the steps I took to build this. ",
    "url": "http://localhost:4000/Static/jekyll/",
    "relUrl": "/Static/jekyll/"
  },"464": {
    "doc": "Register a Store Listener",
    "title": "–description–",
    "content": "Another method you have access to on the Redux store object is store.subscribe(). This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store. One simple use for this method is to subscribe a function to your store that simply logs a message every time an action is received and the store is updated. ",
    "url": "http://localhost:4000/js-libraries/redux/register-a-store-listener.html#description",
    "relUrl": "/js-libraries/redux/register-a-store-listener.html#description"
  },"465": {
    "doc": "Register a Store Listener",
    "title": "–instructions–",
    "content": "Write a callback function that increments the global variable count every time the store receives an action, and pass this function in to the store.subscribe() method. You’ll see that store.dispatch() is called three times in a row, each time directly passing in an action object. Watch the console output between the action dispatches to see the updates take place. ",
    "url": "http://localhost:4000/js-libraries/redux/register-a-store-listener.html#instructions",
    "relUrl": "/js-libraries/redux/register-a-store-listener.html#instructions"
  },"466": {
    "doc": "Register a Store Listener",
    "title": "–hints–",
    "content": "Dispatching the ADD action on the store should increment the state by 1. assert( (function () { const initialState = store.getState(); store.dispatch({ type: 'ADD' }); const newState = store.getState(); return newState === initialState + 1; })() ); . There should be a listener function subscribed to the store using store.subscribe. (getUserInput) =&gt; assert(getUserInput('index').match(/store\\s*\\.\\s*subscribe\\(/gm)); . The store.subscribe should receive a function. (getUserInput) =&gt; assert(getUserInput('index').match(/(\\s*function\\s*)|(\\s*\\(\\s*\\)\\s*=&gt;)/gm)) . The callback to store.subscribe should also increment the global count variable as the store is updated. assert(store.getState() === count); . ",
    "url": "http://localhost:4000/js-libraries/redux/register-a-store-listener.html#hints",
    "relUrl": "/js-libraries/redux/register-a-store-listener.html#hints"
  },"467": {
    "doc": "Register a Store Listener",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/register-a-store-listener.html#seed",
    "relUrl": "/js-libraries/redux/register-a-store-listener.html#seed"
  },"468": {
    "doc": "Register a Store Listener",
    "title": "–before-user-code–",
    "content": "count = 0; . ",
    "url": "http://localhost:4000/js-libraries/redux/register-a-store-listener.html#before-user-code",
    "relUrl": "/js-libraries/redux/register-a-store-listener.html#before-user-code"
  },"469": {
    "doc": "Register a Store Listener",
    "title": "–seed-contents–",
    "content": "const ADD = 'ADD'; const reducer = (state = 0, action) =&gt; { switch(action.type) { case ADD: return state + 1; default: return state; } }; const store = Redux.createStore(reducer); // Global count variable: let count = 0; // Change code below this line // Change code above this line store.dispatch({type: ADD}); console.log(count); store.dispatch({type: ADD}); console.log(count); store.dispatch({type: ADD}); console.log(count); . ",
    "url": "http://localhost:4000/js-libraries/redux/register-a-store-listener.html#seed-contents",
    "relUrl": "/js-libraries/redux/register-a-store-listener.html#seed-contents"
  },"470": {
    "doc": "Register a Store Listener",
    "title": "–solutions–",
    "content": "const ADD = 'ADD'; const reducer = (state = 0, action) =&gt; { switch(action.type) { case ADD: return state + 1; default: return state; } }; const store = Redux.createStore(reducer); let count = 0; // Change code below this line store.subscribe( () =&gt; { count++; } ); // Change code above this line store.dispatch({type: ADD}); store.dispatch({type: ADD}); store.dispatch({type: ADD}); . ",
    "url": "http://localhost:4000/js-libraries/redux/register-a-store-listener.html#solutions",
    "relUrl": "/js-libraries/redux/register-a-store-listener.html#solutions"
  },"471": {
    "doc": "Register a Store Listener",
    "title": "Register a Store Listener",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/register-a-store-listener.html",
    "relUrl": "/js-libraries/redux/register-a-store-listener.html"
  },"472": {
    "doc": "Remove an Item from an Array",
    "title": "–description–",
    "content": "Time to practice removing items from an array. The spread operator can be used here as well. Other useful JavaScript methods include slice() and concat(). ",
    "url": "http://localhost:4000/js-libraries/redux/remove-an-item-from-an-array.html#description",
    "relUrl": "/js-libraries/redux/remove-an-item-from-an-array.html#description"
  },"473": {
    "doc": "Remove an Item from an Array",
    "title": "–instructions–",
    "content": "The reducer and action creator were modified to remove an item from an array based on the index of the item. Finish writing the reducer so a new state array is returned with the item at the specific index removed. ",
    "url": "http://localhost:4000/js-libraries/redux/remove-an-item-from-an-array.html#instructions",
    "relUrl": "/js-libraries/redux/remove-an-item-from-an-array.html#instructions"
  },"474": {
    "doc": "Remove an Item from an Array",
    "title": "–hints–",
    "content": "The Redux store should exist and initialize with a state equal to [0,1,2,3,4,5] . assert( (function () { const initialState = store.getState(); return ( Array.isArray(initialState) === true &amp;&amp; DeepEqual(initialState, [0, 1, 2, 3, 4, 5]) ); })() ); . removeItem and immutableReducer both should be functions. assert( typeof removeItem === 'function' &amp;&amp; typeof immutableReducer === 'function' ); . Dispatching the removeItem action creator should remove items from the state and should NOT mutate state. assert( (function () { const initialState = store.getState(); const isFrozen = DeepFreeze(initialState); store.dispatch(removeItem(3)); const state_1 = store.getState(); store.dispatch(removeItem(2)); const state_2 = store.getState(); store.dispatch(removeItem(0)); store.dispatch(removeItem(0)); store.dispatch(removeItem(0)); const state_3 = store.getState(); return ( isFrozen &amp;&amp; DeepEqual(state_1, [0, 1, 2, 4, 5]) &amp;&amp; DeepEqual(state_2, [0, 1, 4, 5]) &amp;&amp; DeepEqual(state_3, [5]) ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/redux/remove-an-item-from-an-array.html#hints",
    "relUrl": "/js-libraries/redux/remove-an-item-from-an-array.html#hints"
  },"475": {
    "doc": "Remove an Item from an Array",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/remove-an-item-from-an-array.html#seed",
    "relUrl": "/js-libraries/redux/remove-an-item-from-an-array.html#seed"
  },"476": {
    "doc": "Remove an Item from an Array",
    "title": "–seed-contents–",
    "content": "const immutableReducer = (state = [0,1,2,3,4,5], action) =&gt; { switch(action.type) { case 'REMOVE_ITEM': // Don't mutate state here or the tests will fail return default: return state; } }; const removeItem = (index) =&gt; { return { type: 'REMOVE_ITEM', index } } const store = Redux.createStore(immutableReducer); . ",
    "url": "http://localhost:4000/js-libraries/redux/remove-an-item-from-an-array.html#seed-contents",
    "relUrl": "/js-libraries/redux/remove-an-item-from-an-array.html#seed-contents"
  },"477": {
    "doc": "Remove an Item from an Array",
    "title": "–solutions–",
    "content": "const immutableReducer = (state = [0,1,2,3,4,5], action) =&gt; { switch(action.type) { case 'REMOVE_ITEM': return [ ...state.slice(0, action.index), ...state.slice(action.index + 1) ]; default: return state; } }; const removeItem = (index) =&gt; { return { type: 'REMOVE_ITEM', index } } const store = Redux.createStore(immutableReducer); . ",
    "url": "http://localhost:4000/js-libraries/redux/remove-an-item-from-an-array.html#solutions",
    "relUrl": "/js-libraries/redux/remove-an-item-from-an-array.html#solutions"
  },"478": {
    "doc": "Remove an Item from an Array",
    "title": "Remove an Item from an Array",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/remove-an-item-from-an-array.html",
    "relUrl": "/js-libraries/redux/remove-an-item-from-an-array.html"
  },"479": {
    "doc": "Render a Class Component to the DOM",
    "title": "Render a Class Component to the DOM",
    "content": "You may remember using the ReactDOM API in an earlier challenge to render JSX elements to the DOM. The process for rendering React components will look very similar. The past few challenges focused on components and composition, so the rendering was done for you behind the scenes. However, none of the React code you write will render to the DOM without making a call to the ReactDOM API. Here’s a refresher on the syntax: ReactDOM.render(componentToRender, targetNode). The first argument is the React component that you want to render. The second argument is the DOM node that you want to render that component within. React components are passed into ReactDOM.render() a little differently than JSX elements. For JSX elements, you pass in the name of the element that you want to render. However, for React components, you need to use the same syntax as if you were rendering a nested component, for example ReactDOM.render(&lt;ComponentToRender /&gt;, targetNode). You use this syntax for both ES6 class components and functional components. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html"
  },"480": {
    "doc": "Render a Class Component to the DOM",
    "title": "–instructions–",
    "content": "Both the Fruits and Vegetables components are defined for you behind the scenes. Render both components as children of the TypesOfFood component, then render TypesOfFood to the DOM. There is a div with id='challenge-node' available for you to use. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html#instructions"
  },"481": {
    "doc": "Render a Class Component to the DOM",
    "title": "–hints–",
    "content": "The TypesOfFood component should return a single div element. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return mockedComponent.children().type() === 'div'; })() ); . The TypesOfFood component should render the Fruits component after the h1 element. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return mockedComponent.children().childAt(1).name() === 'Fruits'; })() ); . The TypesOfFood component should render the Vegetables component after Fruits. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return mockedComponent.children().childAt(2).name() === 'Vegetables'; })() ); . The TypesOfFood component should render to the DOM within the div with the id challenge-node. assert( (function () { const html = document.getElementById('challenge-node').childNodes[0] .innerHTML; return ( html.includes( '&lt;div&gt;&lt;h2&gt;Fruits:&lt;/h2&gt;&lt;h4&gt;Non-Citrus:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Apples&lt;/li&gt;&lt;li&gt;Blueberries&lt;/li&gt;&lt;li&gt;Strawberries&lt;/li&gt;&lt;li&gt;Bananas&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Citrus:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Lemon&lt;/li&gt;&lt;li&gt;Lime&lt;/li&gt;&lt;li&gt;Orange&lt;/li&gt;&lt;li&gt;Grapefruit&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;' ) &amp;&amp; html.includes( '&lt;div&gt;&lt;h2&gt;Vegetables:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Brussel Sprouts&lt;/li&gt;&lt;li&gt;Broccoli&lt;/li&gt;&lt;li&gt;Squash&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;' ) ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html#hints"
  },"482": {
    "doc": "Render a Class Component to the DOM",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html#seed"
  },"483": {
    "doc": "Render a Class Component to the DOM",
    "title": "–before-user-code–",
    "content": "const Fruits = () =&gt; { return ( &lt;div&gt; &lt;h2&gt;Fruits:&lt;/h2&gt; &lt;h4&gt;Non-Citrus:&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Apples&lt;/li&gt; &lt;li&gt;Blueberries&lt;/li&gt; &lt;li&gt;Strawberries&lt;/li&gt; &lt;li&gt;Bananas&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;Citrus:&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Lemon&lt;/li&gt; &lt;li&gt;Lime&lt;/li&gt; &lt;li&gt;Orange&lt;/li&gt; &lt;li&gt;Grapefruit&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ); }; const Vegetables = () =&gt; { return ( &lt;div&gt; &lt;h2&gt;Vegetables:&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Brussel Sprouts&lt;/li&gt; &lt;li&gt;Broccoli&lt;/li&gt; &lt;li&gt;Squash&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ); }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html#before-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html#before-user-code"
  },"484": {
    "doc": "Render a Class Component to the DOM",
    "title": "–seed-contents–",
    "content": "class TypesOfFood extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;Types of Food:&lt;/h1&gt; {/* Change code below this line */} {/* Change code above this line */} &lt;/div&gt; ); } }; // Change code below this line . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html#seed-contents"
  },"485": {
    "doc": "Render a Class Component to the DOM",
    "title": "–solutions–",
    "content": "class TypesOfFood extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;Types of Food:&lt;/h1&gt; {/* Change code below this line */} &lt;Fruits /&gt; &lt;Vegetables /&gt; {/* Change code above this line */} &lt;/div&gt; ); } }; // Change code below this line ReactDOM.render(&lt;TypesOfFood /&gt;, document.getElementById('challenge-node')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-a-class-component-to-the-dom.html#solutions"
  },"486": {
    "doc": "Render Conditionally from Props",
    "title": "Render Conditionally from Props",
    "content": "So far, you’ve seen how to use if/else, &amp;&amp;, and the ternary operator (condition ? expressionIfTrue : expressionIfFalse) to make conditional decisions about what to render and when. However, there’s one important topic left to discuss that lets you combine any or all of these concepts with another powerful React feature: props. Using props to conditionally render code is very common with React developers — that is, they use the value of a given prop to automatically make decisions about what to render. In this challenge, you’ll set up a child component to make rendering decisions based on props. You’ll also use the ternary operator, but you can see how several of the other concepts that were covered in the last few challenges might be just as useful in this context. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html"
  },"487": {
    "doc": "Render Conditionally from Props",
    "title": "–instructions–",
    "content": "The code editor has two components that are partially defined for you: a parent called GameOfChance, and a child called Results. They are used to create a simple game where the user presses a button to see if they win or lose. First, you’ll need a simple expression that randomly returns a different value every time it is run. You can use Math.random(). This method returns a value between 0 (inclusive) and 1 (exclusive) each time it is called. So for 50/50 odds, use Math.random() &gt;= .5 in your expression. Statistically speaking, this expression will return true 50% of the time, and false the other 50%. In the render method, replace null with the above expression to complete the variable declaration. Now you have an expression that you can use to make a randomized decision in the code. Next you need to implement this. Render the Results component as a child of GameOfChance, and pass in expression as a prop called fiftyFifty. In the Results component, write a ternary expression to render the h1 element with the text You Win! or You Lose! based on the fiftyFifty prop that’s being passed in from GameOfChance. Finally, make sure the handleClick() method is correctly counting each turn so the user knows how many times they’ve played. This also serves to let the user know the component has actually updated in case they win or lose twice in a row. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html#instructions"
  },"488": {
    "doc": "Render Conditionally from Props",
    "title": "–hints–",
    "content": "The GameOfChance component should exist and render to the page. assert.strictEqual( Enzyme.mount(React.createElement(GameOfChance)).find('GameOfChance').length, 1 ); . GameOfChance should return a single button element. assert.strictEqual( Enzyme.mount(React.createElement(GameOfChance)).find('button').length, 1 ); . GameOfChance should return a single instance of the Results component, which has a prop called fiftyFifty. assert( Enzyme.mount(React.createElement(GameOfChance)).find('Results').length === 1 &amp;&amp; Enzyme.mount(React.createElement(GameOfChance)) .find('Results') .props() .hasOwnProperty('fiftyFifty') === true ); . GameOfChance state should be initialized with a property of counter set to a value of 1. assert.strictEqual( Enzyme.mount(React.createElement(GameOfChance)).state().counter, 1 ); . When the GameOfChance component is first rendered to the DOM, a p element should be returned with the inner text of Turn: 1. assert.strictEqual( Enzyme.mount(React.createElement(GameOfChance)).find('p').text(), 'Turn: 1' ); . Each time the button is clicked, the counter state should be incremented by a value of 1, and a single p element should be rendered to the DOM that contains the text Turn: N, where N is the value of the counter state. (() =&gt; { const comp = Enzyme.mount(React.createElement(GameOfChance)); const simulate = () =&gt; { comp.find('button').simulate('click'); }; const result = () =&gt; ({ count: comp.state('counter'), text: comp.find('p').text() }); const _1 = () =&gt; { simulate(); return result(); }; const _2 = () =&gt; { simulate(); return result(); }; const _3 = () =&gt; { simulate(); return result(); }; const _4 = () =&gt; { simulate(); return result(); }; const _5 = () =&gt; { simulate(); return result(); }; const _1_val = _1(); const _2_val = _2(); const _3_val = _3(); const _4_val = _4(); const _5_val = _5(); assert( _1_val.count === 2 &amp;&amp; _1_val.text === 'Turn: 2' &amp;&amp; _2_val.count === 3 &amp;&amp; _2_val.text === 'Turn: 3' &amp;&amp; _3_val.count === 4 &amp;&amp; _3_val.text === 'Turn: 4' &amp;&amp; _4_val.count === 5 &amp;&amp; _4_val.text === 'Turn: 5' &amp;&amp; _5_val.count === 6 &amp;&amp; _5_val.text === 'Turn: 6' ); })(); . When the GameOfChance component is first mounted to the DOM and each time the button is clicked thereafter, a single h1 element should be returned that randomly renders either You Win! or You Lose!. Note: this can fail randomly. If that happens, please try again. (() =&gt; { const comp = Enzyme.mount(React.createElement(GameOfChance)); const simulate = () =&gt; { comp.find('button').simulate('click'); }; const result = () =&gt; ({ h1: comp.find('h1').length, text: comp.find('h1').text() }); const _1 = result(); const _2 = () =&gt; { simulate(); return result(); }; const _3 = () =&gt; { simulate(); return result(); }; const _4 = () =&gt; { simulate(); return result(); }; const _5 = () =&gt; { simulate(); return result(); }; const _6 = () =&gt; { simulate(); return result(); }; const _7 = () =&gt; { simulate(); return result(); }; const _8 = () =&gt; { simulate(); return result(); }; const _9 = () =&gt; { simulate(); return result(); }; const _10 = () =&gt; { simulate(); return result(); }; const _2_val = _2(); const _3_val = _3(); const _4_val = _4(); const _5_val = _5(); const _6_val = _6(); const _7_val = _7(); const _8_val = _8(); const _9_val = _9(); const _10_val = _10(); const __text = new Set([ _1.text, _2_val.text, _3_val.text, _4_val.text, _5_val.text, _6_val.text, _7_val.text, _8_val.text, _9_val.text, _10_val.text ]); const __h1 = new Set([ _1.h1, _2_val.h1, _3_val.h1, _4_val.h1, _5_val.h1, _6_val.h1, _7_val.h1, _8_val.h1, _9_val.h1, _10_val.h1 ]); assert(__text.size === 2 &amp;&amp; __h1.size === 1); })(); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html#hints"
  },"489": {
    "doc": "Render Conditionally from Props",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html#seed"
  },"490": {
    "doc": "Render Conditionally from Props",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;GameOfChance /&gt;, document.getElementById('root')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html#after-user-code"
  },"491": {
    "doc": "Render Conditionally from Props",
    "title": "–seed-contents–",
    "content": "class Results extends React.Component { constructor(props) { super(props); } render() { {/* Change code below this line */} return &lt;h1&gt;&lt;/h1&gt;; {/* Change code above this line */} } } class GameOfChance extends React.Component { constructor(props) { super(props); this.state = { counter: 1 }; this.handleClick = this.handleClick.bind(this); } handleClick() { this.setState(prevState =&gt; { // Complete the return statement: return { counter: prevState } }); } render() { const expression = null; // Change this line return ( &lt;div&gt; &lt;button onClick={this.handleClick}&gt;Play Again&lt;/button&gt; {/* Change code below this line */} {/* Change code above this line */} &lt;p&gt;{'Turn: ' + this.state.counter}&lt;/p&gt; &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html#seed-contents"
  },"492": {
    "doc": "Render Conditionally from Props",
    "title": "–solutions–",
    "content": "// We want this to be deterministic for testing purposes. const randomSequence = [true, false, false, true, true, false, false, true, true, false]; let index = 0; const fiftyFifty = () =&gt; randomSequence[index++ % randomSequence.length]; class Results extends React.Component { constructor(props) { super(props); } render() { return &lt;h1&gt;{this.props.fiftyFifty ? 'You Win!' : 'You Lose!'}&lt;/h1&gt;; } } class GameOfChance extends React.Component { constructor(props) { super(props); this.state = { counter: 1 }; this.handleClick = this.handleClick.bind(this); } handleClick() { this.setState(prevState =&gt; { return { counter: prevState.counter + 1 } }); } render() { return ( &lt;div&gt; &lt;button onClick={this.handleClick}&gt;Play Again&lt;/button&gt; &lt;Results fiftyFifty={fiftyFifty()} /&gt; &lt;p&gt;{'Turn: ' + this.state.counter}&lt;/p&gt; &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-conditionally-from-props.html#solutions"
  },"493": {
    "doc": "Render HTML Element to the DOM",
    "title": "Render HTML Element to the DOM",
    "content": "So far, you’ve learned that JSX is a convenient tool to write readable HTML within JavaScript. With React, we can render this JSX directly to the HTML DOM using React’s rendering API known as ReactDOM. ReactDOM offers a simple method to render React elements to the DOM which looks like this: ReactDOM.render(componentToRender, targetNode), where the first argument is the React element or component that you want to render, and the second argument is the DOM node that you want to render the component to. As you would expect, ReactDOM.render() must be called after the JSX element declarations, just like how you must declare variables before using them. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-html-elements-to-the-dom.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-html-elements-to-the-dom.html"
  },"494": {
    "doc": "Render HTML Element to the DOM",
    "title": "–instructions–",
    "content": "The code editor has a simple JSX component. Use the ReactDOM.render() method to render this component to the page. You can pass defined JSX elements directly in as the first argument and use document.getElementById() to select the DOM node to render them to. There is a div with id='challenge-node' available for you to use. Make sure you don’t change the JSX constant. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-html-elements-to-the-dom.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-html-elements-to-the-dom.html#instructions"
  },"495": {
    "doc": "Render HTML Element to the DOM",
    "title": "–hints–",
    "content": "The constant JSX should return a div element. assert(JSX.type === 'div'); . The div should contain an h1 tag as the first element. assert(JSX.props.children[0].type === 'h1'); . The div should contain a p tag as the second element. assert(JSX.props.children[1].type === 'p'); . The provided JSX element should render to the DOM node with id challenge-node. assert( document.getElementById('challenge-node').childNodes[0].innerHTML === '&lt;h1&gt;Hello World&lt;/h1&gt;&lt;p&gt;Lets render this to the DOM&lt;/p&gt;' ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-html-elements-to-the-dom.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-html-elements-to-the-dom.html#hints"
  },"496": {
    "doc": "Render HTML Element to the DOM",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-html-elements-to-the-dom.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-html-elements-to-the-dom.html#seed"
  },"497": {
    "doc": "Render HTML Element to the DOM",
    "title": "–seed-contents–",
    "content": "const JSX = ( &lt;div&gt; &lt;h1&gt;Hello World&lt;/h1&gt; &lt;p&gt;Lets render this to the DOM&lt;/p&gt; &lt;/div&gt; ); // Add your code below this line . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-html-elements-to-the-dom.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-html-elements-to-the-dom.html#seed-contents"
  },"498": {
    "doc": "Render HTML Element to the DOM",
    "title": "–solutions–",
    "content": "const JSX = ( &lt;div&gt; &lt;h1&gt;Hello World&lt;/h1&gt; &lt;p&gt;Lets render this to the DOM&lt;/p&gt; &lt;/div&gt; ); // Add your code below this line ReactDOM.render(JSX, document.getElementById('challenge-node')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-html-elements-to-the-dom.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-html-elements-to-the-dom.html#solutions"
  },"499": {
    "doc": "Render React on the Server with renderToString",
    "title": "Render React on the Server with renderToString",
    "content": "So far, you have been rendering React components on the client. Normally, this is what you will always do. However, there are some use cases where it makes sense to render a React component on the server. Since React is a JavaScript view library and you can run JavaScript on the server with Node, this is possible. In fact, React provides a renderToString() method you can use for this purpose. There are two key reasons why rendering on the server may be used in a real world app. First, without doing this, your React apps would consist of a relatively empty HTML file and a large bundle of JavaScript when it’s initially loaded to the browser. This may not be ideal for search engines that are trying to index the content of your pages so people can find you. If you render the initial HTML markup on the server and send this to the client, the initial page load contains all of the page’s markup which can be crawled by search engines. Second, this creates a faster initial page load experience because the rendered HTML is smaller than the JavaScript code of the entire app. React will still be able to recognize your app and manage it after the initial load. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html"
  },"500": {
    "doc": "Render React on the Server with renderToString",
    "title": "–instructions–",
    "content": "The renderToString() method is provided on ReactDOMServer, which is available here as a global object. The method takes one argument which is a React element. Use this to render App to a string. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#instructions"
  },"501": {
    "doc": "Render React on the Server with renderToString",
    "title": "–hints–",
    "content": "The App component should render to a string using ReactDOMServer.renderToString. (getUserInput) =&gt; assert( getUserInput('index') .replace(/ /g, '') .includes('ReactDOMServer.renderToString(&lt;App/&gt;)') &amp;&amp; Enzyme.mount(React.createElement(App)).children().name() === 'div' ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#hints"
  },"502": {
    "doc": "Render React on the Server with renderToString",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#seed"
  },"503": {
    "doc": "Render React on the Server with renderToString",
    "title": "–before-user-code–",
    "content": "var ReactDOMServer = { renderToString(x) { return null; } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#before-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#before-user-code"
  },"504": {
    "doc": "Render React on the Server with renderToString",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;App /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#after-user-code"
  },"505": {
    "doc": "Render React on the Server with renderToString",
    "title": "–seed-contents–",
    "content": "class App extends React.Component { constructor(props) { super(props); } render() { return &lt;div/&gt; } }; // Change code below this line . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#seed-contents"
  },"506": {
    "doc": "Render React on the Server with renderToString",
    "title": "–solutions–",
    "content": "class App extends React.Component { constructor(props) { super(props); } render() { return &lt;div/&gt; } }; // Change code below this line ReactDOMServer.renderToString(&lt;App/&gt;); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-react-on-the-server-with-rendertostring.html#solutions"
  },"507": {
    "doc": "Render State in the User Interface",
    "title": "Render State in the User Interface",
    "content": "Once you define a component’s initial state, you can display any part of it in the UI that is rendered. If a component is stateful, it will always have access to the data in state in its render() method. You can access the data with this.state. If you want to access a state value within the return of the render method, you have to enclose the value in curly braces. state is one of the most powerful features of components in React. It allows you to track important data in your app and render a UI in response to changes in this data. If your data changes, your UI will change. React uses what is called a virtual DOM, to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop. React updates the actual DOM, but only where necessary. This means you don’t have to worry about changing the DOM. You simply declare what the UI should look like. Note that if you make a component stateful, no other components are aware of its state. Its state is completely encapsulated, or local to that component, unless you pass state data to a child component as props. This notion of encapsulated state is very important because it allows you to write certain logic, then have that logic contained and isolated in one place in your code. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#render-state-in-the-user-interface",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#render-state-in-the-user-interface"
  },"508": {
    "doc": "Render State in the User Interface",
    "title": "–instructions–",
    "content": "In the code editor, MyComponent is already stateful. Define an h1 tag in the component’s render method which renders the value of name from the component’s state. Note: The h1 should only render the value from state and nothing else. In JSX, any code you write with curly braces { } will be treated as JavaScript. So to access the value from state just enclose the reference in curly braces. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#instructions"
  },"509": {
    "doc": "Render State in the User Interface",
    "title": "–hints–",
    "content": "MyComponent should have a key name with value freeCodeCamp stored in its state. assert( Enzyme.mount(React.createElement(MyComponent)).state('name') === 'freeCodeCamp' ); . MyComponent should render an h1 heading element enclosed in a single div. assert( /&lt;div&gt;&lt;h1&gt;.*&lt;\\/h1&gt;&lt;\\/div&gt;/.test( Enzyme.mount(React.createElement(MyComponent)).html() ) ); . The rendered h1 heading element should only contain text rendered from the component’s state. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () =&gt; { mockedComponent.setState({ name: 'TestName' }); return waitForIt(() =&gt; mockedComponent.html()); }; const firstValue = await first(); const getValue = firstValue.replace(/\\s/g, ''); assert(getValue === '&lt;div&gt;&lt;h1&gt;TestName&lt;/h1&gt;&lt;/div&gt;'); }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#hints"
  },"510": {
    "doc": "Render State in the User Interface",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#seed"
  },"511": {
    "doc": "Render State in the User Interface",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#after-user-code"
  },"512": {
    "doc": "Render State in the User Interface",
    "title": "–seed-contents–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { name: 'freeCodeCamp' } } render() { return ( &lt;div&gt; { /* Change code below this line */ } { /* Change code above this line */ } &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#seed-contents"
  },"513": {
    "doc": "Render State in the User Interface",
    "title": "–solutions–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { name: 'freeCodeCamp' } } render() { return ( &lt;div&gt; { /* Change code below this line */ } &lt;h1&gt;{this.state.name}&lt;/h1&gt; { /* Change code above this line */ } &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html#solutions"
  },"514": {
    "doc": "Render State in the User Interface",
    "title": "Render State in the User Interface",
    "content": ". id: 5a24c314108439a4d4036171 title: challengeType: 6 forumTopicId: 301409 dashedName: render-state-in-the-user-interface — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-state-in-the-user-interface.html"
  },"515": {
    "doc": "Render with an If-Else Condition",
    "title": "Render with an If-Else Condition",
    "content": "Another application of using JavaScript to control your rendered view is to tie the elements that are rendered to a condition. When the condition is true, one view renders. When it’s false, it’s a different view. You can do this with a standard if/else statement in the render() method of a React component. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#render-with-an-if-else-condition",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#render-with-an-if-else-condition"
  },"516": {
    "doc": "Render with an If-Else Condition",
    "title": "–instructions–",
    "content": "MyComponent contains a boolean in its state which tracks whether you want to display some element in the UI or not. The button toggles the state of this value. Currently, it renders the same UI every time. Rewrite the render() method with an if/else statement so that if display is true, you return the current markup. Otherwise, return the markup without the h1 element. Note: You must write an if/else to pass the tests. Use of the ternary operator will not pass here. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#instructions"
  },"517": {
    "doc": "Render with an If-Else Condition",
    "title": "–hints–",
    "content": "MyComponent should exist and render. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('MyComponent').length === 1; })() ); . When display is set to true, a div, button, and h1 should render. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const state_1 = () =&gt; { mockedComponent.setState({ display: true }); return waitForIt(() =&gt; mockedComponent); }; const updated = await state_1(); assert( mockedComponent.find('div').length === 1 &amp;&amp; mockedComponent.find('div').children().length === 2 &amp;&amp; mockedComponent.find('button').length === 1 &amp;&amp; mockedComponent.find('h1').length === 1 ); }; . When display is set to false, only a div and button should render. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const state_1 = () =&gt; { mockedComponent.setState({ display: false }); return waitForIt(() =&gt; mockedComponent); }; const updated = await state_1(); assert( mockedComponent.find('div').length === 1 &amp;&amp; mockedComponent.find('div').children().length === 1 &amp;&amp; mockedComponent.find('button').length === 1 &amp;&amp; mockedComponent.find('h1').length === 0 ); }; . The render method should use an if/else statement to check the condition of this.state.display. (getUserInput) =&gt; assert( getUserInput('index').includes('if') &amp;&amp; getUserInput('index').includes('else') ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#hints"
  },"518": {
    "doc": "Render with an If-Else Condition",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#seed"
  },"519": {
    "doc": "Render with an If-Else Condition",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#after-user-code"
  },"520": {
    "doc": "Render with an If-Else Condition",
    "title": "–seed-contents–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { display: true } this.toggleDisplay = this.toggleDisplay.bind(this); } toggleDisplay() { this.setState((state) =&gt; ({ display: !state.display })); } render() { // Change code below this line return ( &lt;div&gt; &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt; &lt;h1&gt;Displayed!&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#seed-contents"
  },"521": {
    "doc": "Render with an If-Else Condition",
    "title": "–solutions–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { display: true } this.toggleDisplay = this.toggleDisplay.bind(this); } toggleDisplay() { this.setState((state) =&gt; ({ display: !state.display })); } render() { // Change code below this line if (this.state.display) { return ( &lt;div&gt; &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt; &lt;h1&gt;Displayed!&lt;/h1&gt; &lt;/div&gt; ); } else { return ( &lt;div&gt; &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt; &lt;/div&gt; ); } } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html#solutions"
  },"522": {
    "doc": "Render with an If-Else Condition",
    "title": "Render with an If-Else Condition",
    "content": ". id: 5a24c314108439a4d4036184 title: challengeType: 6 forumTopicId: 301410 dashedName: render-with-an-if-else-condition — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/render-with-an-if-else-condition.html"
  },"523": {
    "doc": "REST",
    "title": "REST/RESTful API",
    "content": "Stands for Represenational State Transfer . ",
    "url": "http://localhost:4000/API/rest-api.html#restrestful-api",
    "relUrl": "/API/rest-api.html#restrestful-api"
  },"524": {
    "doc": "REST",
    "title": "REST",
    "content": " ",
    "url": "http://localhost:4000/API/rest-api.html",
    "relUrl": "/API/rest-api.html"
  },"525": {
    "doc": "Review Using Props with Stateless Functional Components",
    "title": "Review Using Props with Stateless Functional Components",
    "content": "Except for the last challenge, you’ve been passing props to stateless functional components. These components act like pure functions. They accept props as input and return the same view every time they are passed the same props. You may be wondering what state is, and the next challenge will cover it in more detail. Before that, here’s a review of the terminology for components. A stateless functional component is any function you write which accepts props and returns JSX. A stateless component, on the other hand, is a class that extends React.Component, but does not use internal state (covered in the next challenge). Finally, a stateful component is a class component that does maintain its own internal state. You may see stateful components referred to simply as components or React components. A common pattern is to try to minimize statefulness and to create stateless functional components wherever possible. This helps contain your state management to a specific area of your application. In turn, this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html"
  },"526": {
    "doc": "Review Using Props with Stateless Functional Components",
    "title": "–instructions–",
    "content": "The code editor has a CampSite component that renders a Camper component as a child. Define the Camper component and assign it default props of { name: 'CamperBot' }. Inside the Camper component, render any code that you want, but make sure to have one p element that includes only the name value that is passed in as a prop. Finally, define propTypes on the Camper component to require name to be provided as a prop and verify that it is of type string. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#instructions"
  },"527": {
    "doc": "Review Using Props with Stateless Functional Components",
    "title": "–hints–",
    "content": "The CampSite component should render. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); return mockedComponent.find('CampSite').length === 1; })() ); . The Camper component should render. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); return mockedComponent.find('Camper').length === 1; })() ); . The Camper component should include default props which assign the string CamperBot to the key name. assert( /Camper.defaultProps={name:(['\"`])CamperBot\\1,?}/.test( __helpers.removeWhiteSpace(code) ) ); . The Camper component should include prop types which require the name prop to be of type string. assert( /Camper.propTypes={name:PropTypes.string.isRequired,?}/.test( __helpers.removeWhiteSpace(code) ) ); . The Camper component should contain a p element with only the text from the name prop. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); return ( mockedComponent.find('p').text() === mockedComponent.find('Camper').props().name ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#hints"
  },"528": {
    "doc": "Review Using Props with Stateless Functional Components",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#seed"
  },"529": {
    "doc": "Review Using Props with Stateless Functional Components",
    "title": "–before-user-code–",
    "content": "var PropTypes = { string: { isRequired: true } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#before-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#before-user-code"
  },"530": {
    "doc": "Review Using Props with Stateless Functional Components",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;CampSite /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#after-user-code"
  },"531": {
    "doc": "Review Using Props with Stateless Functional Components",
    "title": "–seed-contents–",
    "content": "class CampSite extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;Camper/&gt; &lt;/div&gt; ); } }; // Change code below this line . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#seed-contents"
  },"532": {
    "doc": "Review Using Props with Stateless Functional Components",
    "title": "–solutions–",
    "content": "class CampSite extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;Camper/&gt; &lt;/div&gt; ); } }; // Change code below this line const Camper = (props) =&gt; { return ( &lt;div&gt; &lt;p&gt;{props.name}&lt;/p&gt; &lt;/div&gt; ); }; Camper.propTypes = { name: PropTypes.string.isRequired }; Camper.defaultProps = { name: 'CamperBot' }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/review-using-props-with-stateless-functional-components.html#solutions"
  },"533": {
    "doc": "Running WP CLI",
    "title": "Running WP CLI",
    "content": "When all setup with the WP CLI, you can use command started with wp followed by the subcommands. To see the list of subcommands, just type wp or wp --help or if you wish to know the list of sub-sub-commands, for example wp user run wp user --help and it will list the sub sub commands. For example, if I want to see the list of themes installed on my WP build, I just type the wp followed with subcommand theme then the task command list : . wp theme list . It will give you list of the theme: . +-----------------+----------+--------+---------+ | name | status | update | version | +-----------------+----------+--------+---------+ | twentyeleven | inactive | none | 3.6 | twentyfifteen | inactive | none | 2.8 | twentyfourteen | inactive | none | 3.0 | twentynineteen | inactive | none | 1.9 | twentyseventeen | inactive | none | 2.5 | twentysixteen | inactive | none | 2.3 | twentyten | inactive | none | 3.2 | twentythirteen | inactive | none | 3.2 | twentytwelve | inactive | none | 3.3 | twentytwenty | inactive | none | 1.6 | nasigoreng | active | none | 1.1 | +-----------------+----------+--------+---------+ . To activate or deactivate theme: wp followed with sub command theme then the task command activate then the object which is the theme name e.g. twentytwenty . wp theme activate twentytwenty . It will switch the theme from twentytwentyone to twentytwenty . Success: Switched to 'Twenty Twenty' theme. Running in DDEV environment . If you are running the WP install in DDEV environment, add ddev before wp . ddev wp theme activate twentytwenty . Or else if will return error connecting database: . Error: Error establishing a database connection. ",
    "url": "http://localhost:4000/CMS/Wordpress/running-wp-cli.html",
    "relUrl": "/CMS/Wordpress/running-wp-cli.html"
  },"534": {
    "doc": "Running WP CLI",
    "title": "wp scaffold",
    "content": "wp scaffold will help us create some codes for creating: . | child theme | post types | custom plugins starter | taxonomy | created theme based on Underscores | . To use the wp scaffold just add the subcommands and the name. Example below is creating child theme from twentytwenty: . wp scaffold child-theme nasi-goreng --parent_theme=twentytwenty . To create a custom theme starter based on _s Undrescore, theme name nasi-goreng: . wp scaffold _s my-theme --theme_name=\"Nasi Goreng\" --author=\"Emperor Nasi Goreng\" . If the command above didn’t work and give you this message ; . Error: Could not decompress your theme files ('/tmp/underscores-aede5jGF.tmp') at '/path-to-your-folder/wp/wp-content/themes': Incompatible Archive. just go to the Underscores website and generate it from the form, then download and install like a usual WP theme install. ",
    "url": "http://localhost:4000/CMS/Wordpress/running-wp-cli.html#wp-scaffold",
    "relUrl": "/CMS/Wordpress/running-wp-cli.html#wp-scaffold"
  },"535": {
    "doc": "Running WP CLI",
    "title": "wp search-replace",
    "content": "This will search through the database rows of tables and replace the first string with second one. This command uses tables that are registerd in $wpdb . Example, I want to replace all nasi terms and replace them with goreng: . wp search-replace nasi goreng . Recommended to use --dry run to be sure of what you are doing, just to show you the changes that will be made before confirming the action. And it will show you the number of changes made: . +------------------+-----------------------+--------------+------+ | Table | Column | Replacements | Type | +------------------+-----------------------+--------------+------+ | woop_commentmeta | meta_key | 0 | SQL | woop_commentmeta | meta_value | 0 | SQL | woop_comments | comment_author | 0 | SQL | woop_comments | comment_author_email | 0 | SQL | woop_comments | comment_author_url | 0 | SQL | woop_comments | comment_author_IP | 0 | SQL | woop_comments | comment_content | 0 | SQL | woop_comments | comment_approved | 0 | SQL | woop_comments | comment_agent | 0 | SQL | woop_comments | comment_type | 0 | SQL | woop_links | link_url | 0 | SQL | woop_links | link_name | 0 | SQL | woop_links | link_image | 0 | SQL | woop_links | link_target | 0 | SQL | woop_links | link_description | 0 | SQL | woop_links | link_visible | 0 | SQL | woop_links | link_rel | 0 | SQL | woop_links | link_notes | 0 | SQL | woop_links | link_rss | 0 | SQL | woop_options | option_name | 0 | SQL | woop_options | option_value | 8 | PHP | woop_options | autoload | 0 | SQL | woop_postmeta | meta_key | 0 | SQL | woop_postmeta | meta_value | 0 | SQL | woop_posts | post_content | 2 | SQL | woop_posts | post_title | 0 | SQL | woop_posts | post_excerpt | 0 | SQL | woop_posts | post_status | 0 | SQL | woop_posts | comment_status | 0 | SQL | woop_posts | ping_status | 0 | SQL | woop_posts | post_password | 0 | SQL | woop_posts | post_name | 0 | SQL | woop_posts | to_ping | 0 | SQL | woop_posts | pinged | 0 | SQL | woop_posts | post_content_filtered | 0 | SQL | woop_posts | guid | 4 | SQL | woop_posts | post_type | 0 | SQL | woop_posts | post_mime_type | 0 | SQL | woop_term_taxonomy | taxonomy | 0 | SQL | woop_term_taxonomy | description | 0 | SQL | woop_termmeta | meta_key | 0 | SQL | woop_termmeta | meta_value | 0 | SQL | woop_terms | name | 0 | SQL | woop_terms | slug | 0 | SQL | woop_usermeta | meta_key | 0 | SQL | woop_usermeta | meta_value | 0 | PHP | woop_users | user_login | 0 | SQL | woop_users | user_nicename | 0 | SQL | woop_users | user_email | 0 | SQL | woop_users | user_url | 1 | SQL | woop_users | user_activation_key | 0 | SQL | woop_users | display_name | 0 | SQL | +------------------+-----------------------+--------------+------+ Success: Made 15 replacements. ",
    "url": "http://localhost:4000/CMS/Wordpress/running-wp-cli.html#wp-search-replace",
    "relUrl": "/CMS/Wordpress/running-wp-cli.html#wp-search-replace"
  },"536": {
    "doc": "Running WP CLI",
    "title": "Create admin user withwp user",
    "content": "Create user with the role: . wp user create name name@email.com --role=administrator #this will create user Success: Created user 2. #and default password Password: ^oRY2M$GgElWjhan^(FEsrD5TD . Then you can reset pasword: . wp user reset-password &lt;user&gt;... [--skip-email] . To add admin user from existing, change the role: . wp user set-role &lt;user&gt; [&lt;role&gt;] . ",
    "url": "http://localhost:4000/CMS/Wordpress/running-wp-cli.html#create-admin-user-withwp-user",
    "relUrl": "/CMS/Wordpress/running-wp-cli.html#create-admin-user-withwp-user"
  },"537": {
    "doc": "Running Codeigniter4",
    "title": "Running your app",
    "content": "+There are three ways of running Codeigniter4 . | hosted on web server | using visualisation | using Codeigniter CLI for testing | . It is recommended to read the user guide if you are new to building a dynamic PHP aplication . ",
    "url": "http://localhost:4000/php-ramework/Codeigniter/running.html#running-your-app",
    "relUrl": "/php-ramework/Codeigniter/running.html#running-your-app"
  },"538": {
    "doc": "Running Codeigniter4",
    "title": "Local development settings",
    "content": "CodeIgniter 4 comes with a local development server, leveraging PHP’s built-in web server with CodeIgniter routing. You can use the serve script to launch it, with the following command line in the main directory: . php spark serve . ",
    "url": "http://localhost:4000/php-ramework/Codeigniter/running.html#local-development-settings",
    "relUrl": "/php-ramework/Codeigniter/running.html#local-development-settings"
  },"539": {
    "doc": "Running Codeigniter4",
    "title": "Running Codeigniter4",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Codeigniter/running.html",
    "relUrl": "/php-ramework/Codeigniter/running.html"
  },"540": {
    "doc": "Sail",
    "title": "Sail",
    "content": "Sail is the drush or wp-cli equivalent for Laravel which is a light-weight CLI. sail is stored in the docker-compose.yml in the project root. ",
    "url": "http://localhost:4000/php-ramework/Laravel/sail.html",
    "relUrl": "/php-ramework/Laravel/sail.html"
  },"541": {
    "doc": "Sail",
    "title": "Install",
    "content": "Install sail with Composer: . composer require laravel/sail --dev . After Sail has been installed, you may run the sail:install Artisan command. This command will publish Sail’s docker-compose.yml file to the root of your application: . php artisan sail:install . By default, to run the sail it’s : .vendor/bin/sail up -d . ",
    "url": "http://localhost:4000/php-ramework/Laravel/sail.html#install",
    "relUrl": "/php-ramework/Laravel/sail.html#install"
  },"542": {
    "doc": "Sail",
    "title": "Setup alias",
    "content": "Instead of typing all those path, you should make an alias on the bash profile. Run these command and you don’t have to edit the .bash profile: . export COMPOSE_FILE=docker-compose.yml alias sail='bash vendor/bin/sail' . ",
    "url": "http://localhost:4000/php-ramework/Laravel/sail.html#setup-alias",
    "relUrl": "/php-ramework/Laravel/sail.html#setup-alias"
  },"543": {
    "doc": "Sail",
    "title": "Commands",
    "content": "Start &amp; stop . Start: . sail up . Start with detached mode: . sail up -d . That should give you the location of your development site, most likely on http://0.0.0.0:80: . nt server: http://0.0.0.0:80 laravel.test_1 | [Wed Mar 17 03:04:28 2021] PHP 8.0.1 Development Server (http://0.0.0.0:80) started . To stop all containers: . sail down . ",
    "url": "http://localhost:4000/php-ramework/Laravel/sail.html#commands",
    "relUrl": "/php-ramework/Laravel/sail.html#commands"
  },"544": {
    "doc": "Send Action Data to the Store",
    "title": "–description–",
    "content": "By now you’ve learned how to dispatch actions to the Redux store, but so far these actions have not contained any information other than a type. You can also send specific data along with your actions. In fact, this is very common because actions usually originate from some user interaction and tend to carry some data with them. The Redux store often needs to know about this data. ",
    "url": "http://localhost:4000/js-libraries/redux/send-action-data-to-the-store.html#description",
    "relUrl": "/js-libraries/redux/send-action-data-to-the-store.html#description"
  },"545": {
    "doc": "Send Action Data to the Store",
    "title": "–instructions–",
    "content": "There’s a basic notesReducer() and an addNoteText() action creator defined in the code editor. Finish the body of the addNoteText() function so that it returns an action object. The object should include a type property with a value of ADD_NOTE, and also a text property set to the note data that’s passed into the action creator. When you call the action creator, you’ll pass in specific note information that you can access for the object. Next, finish writing the switch statement in the notesReducer(). You need to add a case that handles the addNoteText() actions. This case should be triggered whenever there is an action of type ADD_NOTE and it should return the text property on the incoming action as the new state. The action is dispatched at the bottom of the code. Once you’re finished, run the code and watch the console. That’s all it takes to send action-specific data to the store and use it when you update store state. ",
    "url": "http://localhost:4000/js-libraries/redux/send-action-data-to-the-store.html#instructions",
    "relUrl": "/js-libraries/redux/send-action-data-to-the-store.html#instructions"
  },"546": {
    "doc": "Send Action Data to the Store",
    "title": "–hints–",
    "content": "The action creator addNoteText should return an object with keys type and text. assert( (function () { const addNoteFn = addNoteText('__TEST__NOTE'); return addNoteFn.type === ADD_NOTE &amp;&amp; addNoteFn.text === '__TEST__NOTE'; })() ); . Dispatching an action of type ADD_NOTE with the addNoteText action creator should update the state to the string passed to the action creator. assert( (function () { const initialState = store.getState(); store.dispatch(addNoteText('__TEST__NOTE')); const newState = store.getState(); return initialState !== newState &amp;&amp; newState === '__TEST__NOTE'; })() ); . ",
    "url": "http://localhost:4000/js-libraries/redux/send-action-data-to-the-store.html#hints",
    "relUrl": "/js-libraries/redux/send-action-data-to-the-store.html#hints"
  },"547": {
    "doc": "Send Action Data to the Store",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/send-action-data-to-the-store.html#seed",
    "relUrl": "/js-libraries/redux/send-action-data-to-the-store.html#seed"
  },"548": {
    "doc": "Send Action Data to the Store",
    "title": "–seed-contents–",
    "content": "const ADD_NOTE = 'ADD_NOTE'; const notesReducer = (state = 'Initial State', action) =&gt; { switch(action.type) { // Change code below this line // Change code above this line default: return state; } }; const addNoteText = (note) =&gt; { // Change code below this line // Change code above this line }; const store = Redux.createStore(notesReducer); console.log(store.getState()); store.dispatch(addNoteText('Hello!')); console.log(store.getState()); . ",
    "url": "http://localhost:4000/js-libraries/redux/send-action-data-to-the-store.html#seed-contents",
    "relUrl": "/js-libraries/redux/send-action-data-to-the-store.html#seed-contents"
  },"549": {
    "doc": "Send Action Data to the Store",
    "title": "–solutions–",
    "content": "const ADD_NOTE = 'ADD_NOTE'; const notesReducer = (state = 'Initial State', action) =&gt; { switch(action.type) { // Change code below this line case ADD_NOTE: return action.text; // Change code above this line default: return state; } }; const addNoteText = (note) =&gt; { // Change code below this line return { type: ADD_NOTE, text: note } // Change code above this line }; const store = Redux.createStore(notesReducer); console.log(store.getState()); store.dispatch(addNoteText('Hello Redux!')); console.log(store.getState()); . ",
    "url": "http://localhost:4000/js-libraries/redux/send-action-data-to-the-store.html#solutions",
    "relUrl": "/js-libraries/redux/send-action-data-to-the-store.html#solutions"
  },"550": {
    "doc": "Send Action Data to the Store",
    "title": "Send Action Data to the Store",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/send-action-data-to-the-store.html",
    "relUrl": "/js-libraries/redux/send-action-data-to-the-store.html"
  },"551": {
    "doc": "Server",
    "title": "Server",
    "content": " ",
    "url": "http://localhost:4000/the-basics/server.html",
    "relUrl": "/the-basics/server.html"
  },"552": {
    "doc": "Set State with this.setState",
    "title": "Set State with this.setState",
    "content": "The previous challenges covered component state and how to initialize state in the constructor. There is also a way to change the component’s state. React provides a method for updating component state called setState. You call the setState method within your component class like so: this.setState(), passing in an object with key-value pairs. The keys are your state properties and the values are the updated state data. For instance, if we were storing a username in state and wanted to update it, it would look like this: . this.setState({ username: 'Lewis' }); . React expects you to never modify state directly, instead always use this.setState() when state changes occur. Also, you should note that React may batch multiple state updates in order to improve performance. What this means is that state updates through the setState method can be asynchronous. There is an alternative syntax for the setState method which provides a way around this problem. This is rarely needed but it’s good to keep it in mind! Please consult our React article for further details. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html"
  },"553": {
    "doc": "Set State with this.setState",
    "title": "–instructions–",
    "content": "There is a button element in the code editor which has an onClick() handler. This handler is triggered when the button receives a click event in the browser, and runs the handleClick method defined on MyComponent. Within the handleClick method, update the component state using this.setState(). Set the name property in state to equal the string React Rocks!. Click the button and watch the rendered state update. Don’t worry if you don’t fully understand how the click handler code works at this point. It’s covered in upcoming challenges. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html#instructions"
  },"554": {
    "doc": "Set State with this.setState",
    "title": "–hints–",
    "content": "The state of MyComponent should initialize with the key value pair { name: Initial State }. assert( Enzyme.mount(React.createElement(MyComponent)).state('name') === 'Initial State' ); . MyComponent should render an h1 heading element. assert(Enzyme.mount(React.createElement(MyComponent)).find('h1').length === 1); . The rendered h1 heading element should contain text rendered from the component’s state. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () =&gt; { mockedComponent.setState({ name: 'TestName' }); return waitForIt(() =&gt; mockedComponent.html()); }; const firstValue = await first(); assert(/&lt;h1&gt;TestName&lt;\\/h1&gt;/.test(firstValue)); }; . Calling the handleClick method on MyComponent should set the name property in state to equal React Rocks!. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () =&gt; { mockedComponent.setState({ name: 'Before' }); return waitForIt(() =&gt; mockedComponent.state('name')); }; const second = () =&gt; { mockedComponent.instance().handleClick(); return waitForIt(() =&gt; mockedComponent.state('name')); }; const firstValue = await first(); const secondValue = await second(); assert(firstValue === 'Before' &amp;&amp; secondValue === 'React Rocks!'); }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html#hints"
  },"555": {
    "doc": "Set State with this.setState",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html#seed"
  },"556": {
    "doc": "Set State with this.setState",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html#after-user-code"
  },"557": {
    "doc": "Set State with this.setState",
    "title": "–seed-contents–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { name: 'Initial State' }; this.handleClick = this.handleClick.bind(this); } handleClick() { // Change code below this line // Change code above this line } render() { return ( &lt;div&gt; &lt;button onClick={this.handleClick}&gt;Click Me&lt;/button&gt; &lt;h1&gt;{this.state.name}&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html#seed-contents"
  },"558": {
    "doc": "Set State with this.setState",
    "title": "–solutions–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { name: 'Initial State' }; this.handleClick = this.handleClick.bind(this); } handleClick() { // Change code below this line this.setState({ name: 'React Rocks!' }); // Change code above this line } render() { return ( &lt;div&gt; &lt;button onClick = {this.handleClick}&gt;Click Me&lt;/button&gt; &lt;h1&gt;{this.state.name}&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/set-state-with-this.setstate.html#solutions"
  },"559": {
    "doc": "Docker setup",
    "title": "Setup and Installation",
    "content": "Here’s documentation from Docker site . ",
    "url": "http://localhost:4000/Docker/setup.html#setup-and-installation",
    "relUrl": "/Docker/setup.html#setup-and-installation"
  },"560": {
    "doc": "Docker setup",
    "title": "Docker setup",
    "content": " ",
    "url": "http://localhost:4000/Docker/setup.html",
    "relUrl": "/Docker/setup.html"
  },"561": {
    "doc": "Tables",
    "title": "Table styles on Markdown",
    "content": " ",
    "url": "http://localhost:4000/Markdown/tables.html#table-styles-on-markdown",
    "relUrl": "/Markdown/tables.html#table-styles-on-markdown"
  },"562": {
    "doc": "Tables",
    "title": "Headers",
    "content": "Markdown . | Header Column One | Header Column Two | Header Column Three | Header Column Four | . ",
    "url": "http://localhost:4000/Markdown/tables.html#headers",
    "relUrl": "/Markdown/tables.html#headers"
  },"563": {
    "doc": "Tables",
    "title": "Alignments",
    "content": "Left align: :-- or three dashes --- Right align: --: Centre align: :-: . Place those alignment within pipes in the respective columns. Markdown . | Default Header | Left Align | Right Align | Center Align | --- | :-- | --: | :-: | . ",
    "url": "http://localhost:4000/Markdown/tables.html#alignments",
    "relUrl": "/Markdown/tables.html#alignments"
  },"564": {
    "doc": "Tables",
    "title": "Table contents",
    "content": "Every columns is separated with pipe | and every row is placed in different lines: . Markdown . | Column 1 Header | Column 2 Header | Column 3 Header | --------------- | --------------- | --------------- | Row 1 Column 1 | Row 1 Column 2 | Row 1 Column 3 | Row 2 Column 1 | Row 2 Column 2 | Row 2 Column 3 | Row 3 Column 1 | Row 3 Column 2 | Row 3 Column 3 | . Output . | Column 1 Header | Column 2 Header | Column 3 Header | . | Row 1 Column 1 | Row 1 Column 2 | Row 1 Column 3 | . | Row 2 Column 1 | Row 2 Column 2 | Row 2 Column 3 | . | Row 3 Column 1 | Row 3 Column 2 | Row 3 Column 3 | . ",
    "url": "http://localhost:4000/Markdown/tables.html#table-contents",
    "relUrl": "/Markdown/tables.html#table-contents"
  },"565": {
    "doc": "Tables",
    "title": "Tables",
    "content": " ",
    "url": "http://localhost:4000/Markdown/tables.html",
    "relUrl": "/Markdown/tables.html"
  },"566": {
    "doc": "The look",
    "title": "Bash terminal themes",
    "content": "This is the least important thing on working with command line but might be useful for you with a pretty colorful code linting the languages with custom theme you like. I use Powerlevel9k for the pretty look. ",
    "url": "http://localhost:4000/osx-cli/the-look.html#bash-terminal-themes",
    "relUrl": "/osx-cli/the-look.html#bash-terminal-themes"
  },"567": {
    "doc": "The look",
    "title": "The look",
    "content": " ",
    "url": "http://localhost:4000/osx-cli/the-look.html",
    "relUrl": "/osx-cli/the-look.html"
  },"568": {
    "doc": "Theme",
    "title": "Theme",
    "content": " ",
    "url": "http://localhost:4000/Static/jekyll/theme.html",
    "relUrl": "/Static/jekyll/theme.html"
  },"569": {
    "doc": "Theme",
    "title": "Installing Jekyll theme",
    "content": "There are two common ways to install themes in Jekyll: . | Fork the Github repo - this will have to fork on git clone the repo and use this theme as starting point of your Jekyll install | Use Ruby gem - you can install this on the existing Jekyll install ** pick the theme you like and get the gem slug to put on the Gemfile e.g: gem \"minimal-mistakes-jekyll\" ** change the theme name on Gemfile and update the theme on _config.yml files ** run bundle ** check your new theme by running bundle exec jekyll serve . | . And you should see the theme has changed. Please be aware that you may have some Build warnings because themes have different layouts and may scream that the layout required didn’t exist. ",
    "url": "http://localhost:4000/Static/jekyll/theme.html#installing-jekyll-theme",
    "relUrl": "/Static/jekyll/theme.html#installing-jekyll-theme"
  },"570": {
    "doc": "Tree",
    "title": "Tree",
    "content": "Shows you the file structure with tree lines. ",
    "url": "http://localhost:4000/osx-cli/tree.html",
    "relUrl": "/osx-cli/tree.html"
  },"571": {
    "doc": "Tree",
    "title": "Install",
    "content": "Install with homebrew: . brew install tree . Install with Macports: . sudo port install tree . If you have Fink: . fink install tree . ",
    "url": "http://localhost:4000/osx-cli/tree.html#install",
    "relUrl": "/osx-cli/tree.html#install"
  },"572": {
    "doc": "Tree",
    "title": "Using tree",
    "content": "Example below, in static-sites folder, run: . tree . Then it will show you the file structure: . static-sites ├── Gatsby │   ├── README.md │   ├── building-site.md │   ├── install.md │   └── publish-netlify-cms.md ├── Hugo │   └── README.md ├── README.md └── jekyll ├── building-contents.md ├── configure.md ├── custom-domain.md ├── front-matter.md ├── google-analytics.md ├── install.md ├── publish-to-netlify.md ├── readme.md └── theme.md . ",
    "url": "http://localhost:4000/osx-cli/tree.html#using-tree",
    "relUrl": "/osx-cli/tree.html#using-tree"
  },"573": {
    "doc": "Twig on Drupal",
    "title": "Understanding Twig",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Drupal/twig.html#understanding-twig",
    "relUrl": "/php-ramework/Drupal/twig.html#understanding-twig"
  },"574": {
    "doc": "Twig on Drupal",
    "title": "Twig on Drupal",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Drupal/twig.html",
    "relUrl": "/php-ramework/Drupal/twig.html"
  },"575": {
    "doc": "Use `&&` for a More Concise Conditional",
    "title": "Use &amp;&amp; for a More Concise Conditional",
    "content": "The if/else statements worked in the last challenge, but there’s a more concise way to achieve the same result. Imagine that you are tracking several conditions in a component and you want different elements to render depending on each of these conditions. If you write a lot of else if statements to return slightly different UIs, you may repeat code which leaves room for error. Instead, you can use the &amp;&amp; logical operator to perform conditional logic in a more concise way. This is possible because you want to check if a condition is true, and if it is, return some markup. Here’s an example: . {condition &amp;&amp; &lt;p&gt;markup&lt;/p&gt;} . If the condition is true, the markup will be returned. If the condition is false, the operation will immediately return false after evaluating the condition and return nothing. You can include these statements directly in your JSX and string multiple conditions together by writing &amp;&amp; after each one. This allows you to handle more complex conditional logic in your render() method without repeating a lot of code. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#use--for-a-more-concise-conditional",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#use--for-a-more-concise-conditional"
  },"576": {
    "doc": "Use `&&` for a More Concise Conditional",
    "title": "–instructions–",
    "content": "Solve the previous example again, so the h1 only renders if display is true, but use the &amp;&amp; logical operator instead of an if/else statement. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#instructions"
  },"577": {
    "doc": "Use `&&` for a More Concise Conditional",
    "title": "–hints–",
    "content": "MyComponent should exist and render. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('MyComponent').length; })() ); . When display is set to true, a div, button, and h1 should render. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const state_1 = () =&gt; { mockedComponent.setState({ display: true }); return waitForIt(() =&gt; mockedComponent); }; const updated = await state_1(); assert( updated.find('div').length === 1 &amp;&amp; updated.find('div').children().length === 2 &amp;&amp; updated.find('button').length === 1 &amp;&amp; updated.find('h1').length === 1 ); }; . When display is set to false, only a div and button should render. async () =&gt; { const waitForIt = (fn) =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const state_1 = () =&gt; { mockedComponent.setState({ display: false }); return waitForIt(() =&gt; mockedComponent); }; const updated = await state_1(); assert( updated.find('div').length === 1 &amp;&amp; updated.find('div').children().length === 1 &amp;&amp; updated.find('button').length === 1 &amp;&amp; updated.find('h1').length === 0 ); }; . The render method should use the &amp;&amp; logical operator to check the condition of this.state.display. (getUserInput) =&gt; assert(getUserInput('index').includes('&amp;&amp;')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#hints"
  },"578": {
    "doc": "Use `&&` for a More Concise Conditional",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#seed"
  },"579": {
    "doc": "Use `&&` for a More Concise Conditional",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#after-user-code"
  },"580": {
    "doc": "Use `&&` for a More Concise Conditional",
    "title": "–seed-contents–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { display: true } this.toggleDisplay = this.toggleDisplay.bind(this); } toggleDisplay() { this.setState(state =&gt; ({ display: !state.display })); } render() { // Change code below this line return ( &lt;div&gt; &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt; &lt;h1&gt;Displayed!&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#seed-contents"
  },"581": {
    "doc": "Use `&&` for a More Concise Conditional",
    "title": "–solutions–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { display: true } this.toggleDisplay = this.toggleDisplay.bind(this); } toggleDisplay() { this.setState(state =&gt; ({ display: !state.display })); } render() { // Change code below this line return ( &lt;div&gt; &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt; {this.state.display &amp;&amp; &lt;h1&gt;Displayed!&lt;/h1&gt;} &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html#solutions"
  },"582": {
    "doc": "Use `&&` for a More Concise Conditional",
    "title": "Use `&&` for a More Concise Conditional",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use--for-a-more-concise-conditional.html"
  },"583": {
    "doc": "Use a Switch Statement to Handle Multiple Actions",
    "title": "–description–",
    "content": "You can tell the Redux store how to handle multiple action types. Say you are managing user authentication in your Redux store. You want to have a state representation for when users are logged in and when they are logged out. You represent this with a single state object with the property authenticated. You also need action creators that create actions corresponding to user login and user logout, along with the action objects themselves. ",
    "url": "http://localhost:4000/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html#description",
    "relUrl": "/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html#description"
  },"584": {
    "doc": "Use a Switch Statement to Handle Multiple Actions",
    "title": "–instructions–",
    "content": "The code editor has a store, actions, and action creators set up for you. Fill in the reducer function to handle multiple authentication actions. Use a JavaScript switch statement in the reducer to respond to different action events. This is a standard pattern in writing Redux reducers. The switch statement should switch over action.type and return the appropriate authentication state. Note: At this point, don’t worry about state immutability, since it is small and simple in this example. For each action, you can return a new object — for example, {authenticated: true}. Also, don’t forget to write a default case in your switch statement that returns the current state. This is important because once your app has multiple reducers, they are all run any time an action dispatch is made, even when the action isn’t related to that reducer. In such a case, you want to make sure that you return the current state. ",
    "url": "http://localhost:4000/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html#instructions",
    "relUrl": "/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html#instructions"
  },"585": {
    "doc": "Use a Switch Statement to Handle Multiple Actions",
    "title": "–hints–",
    "content": "Calling the function loginUser should return an object with type property set to the string LOGIN. assert(loginUser().type === 'LOGIN'); . Calling the function logoutUser should return an object with type property set to the string LOGOUT. assert(logoutUser().type === 'LOGOUT'); . The store should be initialized with an object with an authenticated property set to false. assert(store.getState().authenticated === false); . Dispatching loginUser should update the authenticated property in the store state to true. assert( (function () { const initialState = store.getState(); store.dispatch(loginUser()); const afterLogin = store.getState(); return ( initialState.authenticated === false &amp;&amp; afterLogin.authenticated === true ); })() ); . Dispatching logoutUser should update the authenticated property in the store state to false. assert( (function () { store.dispatch(loginUser()); const loggedIn = store.getState(); store.dispatch(logoutUser()); const afterLogout = store.getState(); return ( loggedIn.authenticated === true &amp;&amp; afterLogout.authenticated === false ); })() ); . The authReducer function should handle multiple action types with a switch statement. (getUserInput) =&gt; assert( getUserInput('index').toString().includes('switch') &amp;&amp; getUserInput('index').toString().includes('case') &amp;&amp; getUserInput('index').toString().includes('default') ); . ",
    "url": "http://localhost:4000/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html#hints",
    "relUrl": "/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html#hints"
  },"586": {
    "doc": "Use a Switch Statement to Handle Multiple Actions",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html#seed",
    "relUrl": "/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html#seed"
  },"587": {
    "doc": "Use a Switch Statement to Handle Multiple Actions",
    "title": "–seed-contents–",
    "content": "const defaultState = { authenticated: false }; const authReducer = (state = defaultState, action) =&gt; { // Change code below this line // Change code above this line }; const store = Redux.createStore(authReducer); const loginUser = () =&gt; { return { type: 'LOGIN' } }; const logoutUser = () =&gt; { return { type: 'LOGOUT' } }; . ",
    "url": "http://localhost:4000/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html#seed-contents",
    "relUrl": "/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html#seed-contents"
  },"588": {
    "doc": "Use a Switch Statement to Handle Multiple Actions",
    "title": "–solutions–",
    "content": "const defaultState = { authenticated: false }; const authReducer = (state = defaultState, action) =&gt; { switch (action.type) { case 'LOGIN': return { authenticated: true } case 'LOGOUT': return { authenticated: false } default: return state; } }; const store = Redux.createStore(authReducer); const loginUser = () =&gt; { return { type: 'LOGIN' } }; const logoutUser = () =&gt; { return { type: 'LOGOUT' } }; . ",
    "url": "http://localhost:4000/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html#solutions",
    "relUrl": "/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html#solutions"
  },"589": {
    "doc": "Use a Switch Statement to Handle Multiple Actions",
    "title": "Use a Switch Statement to Handle Multiple Actions",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html",
    "relUrl": "/js-libraries/redux/use-a-switch-statement-to-handle-multiple-actions.html"
  },"590": {
    "doc": "Title",
    "title": "–description–",
    "content": "Before moving on to dynamic rendering techniques, there’s one last way to use built-in JavaScript conditionals to render what you want: the ternary operator. The ternary operator is often utilized as a shortcut for if/else statements in JavaScript. They’re not quite as robust as traditional if/else statements, but they are very popular among React developers. One reason for this is because of how JSX is compiled, if/else statements can’t be inserted directly into JSX code. You might have noticed this a couple challenges ago — when an if/else statement was required, it was always outside the return statement. Ternary expressions can be an excellent alternative if you want to implement conditional logic within your JSX. Recall that a ternary operator has three parts, but you can combine several ternary expressions together. Here’s the basic syntax: . condition ? expressionIfTrue : expressionIfFalse; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#description"
  },"591": {
    "doc": "Title",
    "title": "–instructions–",
    "content": "The code editor has three constants defined within the CheckUserAge component’s render() method. They are called buttonOne, buttonTwo, and buttonThree. Each of these is assigned a simple JSX expression representing a button element. First, initialize the state of CheckUserAge with input and userAge both set to values of an empty string. Once the component is rendering information to the page, users should have a way to interact with it. Within the component’s return statement, set up a ternary expression that implements the following logic: when the page first loads, render the submit button, buttonOne, to the page. Then, when a user enters their age and clicks the button, render a different button based on the age. If a user enters a number less than 18, render buttonThree. If a user enters a number greater than or equal to 18, render buttonTwo. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#instructions"
  },"592": {
    "doc": "Title",
    "title": "–hints–",
    "content": "The CheckUserAge component should render with a single input element and a single button element. assert( Enzyme.mount(React.createElement(CheckUserAge)).find('div').find('input') .length === 1 &amp;&amp; Enzyme.mount(React.createElement(CheckUserAge)).find('div').find('button') .length === 1 ); . The CheckUserAge component’s state should be initialized with a property of userAge and a property of input, both set to a value of an empty string. assert( Enzyme.mount(React.createElement(CheckUserAge)).state().input === '' &amp;&amp; Enzyme.mount(React.createElement(CheckUserAge)).state().userAge === '' ); . When the CheckUserAge component is first rendered to the DOM, the button’s inner text should be Submit. assert( Enzyme.mount(React.createElement(CheckUserAge)).find('button').text() === 'Submit' ); . When a number of less than 18 is entered into the input element and the button is clicked, the button’s inner text should read You Shall Not Pass. (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge)); const initialButton = mockedComponent.find('button').text(); const enter3AndClickButton = () =&gt; { mockedComponent .find('input') .simulate('change', { target: { value: '3' } }); mockedComponent.find('button').simulate('click'); mockedComponent.update(); return mockedComponent.find('button').text(); }; const enter17AndClickButton = () =&gt; { mockedComponent .find('input') .simulate('change', { target: { value: '17' } }); mockedComponent.find('button').simulate('click'); mockedComponent.update(); return mockedComponent.find('button').text(); }; const userAge3 = enter3AndClickButton(); const userAge17 = enter17AndClickButton(); assert( initialButton === 'Submit' &amp;&amp; userAge3 === 'You Shall Not Pass' &amp;&amp; userAge17 === 'You Shall Not Pass' ); })(); . When a number greater than or equal to 18 is entered into the input element and the button is clicked, the button’s inner text should read You May Enter. (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge)); const initialButton = mockedComponent.find('button').text(); const enter18AndClickButton = () =&gt; { mockedComponent .find('input') .simulate('change', { target: { value: '18' } }); mockedComponent.find('button').simulate('click'); mockedComponent.update(); return mockedComponent.find('button').text(); }; const enter35AndClickButton = () =&gt; { mockedComponent .find('input') .simulate('change', { target: { value: '35' } }); mockedComponent.find('button').simulate('click'); mockedComponent.update(); return mockedComponent.find('button').text(); }; const userAge18 = enter18AndClickButton(); const userAge35 = enter35AndClickButton(); assert( initialButton === 'Submit' &amp;&amp; userAge18 === 'You May Enter' &amp;&amp; userAge35 === 'You May Enter' ); })(); . Once a number has been submitted, and the value of the input is once again changed, the button should return to reading Submit. (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge)); const enter18AndClickButton = () =&gt; { mockedComponent .find('input') .simulate('change', { target: { value: '18' } }); mockedComponent.find('button').simulate('click'); mockedComponent.update(); return mockedComponent.find('button').text(); }; const changeInputDontClickButton = () =&gt; { mockedComponent .find('input') .simulate('change', { target: { value: '5' } }); mockedComponent.update(); return mockedComponent.find('button').text(); }; const enter10AndClickButton = () =&gt; { mockedComponent .find('input') .simulate('change', { target: { value: '10' } }); mockedComponent.find('button').simulate('click'); mockedComponent.update(); return mockedComponent.find('button').text(); }; const userAge18 = enter18AndClickButton(); const changeInput1 = changeInputDontClickButton(); const userAge10 = enter10AndClickButton(); const changeInput2 = changeInputDontClickButton(); assert( userAge18 === 'You May Enter' &amp;&amp; changeInput1 === 'Submit' &amp;&amp; userAge10 === 'You Shall Not Pass' &amp;&amp; changeInput2 === 'Submit' ); })(); . Your code should not contain any if/else statements. assert( new RegExp(/(\\s|;)if(\\s|\\()/).test( code ) === false ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#hints"
  },"593": {
    "doc": "Title",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#seed"
  },"594": {
    "doc": "Title",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;CheckUserAge /&gt;, document.getElementById('root')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#after-user-code"
  },"595": {
    "doc": "Title",
    "title": "–seed-contents–",
    "content": "const inputStyle = { width: 235, margin: 5 }; class CheckUserAge extends React.Component { constructor(props) { super(props); // Change code below this line // Change code above this line this.submit = this.submit.bind(this); this.handleChange = this.handleChange.bind(this); } handleChange(e) { this.setState({ input: e.target.value, userAge: '' }); } submit() { this.setState(state =&gt; ({ userAge: state.input })); } render() { const buttonOne = &lt;button onClick={this.submit}&gt;Submit&lt;/button&gt;; const buttonTwo = &lt;button&gt;You May Enter&lt;/button&gt;; const buttonThree = &lt;button&gt;You Shall Not Pass&lt;/button&gt;; return ( &lt;div&gt; &lt;h3&gt;Enter Your Age to Continue&lt;/h3&gt; &lt;input style={inputStyle} type='number' value={this.state.input} onChange={this.handleChange} /&gt; &lt;br /&gt; {/* Change code below this line */} {/* Change code above this line */} &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#seed-contents"
  },"596": {
    "doc": "Title",
    "title": "–solutions–",
    "content": "const inputStyle = { width: 235, margin: 5 }; class CheckUserAge extends React.Component { constructor(props) { super(props); this.state = { userAge: '', input: '' }; this.submit = this.submit.bind(this); this.handleChange = this.handleChange.bind(this); } handleChange(e) { this.setState({ input: e.target.value, userAge: '' }); } submit() { this.setState(state =&gt; ({ userAge: state.input })); } render() { const buttonOne = &lt;button onClick={this.submit}&gt;Submit&lt;/button&gt;; const buttonTwo = &lt;button&gt;You May Enter&lt;/button&gt;; const buttonThree = &lt;button&gt;You Shall Not Pass&lt;/button&gt;; return ( &lt;div&gt; &lt;h3&gt;Enter Your Age to Continue&lt;/h3&gt; &lt;input style={inputStyle} type='number' value={this.state.input} onChange={this.handleChange} /&gt; &lt;br /&gt; {this.state.userAge === '' ? buttonOne : this.state.userAge &gt;= 18 ? buttonTwo : buttonThree} &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html#solutions"
  },"597": {
    "doc": "Title",
    "title": "Title",
    "content": ". id: 5a24c314108439a4d4036187 title: Use a Ternary Expression for Conditional Rendering challengeType: 6 forumTopicId: 301414 dashedName: use-a-ternary-expression-for-conditional-rendering — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-a-ternary-expression-for-conditional-rendering.html"
  },"598": {
    "doc": "Title",
    "title": "–description–",
    "content": "In previous challenges, you learned how to inject JavaScript code into JSX code using curly braces, { }, for tasks like accessing props, passing props, accessing state, inserting comments into your code, and most recently, styling your components. These are all common use cases to put JavaScript in JSX, but they aren’t the only way that you can utilize JavaScript code in your React components. You can also write JavaScript directly in your render methods, before the return statement, without inserting it inside of curly braces. This is because it is not yet within the JSX code. When you want to use a variable later in the JSX code inside the return statement, you place the variable name inside curly braces. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#description"
  },"599": {
    "doc": "Title",
    "title": "–instructions–",
    "content": "In the code provided, the render method has an array that contains 20 phrases to represent the answers found in the classic 1980’s Magic Eight Ball toy. The button click event is bound to the ask method, so each time the button is clicked a random number will be generated and stored as the randomIndex in state. On line 52, delete the string change me! and reassign the answer const so your code randomly accesses a different index of the possibleAnswers array each time the component updates. Finally, insert the answer const inside the p tags. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#instructions"
  },"600": {
    "doc": "Title",
    "title": "–hints–",
    "content": "The MagicEightBall component should exist and should render to the page. assert.strictEqual( Enzyme.mount(React.createElement(MagicEightBall)).find('MagicEightBall') .length, 1 ); . MagicEightBall’s first child should be an input element. assert.strictEqual( Enzyme.mount(React.createElement(MagicEightBall)) .children() .childAt(0) .name(), 'input' ); . MagicEightBall’s third child should be a button element. assert.strictEqual( Enzyme.mount(React.createElement(MagicEightBall)) .children() .childAt(2) .name(), 'button' ); . MagicEightBall’s state should be initialized with a property of userInput and a property of randomIndex both set to a value of an empty string. assert( Enzyme.mount(React.createElement(MagicEightBall)).state('randomIndex') === '' &amp;&amp; Enzyme.mount(React.createElement(MagicEightBall)).state('userInput') === '' ); . When MagicEightBall is first mounted to the DOM, it should return an empty p element. assert( Enzyme.mount(React.createElement(MagicEightBall)).find('p').length === 1 &amp;&amp; Enzyme.mount(React.createElement(MagicEightBall)).find('p').text() === '' ); . When text is entered into the input element and the button is clicked, the MagicEightBall component should return a p element that contains a random element from the possibleAnswers array. (() =&gt; { const comp = Enzyme.mount(React.createElement(MagicEightBall)); const simulate = () =&gt; { comp.find('input').simulate('change', { target: { value: 'test?' } }); comp.find('button').simulate('click'); }; const result = () =&gt; comp.find('p').text(); const _1 = () =&gt; { simulate(); return result(); }; const _2 = () =&gt; { simulate(); return result(); }; const _3 = () =&gt; { simulate(); return result(); }; const _4 = () =&gt; { simulate(); return result(); }; const _5 = () =&gt; { simulate(); return result(); }; const _6 = () =&gt; { simulate(); return result(); }; const _7 = () =&gt; { simulate(); return result(); }; const _8 = () =&gt; { simulate(); return result(); }; const _9 = () =&gt; { simulate(); return result(); }; const _10 = () =&gt; { simulate(); return result(); }; const _1_val = _1(); const _2_val = _2(); const _3_val = _3(); const _4_val = _4(); const _5_val = _5(); const _6_val = _6(); const _7_val = _7(); const _8_val = _8(); const _9_val = _9(); const _10_val = _10(); const actualAnswers = [ _1_val, _2_val, _3_val, _4_val, _5_val, _6_val, _7_val, _8_val, _9_val, _10_val ]; const hasIndex = actualAnswers.filter( (answer, i) =&gt; possibleAnswers.indexOf(answer) !== -1 ); const notAllEqual = new Set(actualAnswers); assert(notAllEqual.size &gt; 1 &amp;&amp; hasIndex.length === 10); })(); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#hints"
  },"601": {
    "doc": "Title",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#seed"
  },"602": {
    "doc": "Title",
    "title": "–after-user-code–",
    "content": "var possibleAnswers = [ 'It is certain', 'It is decidedly so', 'Without a doubt', 'Yes, definitely', 'You may rely on it', 'As I see it, yes', 'Outlook good', 'Yes', 'Signs point to yes', 'Reply hazy try again', 'Ask again later', 'Better not tell you now', 'Cannot predict now', 'Concentrate and ask again', \"Don't count on it\", 'My reply is no', 'My sources say no', 'Outlook not so good', 'Very doubtful', 'Most likely' ]; ReactDOM.render(&lt;MagicEightBall /&gt;, document.getElementById('root')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#after-user-code"
  },"603": {
    "doc": "Title",
    "title": "–seed-contents–",
    "content": "const inputStyle = { width: 235, margin: 5 }; class MagicEightBall extends React.Component { constructor(props) { super(props); this.state = { userInput: '', randomIndex: '' }; this.ask = this.ask.bind(this); this.handleChange = this.handleChange.bind(this); } ask() { if (this.state.userInput) { this.setState({ randomIndex: Math.floor(Math.random() * 20), userInput: '' }); } } handleChange(event) { this.setState({ userInput: event.target.value }); } render() { const possibleAnswers = [ 'It is certain', 'It is decidedly so', 'Without a doubt', 'Yes, definitely', 'You may rely on it', 'As I see it, yes', 'Outlook good', 'Yes', 'Signs point to yes', 'Reply hazy try again', 'Ask again later', 'Better not tell you now', 'Cannot predict now', 'Concentrate and ask again', \"Don't count on it\", 'My reply is no', 'My sources say no', 'Most likely', 'Outlook not so good', 'Very doubtful' ]; const answer = 'change me!'; // Change this line return ( &lt;div&gt; &lt;input type='text' value={this.state.userInput} onChange={this.handleChange} style={inputStyle} /&gt; &lt;br /&gt; &lt;button onClick={this.ask}&gt;Ask the Magic Eight Ball!&lt;/button&gt; &lt;br /&gt; &lt;h3&gt;Answer:&lt;/h3&gt; &lt;p&gt; {/* Change code below this line */} {/* Change code above this line */} &lt;/p&gt; &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#seed-contents"
  },"604": {
    "doc": "Title",
    "title": "–solutions–",
    "content": "const inputStyle = { width: 235, margin: 5 }; class MagicEightBall extends React.Component { constructor(props) { super(props); this.state = { userInput: '', randomIndex: '' }; this.ask = this.ask.bind(this); this.handleChange = this.handleChange.bind(this); } ask() { if (this.state.userInput) { this.setState({ randomIndex: Math.floor(Math.random() * 20), userInput: '' }); } } handleChange(event) { this.setState({ userInput: event.target.value }); } render() { const possibleAnswers = [ 'It is certain', 'It is decidedly so', 'Without a doubt', 'Yes, definitely', 'You may rely on it', 'As I see it, yes', 'Outlook good', 'Yes', 'Signs point to yes', 'Reply hazy try again', 'Ask again later', 'Better not tell you now', 'Cannot predict now', 'Concentrate and ask again', \"Don't count on it\", 'My reply is no', 'My sources say no', 'Outlook not so good', 'Very doubtful', 'Most likely' ]; const answer = possibleAnswers[this.state.randomIndex]; return ( &lt;div&gt; &lt;input type='text' value={this.state.userInput} onChange={this.handleChange} style={inputStyle} /&gt; &lt;br /&gt; &lt;button onClick={this.ask}&gt;Ask the Magic Eight Ball!&lt;/button&gt; &lt;br /&gt; &lt;h3&gt;Answer:&lt;/h3&gt; &lt;p&gt;{answer}&lt;/p&gt; &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html#solutions"
  },"605": {
    "doc": "Title",
    "title": "Title",
    "content": ". id: 5a24c314108439a4d4036183 title: Use Advanced JavaScript in React Render Method challengeType: 6 forumTopicId: 301415 dashedName: use-advanced-javascript-in-react-render-method — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-advanced-javascript-in-react-render-method.html"
  },"606": {
    "doc": "Title",
    "title": "–description–",
    "content": "The map array method is a powerful tool that you will use often when working with React. Another method related to map is filter, which filters the contents of an array based on a condition, then returns a new array. For example, if you have an array of users that all have a property online which can be set to true or false, you can filter only those users that are online by writing: . let onlineUsers = users.filter(user =&gt; user.online); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#description"
  },"607": {
    "doc": "Title",
    "title": "–instructions–",
    "content": "In the code editor, MyComponent’s state is initialized with an array of users. Some users are online and some aren’t. Filter the array so you see only the users who are online. To do this, first use filter to return a new array containing only the users whose online property is true. Then, in the renderOnline variable, map over the filtered array, and return a li element for each user that contains the text of their username. Be sure to include a unique key as well, like in the last challenges. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#instructions"
  },"608": {
    "doc": "Title",
    "title": "–hints–",
    "content": "MyComponent should exist and render to the page. assert.strictEqual( Enzyme.mount(React.createElement(MyComponent)).find('MyComponent').length, 1 ); . MyComponent’s state should be initialized to an array of six users. assert( Array.isArray( Enzyme.mount(React.createElement(MyComponent)).state('users') ) === true &amp;&amp; Enzyme.mount(React.createElement(MyComponent)).state('users').length === 6 ); . MyComponent should return a div, an h1, and then an unordered list containing li elements for every user whose online status is set to true. (() =&gt; { const comp = Enzyme.mount(React.createElement(MyComponent)); const users = (bool) =&gt; ({ users: [ { username: 'Jeff', online: bool }, { username: 'Alan', online: bool }, { username: 'Mary', online: bool }, { username: 'Jim', online: bool }, { username: 'Laura', online: bool } ] }); const result = () =&gt; comp.find('li').length; const _1 = result(); const _2 = () =&gt; { comp.setState(users(true)); return result(); }; const _3 = () =&gt; { comp.setState(users(false)); return result(); }; const _4 = () =&gt; { comp.setState({ users: [] }); return result(); }; const _2_val = _2(); const _3_val = _3(); const _4_val = _4(); assert( comp.find('div').length === 1 &amp;&amp; comp.find('h1').length === 1 &amp;&amp; comp.find('ul').length === 1 &amp;&amp; _1 === 4 &amp;&amp; _2_val === 5 &amp;&amp; _3_val === 0 &amp;&amp; _4_val === 0 ); })(); . MyComponent should render li elements that contain the username of each online user. (() =&gt; { const comp = Enzyme.mount(React.createElement(MyComponent)); const users = (bool) =&gt; ({ users: [ { username: 'Jeff', online: bool }, { username: 'Alan', online: bool }, { username: 'Mary', online: bool }, { username: 'Jim', online: bool }, { username: 'Laura', online: bool } ] }); const ul = () =&gt; { comp.setState(users(true)); return comp.find('ul').html(); }; const html = ul(); assert( html === '&lt;ul&gt;&lt;li&gt;Jeff&lt;/li&gt;&lt;li&gt;Alan&lt;/li&gt;&lt;li&gt;Mary&lt;/li&gt;&lt;li&gt;Jim&lt;/li&gt;&lt;li&gt;Laura&lt;/li&gt;&lt;/ul&gt;' ); })(); . Each list item element should have a unique key attribute. assert( (() =&gt; { const ul = Enzyme.mount(React.createElement(MyComponent)).find('ul'); console.log(ul.debug()); const keys = new Set([ ul.childAt(0).key(), ul.childAt(1).key(), ul.childAt(2).key(), ul.childAt(3).key() ]); return keys.size === 4; })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#hints"
  },"609": {
    "doc": "Title",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#seed"
  },"610": {
    "doc": "Title",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('root')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#after-user-code"
  },"611": {
    "doc": "Title",
    "title": "–seed-contents–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { users: [ { username: 'Jeff', online: true }, { username: 'Alan', online: false }, { username: 'Mary', online: true }, { username: 'Jim', online: false }, { username: 'Sara', online: true }, { username: 'Laura', online: true } ] }; } render() { const usersOnline = null; // Change this line const renderOnline = null; // Change this line return ( &lt;div&gt; &lt;h1&gt;Current Online Users:&lt;/h1&gt; &lt;ul&gt;{renderOnline}&lt;/ul&gt; &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#seed-contents"
  },"612": {
    "doc": "Title",
    "title": "–solutions–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { users: [ { username: 'Jeff', online: true }, { username: 'Alan', online: false }, { username: 'Mary', online: true }, { username: 'Jim', online: false }, { username: 'Sara', online: true }, { username: 'Laura', online: true } ] }; } render() { const usersOnline = this.state.users.filter(user =&gt; { return user.online; }); const renderOnline = usersOnline.map(user =&gt; { return &lt;li key={user.username}&gt;{user.username}&lt;/li&gt;; }); return ( &lt;div&gt; &lt;h1&gt;Current Online Users:&lt;/h1&gt; &lt;ul&gt;{renderOnline}&lt;/ul&gt; &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html#solutions"
  },"613": {
    "doc": "Title",
    "title": "Title",
    "content": ". id: 5a24c314108439a4d403618c title: Use Array.filter() to Dynamically Filter an Array challengeType: 6 forumTopicId: 301416 dashedName: use-array-filter-to-dynamically-filter-an-array — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.filter-to-dynamically-filter-an-array.html"
  },"614": {
    "doc": "Title",
    "title": "–description–",
    "content": "Conditional rendering is useful, but you may need your components to render an unknown number of elements. Often in reactive programming, a programmer has no way to know what the state of an application is until runtime, because so much depends on a user’s interaction with that program. Programmers need to write their code to correctly handle that unknown state ahead of time. Using Array.map() in React illustrates this concept. For example, you create a simple “To Do List” app. As the programmer, you have no way of knowing how many items a user might have on their list. You need to set up your component to dynamically render the correct number of list elements long before someone using the program decides that today is laundry day. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#description"
  },"615": {
    "doc": "Title",
    "title": "–instructions–",
    "content": "The code editor has most of the MyToDoList component set up. Some of this code should look familiar if you completed the controlled form challenge. You’ll notice a textarea and a button, along with a couple of methods that track their states, but nothing is rendered to the page yet. Inside the constructor, create a this.state object and define two states: userInput should be initialized as an empty string, and toDoList should be initialized as an empty array. Next, delete the null value in the render() method next to the items variable. In its place, map over the toDoList array stored in the component’s internal state and dynamically render a li for each item. Try entering the string eat, code, sleep, repeat into the textarea, then click the button and see what happens. Note: You may know that all sibling child elements created by a mapping operation like this do need to be supplied with a unique key attribute. Don’t worry, this is the topic of the next challenge. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#instructions"
  },"616": {
    "doc": "Title",
    "title": "–hints–",
    "content": "The MyToDoList component should exist and render to the page. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); return mockedComponent.find('MyToDoList').length === 1; })() ); . The first child of MyToDoList should be a textarea element. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); return ( mockedComponent.find('MyToDoList').children().childAt(0).type() === 'textarea' ); })() ); . The second child of MyToDoList should be a br element. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); return ( mockedComponent.find('MyToDoList').children().childAt(1).type() === 'br' ); })() ); . The third child of MyToDoList should be a button element. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); return ( mockedComponent.find('MyToDoList').children().childAt(2).type() === 'button' ); })() ); . The state of MyToDoList should be initialized with toDoList as an empty array. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); const initialState = mockedComponent.state(); return ( Array.isArray(initialState.toDoList) === true &amp;&amp; initialState.toDoList.length === 0 ); })() ); . The state of MyToDoList should be initialized with userInput as an empty string. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); const initialState = mockedComponent.state(); return ( typeof initialState.userInput === 'string' &amp;&amp; initialState.userInput.length === 0 ); })() ); . When the Create List button is clicked, the MyToDoList component should dynamically return an unordered list that contains a list item element for every item of a comma-separated list entered into the textarea element. (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); const simulateChange = (el, value) =&gt; el.simulate('change', { target: { value } }); const state_1 = () =&gt; { return mockedComponent.find('ul').find('li'); }; const setInput = () =&gt; { return simulateChange( mockedComponent.find('textarea'), 'testA, testB, testC' ); }; const click = () =&gt; { return mockedComponent.find('button').simulate('click'); }; const state_2 = () =&gt; { const nodes = mockedComponent.find('ul').find('li'); return { nodes, text: nodes.reduce((t, n) =&gt; t + n.text().trim(), '') }; }; const setInput_2 = () =&gt; { return simulateChange( mockedComponent.find('textarea'), 't1, t2, t3, t4, t5, t6' ); }; const click_1 = () =&gt; { return mockedComponent.find('button').simulate('click'); }; const state_3 = () =&gt; { const nodes = mockedComponent.find('ul').find('li'); return { nodes, text: nodes.reduce((t, n) =&gt; t + n.text().trim(), '') }; }; const awaited_state_1 = state_1(); const awaited_setInput = setInput(); const awaited_click = click(); const awaited_state_2 = state_2(); const awaited_setInput_2 = setInput_2(); const awaited_click_1 = click_1(); const awaited_state_3 = state_3(); assert( awaited_state_1.length === 0 &amp;&amp; awaited_state_2.nodes.length === 3 &amp;&amp; awaited_state_3.nodes.length === 6 &amp;&amp; awaited_state_2.text === 'testAtestBtestC' &amp;&amp; awaited_state_3.text === 't1t2t3t4t5t6' ); })(); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#hints"
  },"617": {
    "doc": "Title",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#seed"
  },"618": {
    "doc": "Title",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyToDoList /&gt;, document.getElementById('root')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#after-user-code"
  },"619": {
    "doc": "Title",
    "title": "–seed-contents–",
    "content": "const textAreaStyles = { width: 235, margin: 5 }; class MyToDoList extends React.Component { constructor(props) { super(props); // Change code below this line // Change code above this line this.handleSubmit = this.handleSubmit.bind(this); this.handleChange = this.handleChange.bind(this); } handleSubmit() { const itemsArray = this.state.userInput.split(','); this.setState({ toDoList: itemsArray }); } handleChange(e) { this.setState({ userInput: e.target.value }); } render() { const items = null; // Change this line return ( &lt;div&gt; &lt;textarea onChange={this.handleChange} value={this.state.userInput} style={textAreaStyles} placeholder='Separate Items With Commas' /&gt; &lt;br /&gt; &lt;button onClick={this.handleSubmit}&gt;Create List&lt;/button&gt; &lt;h1&gt;My \"To Do\" List:&lt;/h1&gt; &lt;ul&gt;{items}&lt;/ul&gt; &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#seed-contents"
  },"620": {
    "doc": "Title",
    "title": "–solutions–",
    "content": "const textAreaStyles = { width: 235, margin: 5 }; class MyToDoList extends React.Component { constructor(props) { super(props); this.state = { toDoList: [], userInput: '' }; this.handleSubmit = this.handleSubmit.bind(this); this.handleChange = this.handleChange.bind(this); } handleSubmit() { const itemsArray = this.state.userInput.split(','); this.setState({ toDoList: itemsArray }); } handleChange(e) { this.setState({ userInput: e.target.value }); } render() { const items = this.state.toDoList.map((item, i) =&gt; { return &lt;li key={i}&gt;{item}&lt;/li&gt;; }); return ( &lt;div&gt; &lt;textarea onChange={this.handleChange} value={this.state.userInput} style={textAreaStyles} placeholder='Separate Items With Commas' /&gt; &lt;br /&gt; &lt;button onClick={this.handleSubmit}&gt;Create List&lt;/button&gt; &lt;h1&gt;My \"To Do\" List:&lt;/h1&gt; &lt;ul&gt;{items}&lt;/ul&gt; &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html#solutions"
  },"621": {
    "doc": "Title",
    "title": "Title",
    "content": ". id: 5a24c314108439a4d403618a title: Use Array.map() to Dynamically Render Elements challengeType: 6 forumTopicId: 301417 dashedName: use-array-map-to-dynamically-render-elements — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-array.map-to-dynamically-render-elements.html"
  },"622": {
    "doc": "Use const for Action Types",
    "title": "–description–",
    "content": "A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used. You can refactor the code you’re working with to write the action types as const declarations. ",
    "url": "http://localhost:4000/js-libraries/redux/use-const-for-action-types.html#description",
    "relUrl": "/js-libraries/redux/use-const-for-action-types.html#description"
  },"623": {
    "doc": "Use const for Action Types",
    "title": "–instructions–",
    "content": "Declare LOGIN and LOGOUT as const values and assign them to the strings 'LOGIN' and 'LOGOUT', respectively. Then, edit the authReducer() and the action creators to reference these constants instead of string values. Note: It’s generally a convention to write constants in all uppercase, and this is standard practice in Redux as well. ",
    "url": "http://localhost:4000/js-libraries/redux/use-const-for-action-types.html#instructions",
    "relUrl": "/js-libraries/redux/use-const-for-action-types.html#instructions"
  },"624": {
    "doc": "Use const for Action Types",
    "title": "–hints–",
    "content": "Calling the function loginUser should return an object with type property set to the string LOGIN. assert(loginUser().type === 'LOGIN'); . Calling the function logoutUser should return an object with type property set to the string LOGOUT. assert(logoutUser().type === 'LOGOUT'); . The store should be initialized with an object with property login set to false. assert(store.getState().authenticated === false); . Dispatching loginUser should update the login property in the store state to true. assert( (function () { const initialState = store.getState(); store.dispatch(loginUser()); const afterLogin = store.getState(); return ( initialState.authenticated === false &amp;&amp; afterLogin.authenticated === true ); })() ); . Dispatching logoutUser should update the login property in the store state to false. assert( (function () { store.dispatch(loginUser()); const loggedIn = store.getState(); store.dispatch(logoutUser()); const afterLogout = store.getState(); return ( loggedIn.authenticated === true &amp;&amp; afterLogout.authenticated === false ); })() ); . The authReducer function should handle multiple action types with a switch statement. (getUserInput) =&gt; assert( (function () { return ( typeof authReducer === 'function' &amp;&amp; getUserInput('index').toString().includes('switch') &amp;&amp; getUserInput('index').toString().includes('case') &amp;&amp; getUserInput('index').toString().includes('default') ); })() ); . LOGIN and LOGOUT should be declared as const values and should be assigned strings of LOGINand LOGOUT. const noWhiteSpace = __helpers.removeWhiteSpace(code); assert(LOGIN === 'LOGIN' &amp;&amp; LOGOUT === 'LOGOUT') assert(noWhiteSpace.includes('const')) . The action creators and the reducer should reference the LOGIN and LOGOUT constants. (getUserInput) =&gt; assert( (function () { const noWhiteSpace = __helpers.removeWhiteSpace( getUserInput('index').toString() ); return ( noWhiteSpace.includes('caseLOGIN:') &amp;&amp; noWhiteSpace.includes('caseLOGOUT:') &amp;&amp; noWhiteSpace.includes('type:LOGIN') &amp;&amp; noWhiteSpace.includes('type:LOGOUT') ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/redux/use-const-for-action-types.html#hints",
    "relUrl": "/js-libraries/redux/use-const-for-action-types.html#hints"
  },"625": {
    "doc": "Use const for Action Types",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/use-const-for-action-types.html#seed",
    "relUrl": "/js-libraries/redux/use-const-for-action-types.html#seed"
  },"626": {
    "doc": "Use const for Action Types",
    "title": "–seed-contents–",
    "content": "const defaultState = { authenticated: false }; const authReducer = (state = defaultState, action) =&gt; { switch (action.type) { case 'LOGIN': return { authenticated: true } case 'LOGOUT': return { authenticated: false } default: return state; } }; const store = Redux.createStore(authReducer); const loginUser = () =&gt; { return { type: 'LOGIN' } }; const logoutUser = () =&gt; { return { type: 'LOGOUT' } }; . ",
    "url": "http://localhost:4000/js-libraries/redux/use-const-for-action-types.html#seed-contents",
    "relUrl": "/js-libraries/redux/use-const-for-action-types.html#seed-contents"
  },"627": {
    "doc": "Use const for Action Types",
    "title": "–solutions–",
    "content": "const LOGIN = 'LOGIN'; const LOGOUT = 'LOGOUT'; const defaultState = { authenticated: false }; const authReducer = (state = defaultState, action) =&gt; { switch (action.type) { case LOGIN: return { authenticated: true } case LOGOUT: return { authenticated: false } default: return state; } }; const store = Redux.createStore(authReducer); const loginUser = () =&gt; { return { type: LOGIN } }; const logoutUser = () =&gt; { return { type: LOGOUT } }; . ",
    "url": "http://localhost:4000/js-libraries/redux/use-const-for-action-types.html#solutions",
    "relUrl": "/js-libraries/redux/use-const-for-action-types.html#solutions"
  },"628": {
    "doc": "Use const for Action Types",
    "title": "Use const for Action Types",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/use-const-for-action-types.html",
    "relUrl": "/js-libraries/redux/use-const-for-action-types.html"
  },"629": {
    "doc": "Title",
    "title": "–description–",
    "content": "React also has an option to set default props. You can assign default props to a component as a property on the component itself and React assigns the default prop if necessary. This allows you to specify what a prop value should be if no value is explicitly provided. For example, if you declare MyComponent.defaultProps = { location: 'San Francisco' }, you have defined a location prop that’s set to the string San Francisco, unless you specify otherwise. React assigns default props if props are undefined, but if you pass null as the value for a prop, it will remain null. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-default-props.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-default-props.html#description"
  },"630": {
    "doc": "Title",
    "title": "–instructions–",
    "content": "The code editor shows a ShoppingCart component. Define default props on this component which specify a prop items with a value of 0. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-default-props.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-default-props.html#instructions"
  },"631": {
    "doc": "Title",
    "title": "–hints–",
    "content": "The ShoppingCart component should render. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('ShoppingCart').length === 1; })() ); . The ShoppingCart component should have a default prop of { items: 0 }. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); mockedComponent.setProps({ items: undefined }); return mockedComponent.find('ShoppingCart').props().items === 0; })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-default-props.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-default-props.html#hints"
  },"632": {
    "doc": "Title",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-default-props.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-default-props.html#seed"
  },"633": {
    "doc": "Title",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;ShoppingCart /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-default-props.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-default-props.html#after-user-code"
  },"634": {
    "doc": "Title",
    "title": "–seed-contents–",
    "content": "const ShoppingCart = (props) =&gt; { return ( &lt;div&gt; &lt;h1&gt;Shopping Cart Component&lt;/h1&gt; &lt;/div&gt; ) }; // Change code below this line . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-default-props.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-default-props.html#seed-contents"
  },"635": {
    "doc": "Title",
    "title": "–solutions–",
    "content": "const ShoppingCart = (props) =&gt; { return ( &lt;div&gt; &lt;h1&gt;Shopping Cart Component&lt;/h1&gt; &lt;/div&gt; ) }; // Change code below this line ShoppingCart.defaultProps = { items: 0 } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-default-props.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-default-props.html#solutions"
  },"636": {
    "doc": "Title",
    "title": "Title",
    "content": ". id: 5a24c314108439a4d403616b title: Use Default Props challengeType: 6 forumTopicId: 301418 dashedName: use-default-props — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-default-props.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-default-props.html"
  },"637": {
    "doc": "Use Middleware to Handle Asynchronous Actions",
    "title": "–description–",
    "content": "So far these challenges have avoided discussing asynchronous actions, but they are an unavoidable part of web development. At some point you’ll need to call asynchronous endpoints in your Redux app, so how do you handle these types of requests? Redux provides middleware designed specifically for this purpose, called Redux Thunk middleware. Here’s a brief description how to use this with Redux. To include Redux Thunk middleware, you pass it as an argument to Redux.applyMiddleware(). This statement is then provided as a second optional parameter to the createStore() function. Take a look at the code at the bottom of the editor to see this. Then, to create an asynchronous action, you return a function in the action creator that takes dispatch as an argument. Within this function, you can dispatch actions and perform asynchronous requests. In this example, an asynchronous request is simulated with a setTimeout() call. It’s common to dispatch an action before initiating any asynchronous behavior so that your application state knows that some data is being requested (this state could display a loading icon, for instance). Then, once you receive the data, you dispatch another action which carries the data as a payload along with information that the action is completed. Remember that you’re passing dispatch as a parameter to this special action creator. This is what you’ll use to dispatch your actions, you simply pass the action directly to dispatch and the middleware takes care of the rest. ",
    "url": "http://localhost:4000/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html#description",
    "relUrl": "/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html#description"
  },"638": {
    "doc": "Use Middleware to Handle Asynchronous Actions",
    "title": "–instructions–",
    "content": "Write both dispatches in the handleAsync() action creator. Dispatch requestingData() before the setTimeout() (the simulated API call). Then, after you receive the (pretend) data, dispatch the receivedData() action, passing in this data. Now you know how to handle asynchronous actions in Redux. Everything else continues to behave as before. ",
    "url": "http://localhost:4000/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html#instructions",
    "relUrl": "/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html#instructions"
  },"639": {
    "doc": "Use Middleware to Handle Asynchronous Actions",
    "title": "–hints–",
    "content": "The requestingData action creator should return an object of type equal to the value of REQUESTING_DATA. assert(requestingData().type === REQUESTING_DATA); . The receivedData action creator should return an object of type equal to the value of RECEIVED_DATA. assert(receivedData('data').type === RECEIVED_DATA); . asyncDataReducer should be a function. assert(typeof asyncDataReducer === 'function'); . Dispatching the requestingData action creator should update the store state property of fetching to true. assert( (function () { const initialState = store.getState(); store.dispatch(requestingData()); const reqState = store.getState(); return initialState.fetching === false &amp;&amp; reqState.fetching === true; })() ); . Dispatching handleAsync should dispatch the data request action and then dispatch the received data action after a delay. assert( (function () { const noWhiteSpace = __helpers.removeWhiteSpace(handleAsync.toString()); return ( noWhiteSpace.includes('dispatch(requestingData())') === true &amp;&amp; noWhiteSpace.includes('dispatch(receivedData(data))') === true ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html#hints",
    "relUrl": "/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html#hints"
  },"640": {
    "doc": "Use Middleware to Handle Asynchronous Actions",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html#seed",
    "relUrl": "/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html#seed"
  },"641": {
    "doc": "Use Middleware to Handle Asynchronous Actions",
    "title": "–seed-contents–",
    "content": "const REQUESTING_DATA = 'REQUESTING_DATA' const RECEIVED_DATA = 'RECEIVED_DATA' const requestingData = () =&gt; { return {type: REQUESTING_DATA} } const receivedData = (data) =&gt; { return {type: RECEIVED_DATA, users: data.users} } const handleAsync = () =&gt; { return function(dispatch) { // Dispatch request action here setTimeout(function() { let data = { users: ['Jeff', 'William', 'Alice'] } // Dispatch received data action here }, 2500); } }; const defaultState = { fetching: false, users: [] }; const asyncDataReducer = (state = defaultState, action) =&gt; { switch(action.type) { case REQUESTING_DATA: return { fetching: true, users: [] } case RECEIVED_DATA: return { fetching: false, users: action.users } default: return state; } }; const store = Redux.createStore( asyncDataReducer, Redux.applyMiddleware(ReduxThunk.default) ); . ",
    "url": "http://localhost:4000/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html#seed-contents",
    "relUrl": "/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html#seed-contents"
  },"642": {
    "doc": "Use Middleware to Handle Asynchronous Actions",
    "title": "–solutions–",
    "content": "const REQUESTING_DATA = 'REQUESTING_DATA' const RECEIVED_DATA = 'RECEIVED_DATA' const requestingData = () =&gt; { return {type: REQUESTING_DATA} } const receivedData = (data) =&gt; { return {type: RECEIVED_DATA, users: data.users} } const handleAsync = () =&gt; { return function(dispatch) { dispatch(requestingData()); setTimeout(function() { let data = { users: ['Jeff', 'William', 'Alice'] } dispatch(receivedData(data)); }, 2500); } }; const defaultState = { fetching: false, users: [] }; const asyncDataReducer = (state = defaultState, action) =&gt; { switch(action.type) { case REQUESTING_DATA: return { fetching: true, users: [] } case RECEIVED_DATA: return { fetching: false, users: action.users } default: return state; } }; const store = Redux.createStore( asyncDataReducer, Redux.applyMiddleware(ReduxThunk.default) ); . ",
    "url": "http://localhost:4000/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html#solutions",
    "relUrl": "/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html#solutions"
  },"643": {
    "doc": "Use Middleware to Handle Asynchronous Actions",
    "title": "Use Middleware to Handle Asynchronous Actions",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html",
    "relUrl": "/js-libraries/redux/use-middleware-to-handle-asynchronous-actions.html"
  },"644": {
    "doc": "Title",
    "title": "–description–",
    "content": "React provides useful type-checking features to verify that components receive props of the correct type. For example, your application makes an API call to retrieve data that you expect to be in an array, which is then passed to a component as a prop. You can set propTypes on your component to require the data to be of type array. This will throw a useful warning when the data is of any other type. It’s considered a best practice to set propTypes when you know the type of a prop ahead of time. You can define a propTypes property for a component in the same way you defined defaultProps. Doing this will check that props of a given key are present with a given type. Here’s an example to require the type function for a prop called handleClick: . MyComponent.propTypes = { handleClick: PropTypes.func.isRequired } . In the example above, the PropTypes.func part checks that handleClick is a function. Adding isRequired tells React that handleClick is a required property for that component. You will see a warning if that prop isn’t provided. Also notice that func represents function. Among the seven JavaScript primitive types, function and boolean (written as bool) are the only two that use unusual spelling. In addition to the primitive types, there are other types available. For example, you can check that a prop is a React element. Please refer to the documentation for all of the options. Note: As of React v15.5.0, PropTypes is imported independently from React, like this: import PropTypes from 'prop-types'; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#description"
  },"645": {
    "doc": "Title",
    "title": "–instructions–",
    "content": "Define propTypes for the Items component to require quantity as a prop and verify that it is of type number. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#instructions"
  },"646": {
    "doc": "Title",
    "title": "–hints–",
    "content": "The ShoppingCart component should render. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('ShoppingCart').length === 1; })() ); . The Items component should render. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('Items').length === 1; })() ); . The Items component should include a propTypes check to require a value for quantity and ensure that its value is a number. (getUserInput) =&gt; assert( (function () { const noWhiteSpace = __helpers.removeWhiteSpace(getUserInput('index')); return ( noWhiteSpace.includes('quantity:PropTypes.number.isRequired') &amp;&amp; noWhiteSpace.includes('Items.propTypes=') ); })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#hints"
  },"647": {
    "doc": "Title",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#seed"
  },"648": {
    "doc": "Title",
    "title": "–before-user-code–",
    "content": "var PropTypes = { number: { isRequired: true } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#before-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#before-user-code"
  },"649": {
    "doc": "Title",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;ShoppingCart /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#after-user-code"
  },"650": {
    "doc": "Title",
    "title": "–seed-contents–",
    "content": "const Items = (props) =&gt; { return &lt;h1&gt;Current Quantity of Items in Cart: {props.quantity}&lt;/h1&gt; }; // Change code below this line // Change code above this line Items.defaultProps = { quantity: 0 }; class ShoppingCart extends React.Component { constructor(props) { super(props); } render() { return &lt;Items /&gt; } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#seed-contents"
  },"651": {
    "doc": "Title",
    "title": "–solutions–",
    "content": "const Items = (props) =&gt; { return &lt;h1&gt;Current Quantity of Items in Cart: {props.quantity}&lt;/h1&gt; }; // Change code below this line Items.propTypes = { quantity: PropTypes.number.isRequired }; // Change code above this line Items.defaultProps = { quantity: 0 }; class ShoppingCart extends React.Component { constructor(props) { super(props); } render() { return &lt;Items /&gt; } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html#solutions"
  },"652": {
    "doc": "Title",
    "title": "Title",
    "content": ". id: 5a24c314108439a4d403616d title: Use PropTypes to Define the Props You Expect challengeType: 6 forumTopicId: 301419 dashedName: use-proptypes-to-define-the-props-you-expect — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-proptypes-to-define-the-props-you-expect.html"
  },"653": {
    "doc": "Title",
    "title": "–description–",
    "content": "The last challenge showed a simple way to compose two components, but there are many different ways you can compose components with React. Component composition is one of React’s powerful features. When you work with React, it is important to start thinking about your user interface in terms of components like the App example in the last challenge. You break down your UI into its basic building blocks, and those pieces become the components. This helps to separate the code responsible for the UI from the code responsible for handling your application logic. It can greatly simplify the development and maintenance of complex projects. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#description"
  },"654": {
    "doc": "Title",
    "title": "–instructions–",
    "content": "There are two functional components defined in the code editor, called TypesOfFruit and Fruits. Take the TypesOfFruit component and compose it, or nest it, within the Fruits component. Then take the Fruits component and nest it within the TypesOfFood component. The result should be a child component, nested within a parent component, which is nested within a parent component of its own! . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#instructions"
  },"655": {
    "doc": "Title",
    "title": "–hints–",
    "content": "The TypesOfFood component should return a single div element. assert(Enzyme.shallow(React.createElement(TypesOfFood)).type() === 'div'); . The TypesOfFood component should return the Fruits component. assert( Enzyme.shallow(React.createElement(TypesOfFood)).props().children[1].type .name === 'Fruits' ); . The Fruits component should return the TypesOfFruit component. assert( Enzyme.mount(React.createElement(TypesOfFood)).find('h2').html() === '&lt;h2&gt;Fruits:&lt;/h2&gt;' ); . The TypesOfFruit component should return the h2 and ul elements. assert( Enzyme.mount(React.createElement(TypesOfFood)).find('ul').text() === 'ApplesBlueberriesStrawberriesBananas' ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#hints"
  },"656": {
    "doc": "Title",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#seed"
  },"657": {
    "doc": "Title",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;TypesOfFood /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#after-user-code"
  },"658": {
    "doc": "Title",
    "title": "–seed-contents–",
    "content": "const TypesOfFruit = () =&gt; { return ( &lt;div&gt; &lt;h2&gt;Fruits:&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Apples&lt;/li&gt; &lt;li&gt;Blueberries&lt;/li&gt; &lt;li&gt;Strawberries&lt;/li&gt; &lt;li&gt;Bananas&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ); }; const Fruits = () =&gt; { return ( &lt;div&gt; { /* Change code below this line */ } { /* Change code above this line */ } &lt;/div&gt; ); }; class TypesOfFood extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;Types of Food:&lt;/h1&gt; { /* Change code below this line */ } { /* Change code above this line */ } &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#seed-contents"
  },"659": {
    "doc": "Title",
    "title": "–solutions–",
    "content": "const TypesOfFruit = () =&gt; { return ( &lt;div&gt; &lt;h2&gt;Fruits:&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Apples&lt;/li&gt; &lt;li&gt;Blueberries&lt;/li&gt; &lt;li&gt;Strawberries&lt;/li&gt; &lt;li&gt;Bananas&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ); }; const Fruits = () =&gt; { return ( &lt;div&gt; { /* Change code below this line */ } &lt;TypesOfFruit /&gt; { /* Change code above this line */ } &lt;/div&gt; ); }; class TypesOfFood extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;Types of Food:&lt;/h1&gt; { /* Change code below this line */ } &lt;Fruits /&gt; { /* Change code above this line */ } &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html#solutions"
  },"660": {
    "doc": "Title",
    "title": "Title",
    "content": ". id: 5a24c314108439a4d4036165 title: Use React to Render Nested Components challengeType: 6 forumTopicId: 301420 dashedName: use-react-to-render-nested-components — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-react-to-render-nested-components.html"
  },"661": {
    "doc": "Title",
    "title": "–description–",
    "content": "Sometimes you might need to know the previous state when updating the state. However, state updates may be asynchronous - this means React may batch multiple setState() calls into a single update. This means you can’t rely on the previous value of this.state or this.props when calculating the next value. So, you should not use code like this: . this.setState({ counter: this.state.counter + this.props.increment }); . Instead, you should pass setState a function that allows you to access state and props. Using a function with setState guarantees you are working with the most current values of state and props. This means that the above should be rewritten as: . this.setState((state, props) =&gt; ({ counter: state.counter + props.increment })); . You can also use a form without props if you need only the state: . this.setState(state =&gt; ({ counter: state.counter + 1 })); . Note that you have to wrap the object literal in parentheses, otherwise JavaScript thinks it’s a block of code. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#description"
  },"662": {
    "doc": "Title",
    "title": "–instructions–",
    "content": "MyComponent has a visibility property which is initialized to false. The render method returns one view if the value of visibility is true, and a different view if it is false. Currently, there is no way of updating the visibility property in the component’s state. The value should toggle back and forth between true and false. There is a click handler on the button which triggers a class method called toggleVisibility(). Pass a function to setState to define this method so that the state of visibility toggles to the opposite value when the method is called. If visibility is false, the method sets it to true, and vice versa. Finally, click the button to see the conditional rendering of the component based on its state. Hint: Don’t forget to bind the this keyword to the method in the constructor! . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#instructions"
  },"663": {
    "doc": "Title",
    "title": "–hints–",
    "content": "MyComponent should return a div element which contains a button. assert.strictEqual( Enzyme.mount(React.createElement(MyComponent)).find('div').find('button') .length, 1 ); . The state of MyComponent should initialize with a visibility property set to false. assert.strictEqual( Enzyme.mount(React.createElement(MyComponent)).state('visibility'), false ); . Clicking the button element should toggle the visibility property in state between true and false. (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () =&gt; { mockedComponent.setState({ visibility: false }); return mockedComponent.state('visibility'); }; const second = () =&gt; { mockedComponent.find('button').simulate('click'); return mockedComponent.state('visibility'); }; const third = () =&gt; { mockedComponent.find('button').simulate('click'); return mockedComponent.state('visibility'); }; const firstValue = first(); const secondValue = second(); const thirdValue = third(); assert(!firstValue &amp;&amp; secondValue &amp;&amp; !thirdValue); })(); . An anonymous function should be passed to setState. const paramRegex = '[a-zA-Z$_]\\\\w*(,[a-zA-Z$_]\\\\w*)?'; assert( new RegExp( 'this\\\\.setState\\\\((function\\\\(' + paramRegex + '\\\\){|([a-zA-Z$_]\\\\w*|\\\\(' + paramRegex + '\\\\))=&gt;)' ).test(__helpers.removeWhiteSpace(code)) ); . this should not be used inside setState . assert(!/this\\.setState\\([^}]*this/.test(code)); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#hints"
  },"664": {
    "doc": "Title",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#seed"
  },"665": {
    "doc": "Title",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('root')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#after-user-code"
  },"666": {
    "doc": "Title",
    "title": "–seed-contents–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { visibility: false }; // Change code below this line // Change code above this line } // Change code below this line // Change code above this line render() { if (this.state.visibility) { return ( &lt;div&gt; &lt;button onClick={this.toggleVisibility}&gt;Click Me&lt;/button&gt; &lt;h1&gt;Now you see me!&lt;/h1&gt; &lt;/div&gt; ); } else { return ( &lt;div&gt; &lt;button onClick={this.toggleVisibility}&gt;Click Me&lt;/button&gt; &lt;/div&gt; ); } } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#seed-contents"
  },"667": {
    "doc": "Title",
    "title": "–solutions–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { visibility: false }; this.toggleVisibility = this.toggleVisibility.bind(this); } toggleVisibility() { this.setState(state =&gt; ({ visibility: !state.visibility })); } render() { if (this.state.visibility) { return ( &lt;div&gt; &lt;button onClick={this.toggleVisibility}&gt;Click Me&lt;/button&gt; &lt;h1&gt;Now you see me!&lt;/h1&gt; &lt;/div&gt; ); } else { return ( &lt;div&gt; &lt;button onClick={this.toggleVisibility}&gt;Click Me&lt;/button&gt; &lt;/div&gt; ); } } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html#solutions"
  },"668": {
    "doc": "Title",
    "title": "Title",
    "content": ". id: 5a24c314108439a4d4036176 title: Use State to Toggle an Element challengeType: 6 forumTopicId: 301421 dashedName: use-state-to-toggle-an-element — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-state-to-toggle-an-element.html"
  },"669": {
    "doc": "Title",
    "title": "–description–",
    "content": "Most web developers, at some point, need to call an API endpoint to retrieve data. If you’re working with React, it’s important to know where to perform this action. The best practice with React is to place API calls or any calls to your server in the lifecycle method componentDidMount(). This method is called after a component is mounted to the DOM. Any calls to setState() here will trigger a re-rendering of your component. When you call an API in this method, and set your state with the data that the API returns, it will automatically trigger an update once you receive the data. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#description"
  },"670": {
    "doc": "Title",
    "title": "–instructions–",
    "content": "There is a mock API call in componentDidMount(). It sets state after 2.5 seconds to simulate calling a server to retrieve data. This example requests the current total active users for a site. In the render method, render the value of activeUsers in the h1 after the text Active Users:. Watch what happens in the preview, and feel free to change the timeout to see the different effects. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#instructions"
  },"671": {
    "doc": "Title",
    "title": "–hints–",
    "content": "MyComponent should render a div element which wraps an h1 tag. assert( (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return ( mockedComponent.find('div').length === 1 &amp;&amp; mockedComponent.find('h1').length === 1 ); })() ); . Component state should be updated with a timeout function in componentDidMount. assert( (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return new RegExp('setTimeout(.|\\n)+setState(.|\\n)+activeUsers').test( String(mockedComponent.instance().componentDidMount) ); })() ); . The h1 tag should render the activeUsers value from MyComponent’s state. (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () =&gt; { mockedComponent.setState({ activeUsers: 1237 }); return mockedComponent.find('h1').text(); }; const second = () =&gt; { mockedComponent.setState({ activeUsers: 1000 }); return mockedComponent.find('h1').text(); }; assert(new RegExp('1237').test(first()) &amp;&amp; new RegExp('1000').test(second())); })(); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#hints"
  },"672": {
    "doc": "Title",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#seed"
  },"673": {
    "doc": "Title",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('root')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#after-user-code"
  },"674": {
    "doc": "Title",
    "title": "–seed-contents–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { activeUsers: null }; } componentDidMount() { setTimeout(() =&gt; { this.setState({ activeUsers: 1273 }); }, 2500); } render() { return ( &lt;div&gt; {/* Change code below this line */} &lt;h1&gt;Active Users: &lt;/h1&gt; {/* Change code above this line */} &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#seed-contents"
  },"675": {
    "doc": "Title",
    "title": "–solutions–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); this.state = { activeUsers: null }; } componentDidMount() { setTimeout(() =&gt; { this.setState({ activeUsers: 1273 }); }, 2500); } render() { return ( &lt;div&gt; &lt;h1&gt;Active Users: {this.state.activeUsers}&lt;/h1&gt; &lt;/div&gt; ); } } . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html#solutions"
  },"676": {
    "doc": "Title",
    "title": "Title",
    "content": ". id: 5a24c314108439a4d403617d title: Use the Lifecycle Method componentDidMount challengeType: 6 forumTopicId: 301422 dashedName: use-the-lifecycle-method-componentdidmount — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentdidmount.html"
  },"677": {
    "doc": "Title",
    "title": "–description–",
    "content": "React components have several special methods that provide opportunities to perform actions at specific points in the lifecycle of a component. These are called lifecycle methods, or lifecycle hooks, and allow you to catch components at certain points in time. This can be before they are rendered, before they update, before they receive props, before they unmount, and so on. Here is a list of some of the main lifecycle methods: componentWillMount() componentDidMount() shouldComponentUpdate() componentDidUpdate() componentWillUnmount() The next several lessons will cover some of the basic use cases for these lifecycle methods. Note: The componentWillMount Lifecycle method will be deprecated in a future version of 16.X and removed in version 17. Learn more in this article . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#description"
  },"678": {
    "doc": "Title",
    "title": "–instructions–",
    "content": "The componentWillMount() method is called before the render() method when a component is being mounted to the DOM. Log something to the console within componentWillMount() - you may want to have your browser console open to see the output. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#instructions"
  },"679": {
    "doc": "Title",
    "title": "–hints–",
    "content": "MyComponent should render a div element. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('div').length === 1; })() ); . console.log should be called in componentWillMount. assert( (function () { const lifecycle = React.createElement(MyComponent) .type.prototype.componentWillMount.toString() .replace(/ /g, ''); return lifecycle.includes('console.log('); })() ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#hints"
  },"680": {
    "doc": "Title",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#seed"
  },"681": {
    "doc": "Title",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#after-user-code"
  },"682": {
    "doc": "Title",
    "title": "–seed-contents–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); } componentWillMount() { // Change code below this line // Change code above this line } render() { return &lt;div /&gt; } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#seed-contents"
  },"683": {
    "doc": "Title",
    "title": "–solutions–",
    "content": "class MyComponent extends React.Component { constructor(props) { super(props); } componentWillMount() { // Change code below this line console.log('Component is mounting...'); // Change code above this line } render() { return &lt;div /&gt; } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html#solutions"
  },"684": {
    "doc": "Title",
    "title": "Title",
    "content": ". id: 5a24c314108439a4d403617c title: Use the Lifecycle Method componentWillMount challengeType: 6 forumTopicId: 301423 dashedName: use-the-lifecycle-method-componentwillmount — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/use-the-lifecycle-method-componentwillmount.html"
  },"685": {
    "doc": "Use the Spread Operator on Arrays",
    "title": "–description–",
    "content": "One solution from ES6 to help enforce state immutability in Redux is the spread operator: .... The spread operator has a variety of applications, one of which is well-suited to the previous challenge of producing a new array from an existing array. This is relatively new, but commonly used syntax. For example, if you have an array myArray and write: . let newArray = [...myArray]; . newArray is now a clone of myArray. Both arrays still exist separately in memory. If you perform a mutation like newArray.push(5), myArray doesn’t change. The ... effectively spreads out the values in myArray into a new array. To clone an array but add additional values in the new array, you could write [...myArray, 'new value']. This would return a new array composed of the values in myArray and the string new value as the last value. The spread syntax can be used multiple times in array composition like this, but it’s important to note that it only makes a shallow copy of the array. That is to say, it only provides immutable array operations for one-dimensional arrays. ",
    "url": "http://localhost:4000/js-libraries/redux/use-the-spread-operator-on-arrays.html#description",
    "relUrl": "/js-libraries/redux/use-the-spread-operator-on-arrays.html#description"
  },"686": {
    "doc": "Use the Spread Operator on Arrays",
    "title": "–instructions–",
    "content": "Use the spread operator to return a new copy of state when a to-do is added. ",
    "url": "http://localhost:4000/js-libraries/redux/use-the-spread-operator-on-arrays.html#instructions",
    "relUrl": "/js-libraries/redux/use-the-spread-operator-on-arrays.html#instructions"
  },"687": {
    "doc": "Use the Spread Operator on Arrays",
    "title": "–hints–",
    "content": "The Redux store should exist and initialize with a state equal to [\"Do not mutate state!\"]. assert( (function () { const initialState = store.getState(); return ( Array.isArray(initialState) === true &amp;&amp; initialState[0] === 'Do not mutate state!' ); })() ); . addToDo and immutableReducer both should be functions. assert(typeof addToDo === 'function' &amp;&amp; typeof immutableReducer === 'function'); . Dispatching an action of type ADD_TO_DO on the Redux store should add a todo item and should NOT mutate state. assert( (function () { const initialState = store.getState(); const isFrozen = DeepFreeze(initialState); store.dispatch(addToDo('__TEST__TO__DO__')); const finalState = store.getState(); const expectedState = ['Do not mutate state!', '__TEST__TO__DO__']; return isFrozen &amp;&amp; DeepEqual(finalState, expectedState); })() ); . The spread operator should be used to return new state. (getUserInput) =&gt; assert(getUserInput('index').includes('...state')); . ",
    "url": "http://localhost:4000/js-libraries/redux/use-the-spread-operator-on-arrays.html#hints",
    "relUrl": "/js-libraries/redux/use-the-spread-operator-on-arrays.html#hints"
  },"688": {
    "doc": "Use the Spread Operator on Arrays",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/use-the-spread-operator-on-arrays.html#seed",
    "relUrl": "/js-libraries/redux/use-the-spread-operator-on-arrays.html#seed"
  },"689": {
    "doc": "Use the Spread Operator on Arrays",
    "title": "–seed-contents–",
    "content": "const immutableReducer = (state = ['Do not mutate state!'], action) =&gt; { switch(action.type) { case 'ADD_TO_DO': // Don't mutate state here or the tests will fail return default: return state; } }; const addToDo = (todo) =&gt; { return { type: 'ADD_TO_DO', todo } } const store = Redux.createStore(immutableReducer); . ",
    "url": "http://localhost:4000/js-libraries/redux/use-the-spread-operator-on-arrays.html#seed-contents",
    "relUrl": "/js-libraries/redux/use-the-spread-operator-on-arrays.html#seed-contents"
  },"690": {
    "doc": "Use the Spread Operator on Arrays",
    "title": "–solutions–",
    "content": "const immutableReducer = (state = ['Do not mutate state!'], action) =&gt; { switch(action.type) { case 'ADD_TO_DO': return [ ...state, action.todo ]; default: return state; } }; const addToDo = (todo) =&gt; { return { type: 'ADD_TO_DO', todo } } const store = Redux.createStore(immutableReducer); . ",
    "url": "http://localhost:4000/js-libraries/redux/use-the-spread-operator-on-arrays.html#solutions",
    "relUrl": "/js-libraries/redux/use-the-spread-operator-on-arrays.html#solutions"
  },"691": {
    "doc": "Use the Spread Operator on Arrays",
    "title": "Use the Spread Operator on Arrays",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/use-the-spread-operator-on-arrays.html",
    "relUrl": "/js-libraries/redux/use-the-spread-operator-on-arrays.html"
  },"692": {
    "doc": "Using drush",
    "title": "Using drush command",
    "content": "For a complete use of drush commands run drush list or visit documentation page on Command list Following are some random use of drush I picked up, for complete list check out their website. ",
    "url": "http://localhost:4000/php-ramework/Drupal/using-drush.html#using-drush-command",
    "relUrl": "/php-ramework/Drupal/using-drush.html#using-drush-command"
  },"693": {
    "doc": "Using drush",
    "title": "Drush list user",
    "content": "Not like WP CLI, Drush doesnt have the command to list all users but there’s a way to list based on the role. For example if you wish to list all of the administrator users: . drush uinf --uid=$(drush sqlq \"SELECT GROUP_CONCAT(entity_id) FROM user__roles WHERE roles_target_id = 'administrator'\") . That will give you table of all administrator user role. To list users from range of ID nubers e.g. 1-200: . drush user:information --uid=\"$(echo {1..200},|sed -e 's/ //g')\" . ",
    "url": "http://localhost:4000/php-ramework/Drupal/using-drush.html#drush-list-user",
    "relUrl": "/php-ramework/Drupal/using-drush.html#drush-list-user"
  },"694": {
    "doc": "Using drush",
    "title": "Using drush within DDEV system",
    "content": "If you are working on local with DDEV, you will have to add ddev at the front of drush`: . ddev drush pm:list . Otherwise it will return error connecting database: . Command pm:list was not found. Drush was unable to query the database. As a result, many commands are unavailable. Re-run your command with --debug to see relevant log messages. ",
    "url": "http://localhost:4000/php-ramework/Drupal/using-drush.html#using-drush-within-ddev-system",
    "relUrl": "/php-ramework/Drupal/using-drush.html#using-drush-within-ddev-system"
  },"695": {
    "doc": "Using drush",
    "title": "Using  drush sql-cli",
    "content": "drush sql-cli or drush sqlc give you a session on the SQL query and search on the tables available. To use the local drush session use the following: ./bin/drush sql-cli # instead of just drush sql-cli . This will give you the SQL session: . Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 10380892 Server version: 10.3.27-MariaDB MariaDB Server Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. Start searching with some genral SQL queries . to list all table: . show tables; . Note that this will be a very big list if you have a big website . to search table with some terms use like '%[term]%'; . show tables like '%path%'; . If you are looking for any tables that contains url term on them. Dont miss the semicolon (;) The result should be a list tables with url on them . +--------------------------------------------+ | Tables_in_wi_cdu_sandbox (%path%) | +--------------------------------------------+ | path_table_set | irawan_path__background_colour | irawan__table_with_path | path_alias | path_alias_revision | +--------------------------------------------+ 5 rows in set (0.00 sec) . to see the list a specific table . Listing all of path_alias or URL on the website . select*from path_alias . Then you will have the list of all of the URLs on your website. You can narrow it down by selecting the type with CONCAT Listing all URL with content types: . select nid, type, alias from node_field_data nfd inner join path_alias ua on CONCAT('/node/', nid) = path; . Result: . +-------+--------------------+-------------------------------------+ | nid | type | alias | +-------+--------------------+-------------------------------------+ | 391 | basic | /home | 443 | basic | /about | 444 | basic | /contact | 445 | blog | /the-healthy-nasi-goreng | 447 | blog | /my-experience-eating-nasi-goreng | 391 | blog | /nasi-goreng-is-great | 443 | blog | /about-nasi-goreng | 444 | blog | /where-can-i-buy-nasi-goreng | 445 | blog | /the-healthy-nasi-goreng | 447 | blog | /my-experience-eating-nasi-goreng | +-----+--------------------+---------------------------------------+ . Choose . ",
    "url": "http://localhost:4000/php-ramework/Drupal/using-drush.html#using--drush-sql-cli",
    "relUrl": "/php-ramework/Drupal/using-drush.html#using--drush-sql-cli"
  },"696": {
    "doc": "Using drush",
    "title": "Using drush",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Drupal/using-drush.html",
    "relUrl": "/php-ramework/Drupal/using-drush.html"
  },"697": {
    "doc": "WP CLI",
    "title": "WP-CLI - Wordpress Command Line Interface",
    "content": "With WP-CLI you can manage and update core, plugins, users, themes and many more without using browsers. Requirements . | UNIX-like environment | PHP 5.6 or later | WP core version 3.7 or later | . ",
    "url": "http://localhost:4000/CMS/Wordpress/wp-cli.html#wp-cli---wordpress-command-line-interface",
    "relUrl": "/CMS/Wordpress/wp-cli.html#wp-cli---wordpress-command-line-interface"
  },"698": {
    "doc": "WP CLI",
    "title": "Installation",
    "content": "Donwload the wp-cli.phar file: . curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar . Check if it’s working: . php wp-cli.phar --info . To be able to use the command: wp, make this file executable: . chmod +x wp-cli.phar . Move it in your working file somewhere: . sudo mv wp-cli.phar /usr/local/bin/wp . Check if it works: . wp --info . Or check your WP version . wp core version . Note . If you are working on a shared hosting where you don’t have the sudo access to the root and they don’t install WP-CLI, you still can use this but not with wp alias. Use the following for this example wp core version : . php wp-cli.phar core version . ",
    "url": "http://localhost:4000/CMS/Wordpress/wp-cli.html#installation",
    "relUrl": "/CMS/Wordpress/wp-cli.html#installation"
  },"699": {
    "doc": "WP CLI",
    "title": "WP CLI",
    "content": " ",
    "url": "http://localhost:4000/CMS/Wordpress/wp-cli.html",
    "relUrl": "/CMS/Wordpress/wp-cli.html"
  },"700": {
    "doc": "Write a Counter with Redux",
    "title": "–description–",
    "content": "Now you’ve learned all the core principles of Redux! You’ve seen how to create actions and action creators, create a Redux store, dispatch your actions against the store, and design state updates with pure reducers. You’ve even seen how to manage complex state with reducer composition and handle asynchronous actions. These examples are simplistic, but these concepts are the core principles of Redux. If you understand them well, you’re ready to start building your own Redux app. The next challenges cover some of the details regarding state immutability, but first, here’s a review of everything you’ve learned so far. ",
    "url": "http://localhost:4000/js-libraries/redux/write-a-counter-with-redux.html#description",
    "relUrl": "/js-libraries/redux/write-a-counter-with-redux.html#description"
  },"701": {
    "doc": "Write a Counter with Redux",
    "title": "–instructions–",
    "content": "In this lesson, you’ll implement a simple counter with Redux from scratch. The basics are provided in the code editor, but you’ll have to fill in the details! Use the names that are provided and define incAction and decAction action creators, the counterReducer(), INCREMENT and DECREMENT action types, and finally the Redux store. Once you’re finished you should be able to dispatch INCREMENT or DECREMENT actions to increment or decrement the state held in the store. Good luck building your first Redux app! . ",
    "url": "http://localhost:4000/js-libraries/redux/write-a-counter-with-redux.html#instructions",
    "relUrl": "/js-libraries/redux/write-a-counter-with-redux.html#instructions"
  },"702": {
    "doc": "Write a Counter with Redux",
    "title": "–hints–",
    "content": "The action creator incAction should return an action object with type equal to the value of INCREMENT . assert(incAction().type === INCREMENT); . The action creator decAction should return an action object with type equal to the value of DECREMENT . assert(decAction().type === DECREMENT); . Running store.getState() should return a number . assert(typeof store.getState() === 'number'); . The Redux store should initialize with a state of 0. assert(_store.getState() === 0); . Dispatching incAction on the Redux store should increment the state by 1. assert( (function () { const initialState = _store.getState(); _store.dispatch(incAction()); const incState = _store.getState(); return initialState + 1 === incState; })() ); . Dispatching decAction on the Redux store should decrement the state by 1. assert( (function () { const initialState = _store.getState(); _store.dispatch(decAction()); const decState = _store.getState(); return initialState - 1 === decState; })() ); . counterReducer should be a function . assert(typeof counterReducer === 'function'); . ",
    "url": "http://localhost:4000/js-libraries/redux/write-a-counter-with-redux.html#hints",
    "relUrl": "/js-libraries/redux/write-a-counter-with-redux.html#hints"
  },"703": {
    "doc": "Write a Counter with Redux",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/write-a-counter-with-redux.html#seed",
    "relUrl": "/js-libraries/redux/write-a-counter-with-redux.html#seed"
  },"704": {
    "doc": "Write a Counter with Redux",
    "title": "–seed-contents–",
    "content": "const INCREMENT = null; // Define a constant for increment action types const DECREMENT = null; // Define a constant for decrement action types const counterReducer = null; // Define the counter reducer which will increment or decrement the state based on the action it receives const incAction = null; // Define an action creator for incrementing const decAction = null; // Define an action creator for decrementing const store = null; // Define the Redux store here, passing in your reducers . ",
    "url": "http://localhost:4000/js-libraries/redux/write-a-counter-with-redux.html#seed-contents",
    "relUrl": "/js-libraries/redux/write-a-counter-with-redux.html#seed-contents"
  },"705": {
    "doc": "Write a Counter with Redux",
    "title": "–after-user-code–",
    "content": "const _store = Redux.createStore(counterReducer) . ",
    "url": "http://localhost:4000/js-libraries/redux/write-a-counter-with-redux.html#after-user-code",
    "relUrl": "/js-libraries/redux/write-a-counter-with-redux.html#after-user-code"
  },"706": {
    "doc": "Write a Counter with Redux",
    "title": "–solutions–",
    "content": "const INCREMENT = 'INCREMENT'; const DECREMENT = 'DECREMENT'; const counterReducer = (state = 0, action) =&gt; { switch(action.type) { case INCREMENT: return state + 1; case DECREMENT: return state - 1; default: return state; } }; const incAction = () =&gt; { return { type: INCREMENT } }; const decAction = () =&gt; { return { type: DECREMENT } }; const store = Redux.createStore(counterReducer); . ",
    "url": "http://localhost:4000/js-libraries/redux/write-a-counter-with-redux.html#solutions",
    "relUrl": "/js-libraries/redux/write-a-counter-with-redux.html#solutions"
  },"707": {
    "doc": "Write a Counter with Redux",
    "title": "Write a Counter with Redux",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/redux/write-a-counter-with-redux.html",
    "relUrl": "/js-libraries/redux/write-a-counter-with-redux.html"
  },"708": {
    "doc": "Title",
    "title": "–description–",
    "content": "Now that you’ve learned the basics of JSX and React components, it’s time to write a component on your own. React components are the core building blocks of React applications so it’s important to become very familiar with writing them. Remember, a typical React component is an ES6 class which extends React.Component. It has a render method that returns HTML (from JSX) or null. This is the basic form of a React component. Once you understand this well, you will be prepared to start building more complex React projects. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html#description"
  },"709": {
    "doc": "Title",
    "title": "–instructions–",
    "content": "Define a class MyComponent that extends React.Component. Its render method should return a div that contains an h1 tag with the text: My First React Component! in it. Use this text exactly, the case and punctuation matter. Make sure to call the constructor for your component, too. Render this component to the DOM using ReactDOM.render(). There is a div with id='challenge-node' available for you to use. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html#instructions"
  },"710": {
    "doc": "Title",
    "title": "–hints–",
    "content": "There should be a React component called MyComponent. (getUserInput) =&gt; assert( __helpers .removeWhiteSpace(getUserInput('index')) .includes('classMyComponentextendsReact.Component{') ); . MyComponent should contain an h1 tag with text My First React Component! Case and punctuation matter. assert( (function () { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('h1').text() === 'My First React Component!'; })() ); . MyComponent should render to the DOM. assert(document.getElementById('challenge-node').childNodes.length === 1); . MyComponent should have a constructor calling super with props. assert( MyComponent.toString().includes('MyComponent(props)') &amp;&amp; MyComponent.toString().includes('_super.call(this, props)') ); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html#hints"
  },"711": {
    "doc": "Title",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html#seed"
  },"712": {
    "doc": "Title",
    "title": "–seed-contents–",
    "content": "// Change code below this line . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html#seed-contents"
  },"713": {
    "doc": "Title",
    "title": "–solutions–",
    "content": "// Change code below this line class MyComponent extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;My First React Component!&lt;/h1&gt; &lt;/div&gt; ); } }; ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById('challenge-node')); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html#solutions"
  },"714": {
    "doc": "Title",
    "title": "Title",
    "content": ". id: 5a24c314108439a4d4036168 title: Write a React Component from Scratch challengeType: 6 forumTopicId: 301424 dashedName: write-a-react-component-from-scratch — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-react-component-from-scratch.html"
  },"715": {
    "doc": "Title",
    "title": "–description–",
    "content": "You can design a more complex stateful component by combining the concepts covered so far. These include initializing state, writing methods that set state, and assigning click handlers to trigger these methods. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#description",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#description"
  },"716": {
    "doc": "Title",
    "title": "–instructions–",
    "content": "The Counter component keeps track of a count value in state. There are two buttons which call methods increment() and decrement(). Write these methods so the counter value is incremented or decremented by 1 when the appropriate button is clicked. Also, create a reset() method so when the reset button is clicked, the count is set to 0. Note: Make sure you don’t modify the classNames of the buttons. Also, remember to add the necessary bindings for the newly-created methods in the constructor. ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#instructions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#instructions"
  },"717": {
    "doc": "Title",
    "title": "–hints–",
    "content": "Counter should return a div element which contains three buttons with text content in this order Increment!, Decrement!, Reset. assert( (() =&gt; { const mockedComponent = Enzyme.mount(React.createElement(Counter)); return ( mockedComponent.find('.inc').text() === 'Increment!' &amp;&amp; mockedComponent.find('.dec').text() === 'Decrement!' &amp;&amp; mockedComponent.find('.reset').text() === 'Reset' ); })() ); . The state of Counter should initialize with a count property set to 0. const mockedComponent = Enzyme.mount(React.createElement(Counter)); assert(mockedComponent.find('h1').text() === 'Current Count: 0'); . Clicking the increment button should increment the count by 1. const mockedComponent = Enzyme.mount(React.createElement(Counter)); mockedComponent.find('.inc').simulate('click'); assert(mockedComponent.find('h1').text() === 'Current Count: 1'); . Clicking the decrement button should decrement the count by 1. const mockedComponent = Enzyme.mount(React.createElement(Counter)); mockedComponent.find('.dec').simulate('click'); assert(mockedComponent.find('h1').text() === 'Current Count: -1'); . Clicking the reset button should reset the count to 0. const mockedComponent = Enzyme.mount(React.createElement(Counter)); mockedComponent.setState({ count: 5 }); const currentCountElement = mockedComponent.find('h1'); assert(currentCountElement.text() === 'Current Count: 5'); mockedComponent.find('.reset').simulate('click'); assert(currentCountElement.text() === 'Current Count: 0'); . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#hints",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#hints"
  },"718": {
    "doc": "Title",
    "title": "–seed–",
    "content": " ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#seed",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#seed"
  },"719": {
    "doc": "Title",
    "title": "–after-user-code–",
    "content": "ReactDOM.render(&lt;Counter /&gt;, document.getElementById('root')) . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#after-user-code",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#after-user-code"
  },"720": {
    "doc": "Title",
    "title": "–seed-contents–",
    "content": "class Counter extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; // Change code below this line // Change code above this line } // Change code below this line // Change code above this line render() { return ( &lt;div&gt; &lt;button className='inc' onClick={this.increment}&gt;Increment!&lt;/button&gt; &lt;button className='dec' onClick={this.decrement}&gt;Decrement!&lt;/button&gt; &lt;button className='reset' onClick={this.reset}&gt;Reset&lt;/button&gt; &lt;h1&gt;Current Count: {this.state.count}&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#seed-contents",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#seed-contents"
  },"721": {
    "doc": "Title",
    "title": "–solutions–",
    "content": "class Counter extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; this.increment = this.increment.bind(this); this.decrement = this.decrement.bind(this); this.reset = this.reset.bind(this); } reset() { this.setState({ count: 0 }); } increment() { this.setState(state =&gt; ({ count: state.count + 1 })); } decrement() { this.setState(state =&gt; ({ count: state.count - 1 })); } render() { return ( &lt;div&gt; &lt;button className='inc' onClick={this.increment}&gt;Increment!&lt;/button&gt; &lt;button className='dec' onClick={this.decrement}&gt;Decrement!&lt;/button&gt; &lt;button className='reset' onClick={this.reset}&gt;Reset&lt;/button&gt; &lt;h1&gt;Current Count: {this.state.count}&lt;/h1&gt; &lt;/div&gt; ); } }; . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#solutions",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html#solutions"
  },"722": {
    "doc": "Title",
    "title": "Title",
    "content": ". id: 5a24c314108439a4d4036177 title: Write a Simple Counter challengeType: 6 forumTopicId: 301425 dashedName: write-a-simple-counter — . ",
    "url": "http://localhost:4000/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html",
    "relUrl": "/js-libraries/reaksi/freeCodeCamp/write-a-simple-counter.html"
  },"723": {
    "doc": "YML files",
    "title": "YML files",
    "content": " ",
    "url": "http://localhost:4000/php-ramework/Drupal/yml.html",
    "relUrl": "/php-ramework/Drupal/yml.html"
  }
}
